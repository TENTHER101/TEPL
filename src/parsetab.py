
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDErightPOWERleftLPARENRPARENDATATYPE DIVIDE EQ GE GT IDENTIFIER LE LPAREN LT MINUS NE NO NUMBER OUTPUT PLUS POWER RPAREN SET TEXT TIMES TO TYPE YES\n    statement : OUTPUT expression\n    \n    type_statement : TYPE DATATYPE\n    \n    var_assignment : SET IDENTIFIER\n    \n    statement : var_assignment TO expression\n              | var_assignment \n    \n    expression : expression PLUS expression\n               | expression MINUS expression\n               | expression TIMES expression\n               | expression DIVIDE expression\n               | expression POWER expression\n    expression : LPAREN expression RPAREN\n    expression : YES\n               | NO\n    \n    expression : expression EQ expression\n               | expression GT expression\n               | expression LT expression\n               | expression GE expression\n               | expression LE expression\n               | expression NE expression\n    expression : NUMBERexpression : IDENTIFIER'
    
_lr_action_items = {'OUTPUT':([0,],[2,]),'SET':([0,],[4,]),'$end':([1,3,5,7,8,9,10,12,25,26,27,28,29,30,31,32,33,34,35,36,37,],[0,-5,-1,-12,-13,-20,-21,-3,-4,-6,-7,-8,-9,-10,-14,-15,-16,-17,-18,-19,-11,]),'LPAREN':([2,6,11,13,14,15,16,17,18,19,20,21,22,23,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'YES':([2,6,11,13,14,15,16,17,18,19,20,21,22,23,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'NO':([2,6,11,13,14,15,16,17,18,19,20,21,22,23,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'NUMBER':([2,6,11,13,14,15,16,17,18,19,20,21,22,23,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'IDENTIFIER':([2,4,6,11,13,14,15,16,17,18,19,20,21,22,23,],[10,12,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'TO':([3,12,],[11,-3,]),'PLUS':([5,7,8,9,10,24,25,26,27,28,29,30,31,32,33,34,35,36,37,],[13,-12,-13,-20,-21,13,13,-6,-7,-8,-9,-10,13,13,13,13,13,13,-11,]),'MINUS':([5,7,8,9,10,24,25,26,27,28,29,30,31,32,33,34,35,36,37,],[14,-12,-13,-20,-21,14,14,-6,-7,-8,-9,-10,14,14,14,14,14,14,-11,]),'TIMES':([5,7,8,9,10,24,25,26,27,28,29,30,31,32,33,34,35,36,37,],[15,-12,-13,-20,-21,15,15,15,15,-8,-9,-10,15,15,15,15,15,15,-11,]),'DIVIDE':([5,7,8,9,10,24,25,26,27,28,29,30,31,32,33,34,35,36,37,],[16,-12,-13,-20,-21,16,16,16,16,-8,-9,-10,16,16,16,16,16,16,-11,]),'POWER':([5,7,8,9,10,24,25,26,27,28,29,30,31,32,33,34,35,36,37,],[17,-12,-13,-20,-21,17,17,17,17,17,17,17,17,17,17,17,17,17,-11,]),'EQ':([5,7,8,9,10,24,25,26,27,28,29,30,31,32,33,34,35,36,37,],[18,-12,-13,-20,-21,18,18,-6,-7,-8,-9,-10,18,18,18,18,18,18,-11,]),'GT':([5,7,8,9,10,24,25,26,27,28,29,30,31,32,33,34,35,36,37,],[19,-12,-13,-20,-21,19,19,-6,-7,-8,-9,-10,19,19,19,19,19,19,-11,]),'LT':([5,7,8,9,10,24,25,26,27,28,29,30,31,32,33,34,35,36,37,],[20,-12,-13,-20,-21,20,20,-6,-7,-8,-9,-10,20,20,20,20,20,20,-11,]),'GE':([5,7,8,9,10,24,25,26,27,28,29,30,31,32,33,34,35,36,37,],[21,-12,-13,-20,-21,21,21,-6,-7,-8,-9,-10,21,21,21,21,21,21,-11,]),'LE':([5,7,8,9,10,24,25,26,27,28,29,30,31,32,33,34,35,36,37,],[22,-12,-13,-20,-21,22,22,-6,-7,-8,-9,-10,22,22,22,22,22,22,-11,]),'NE':([5,7,8,9,10,24,25,26,27,28,29,30,31,32,33,34,35,36,37,],[23,-12,-13,-20,-21,23,23,-6,-7,-8,-9,-10,23,23,23,23,23,23,-11,]),'RPAREN':([7,8,9,10,24,26,27,28,29,30,31,32,33,34,35,36,37,],[-12,-13,-20,-21,37,-6,-7,-8,-9,-10,-14,-15,-16,-17,-18,-19,-11,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'var_assignment':([0,],[3,]),'expression':([2,6,11,13,14,15,16,17,18,19,20,21,22,23,],[5,24,25,26,27,28,29,30,31,32,33,34,35,36,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> OUTPUT expression','statement',2,'p_statement_output','parser.py',16),
  ('type_statement -> TYPE DATATYPE','type_statement',2,'p_statement_type','parser.py',23),
  ('var_assignment -> SET IDENTIFIER','var_assignment',2,'p_statement_var_assignment','parser.py',30),
  ('statement -> var_assignment TO expression','statement',3,'p_statement_assignment','parser.py',38),
  ('statement -> var_assignment','statement',1,'p_statement_assignment','parser.py',39),
  ('expression -> expression PLUS expression','expression',3,'p_expression','parser.py',49),
  ('expression -> expression MINUS expression','expression',3,'p_expression','parser.py',50),
  ('expression -> expression TIMES expression','expression',3,'p_expression','parser.py',51),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','parser.py',52),
  ('expression -> expression POWER expression','expression',3,'p_expression','parser.py',53),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',59),
  ('expression -> YES','expression',1,'p_expression_boolean','parser.py',65),
  ('expression -> NO','expression',1,'p_expression_boolean','parser.py',66),
  ('expression -> expression EQ expression','expression',3,'p_expression_comparison','parser.py',73),
  ('expression -> expression GT expression','expression',3,'p_expression_comparison','parser.py',74),
  ('expression -> expression LT expression','expression',3,'p_expression_comparison','parser.py',75),
  ('expression -> expression GE expression','expression',3,'p_expression_comparison','parser.py',76),
  ('expression -> expression LE expression','expression',3,'p_expression_comparison','parser.py',77),
  ('expression -> expression NE expression','expression',3,'p_expression_comparison','parser.py',78),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',84),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','parser.py',89),
]
