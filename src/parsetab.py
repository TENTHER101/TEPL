
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULTIPLYDIVIDErightUMINUSDIVIDE LPAREN MINUS MULTIPLY NUMBER PLUS RPAREN UMINUSstatement  : NUMBER PLUS NUMBER\n                  | NUMBER MINUS NUMBER\n                  | NUMBER MULTIPLY NUMBER\n                  | NUMBER DIVIDE NUMBERexpression : NUMBER\n                  | UMINUS expression : LPAREN expression RPAREN'
    
_lr_action_items = {'NUMBER':([0,3,4,5,6,],[2,7,8,9,10,]),'$end':([1,7,8,9,10,],[0,-1,-2,-3,-4,]),'PLUS':([2,],[3,]),'MINUS':([2,],[4,]),'MULTIPLY':([2,],[5,]),'DIVIDE':([2,],[6,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> NUMBER PLUS NUMBER','statement',3,'p_expression_binop','tepl.py',74),
  ('statement -> NUMBER MINUS NUMBER','statement',3,'p_expression_binop','tepl.py',75),
  ('statement -> NUMBER MULTIPLY NUMBER','statement',3,'p_expression_binop','tepl.py',76),
  ('statement -> NUMBER DIVIDE NUMBER','statement',3,'p_expression_binop','tepl.py',77),
  ('expression -> NUMBER','expression',1,'p_expression_number','tepl.py',85),
  ('expression -> UMINUS','expression',1,'p_expression_number','tepl.py',86),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','tepl.py',90),
]
