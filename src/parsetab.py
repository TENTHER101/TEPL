
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDErightPOWERleftLPARENRPARENAND DATATYPE DIVIDE EQ EXPECTING FROM GE GT IDENTIFIER IF INPUT LE LPAREN LT MINUS NE NO NUMBER OUTPUT PLUS POWER RANDOM RPAREN SET TEXT THEN TIMES TO YES\n    statement : OUTPUT expression\n              | OUTPUT ask\n    \n    ask : TEXT EXPECTING INPUT AND DATATYPE\n    \n    random_statement : RANDOM DATATYPE FROM expression TO expression\n    \n    var_assignment : SET IDENTIFIER\n    \n    statement : var_assignment TO expression\n              | var_assignment \n              | var_assignment TO ask\n    \n    statement : IF comp_expr THEN statement\n    \n    expression : expression IF comp_expr\n    \n    expression : expression PLUS expression\n               | expression MINUS expression\n               | expression TIMES expression\n               | expression DIVIDE expression\n               | expression POWER expression\n    expression : LPAREN expression RPAREN\n    expression : YES\n               | NO\n    \n    comp_expr  : expression EQ expression\n               | expression GT expression\n               | expression LT expression\n               | expression GE expression\n               | expression LE expression\n               | expression NE expression\n    \n    expression : comp_expr\n    expression : NUMBERexpression : IDENTIFIERexpression : random_statementexpression : TEXTexpression : INPUT'
    
_lr_action_items = {'OUTPUT':([0,40,],[2,2,]),'IF':([0,6,8,10,11,12,13,14,15,16,19,20,21,35,38,40,41,42,43,44,45,46,47,48,49,50,51,52,53,58,61,],[4,23,-25,-17,-18,-26,-27,-28,-29,-30,-25,23,-29,23,23,4,-10,-11,-12,-13,-14,-15,23,23,23,23,23,23,-16,23,23,]),'SET':([0,40,],[5,5,]),'$end':([1,3,6,7,8,10,11,12,13,14,15,16,21,22,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,56,59,61,],[0,-7,-1,-2,-25,-17,-18,-26,-27,-28,-29,-30,-29,-5,-6,-8,-10,-11,-12,-13,-14,-15,-19,-20,-21,-22,-23,-24,-16,-9,-3,-4,]),'LPAREN':([2,4,9,18,23,24,25,26,27,28,29,30,31,32,33,34,55,60,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'YES':([2,4,9,18,23,24,25,26,27,28,29,30,31,32,33,34,55,60,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'NO':([2,4,9,18,23,24,25,26,27,28,29,30,31,32,33,34,55,60,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'NUMBER':([2,4,9,18,23,24,25,26,27,28,29,30,31,32,33,34,55,60,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'IDENTIFIER':([2,4,5,9,18,23,24,25,26,27,28,29,30,31,32,33,34,55,60,],[13,13,22,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'TEXT':([2,4,9,18,23,24,25,26,27,28,29,30,31,32,33,34,55,60,],[15,21,21,15,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'INPUT':([2,4,9,18,23,24,25,26,27,28,29,30,31,32,33,34,36,55,60,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,54,16,16,]),'RANDOM':([2,4,9,18,23,24,25,26,27,28,29,30,31,32,33,34,55,60,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'TO':([3,8,10,11,12,13,14,16,21,22,41,42,43,44,45,46,47,48,49,50,51,52,53,58,61,],[18,-25,-17,-18,-26,-27,-28,-30,-29,-5,-10,-11,-12,-13,-14,-15,-19,-20,-21,-22,-23,-24,-16,60,-4,]),'PLUS':([6,8,10,11,12,13,14,15,16,19,20,21,35,38,41,42,43,44,45,46,47,48,49,50,51,52,53,58,61,],[24,-25,-17,-18,-26,-27,-28,-29,-30,-25,24,-29,24,24,-10,-11,-12,-13,-14,-15,24,24,24,24,24,24,-16,24,24,]),'MINUS':([6,8,10,11,12,13,14,15,16,19,20,21,35,38,41,42,43,44,45,46,47,48,49,50,51,52,53,58,61,],[25,-25,-17,-18,-26,-27,-28,-29,-30,-25,25,-29,25,25,-10,-11,-12,-13,-14,-15,25,25,25,25,25,25,-16,25,25,]),'TIMES':([6,8,10,11,12,13,14,15,16,19,20,21,35,38,41,42,43,44,45,46,47,48,49,50,51,52,53,58,61,],[26,-25,-17,-18,-26,-27,-28,-29,-30,-25,26,-29,26,26,-10,26,26,-13,-14,-15,26,26,26,26,26,26,-16,26,26,]),'DIVIDE':([6,8,10,11,12,13,14,15,16,19,20,21,35,38,41,42,43,44,45,46,47,48,49,50,51,52,53,58,61,],[27,-25,-17,-18,-26,-27,-28,-29,-30,-25,27,-29,27,27,-10,27,27,-13,-14,-15,27,27,27,27,27,27,-16,27,27,]),'POWER':([6,8,10,11,12,13,14,15,16,19,20,21,35,38,41,42,43,44,45,46,47,48,49,50,51,52,53,58,61,],[28,-25,-17,-18,-26,-27,-28,-29,-30,-25,28,-29,28,28,-10,28,28,28,28,28,28,28,28,28,28,28,-16,28,28,]),'EQ':([6,8,10,11,12,13,14,15,16,19,20,21,35,38,41,42,43,44,45,46,47,48,49,50,51,52,53,58,61,],[29,-25,-17,-18,-26,-27,-28,-29,-30,-25,29,-29,29,29,-10,-11,-12,-13,-14,-15,29,29,29,29,29,29,-16,29,29,]),'GT':([6,8,10,11,12,13,14,15,16,19,20,21,35,38,41,42,43,44,45,46,47,48,49,50,51,52,53,58,61,],[30,-25,-17,-18,-26,-27,-28,-29,-30,-25,30,-29,30,30,-10,-11,-12,-13,-14,-15,30,30,30,30,30,30,-16,30,30,]),'LT':([6,8,10,11,12,13,14,15,16,19,20,21,35,38,41,42,43,44,45,46,47,48,49,50,51,52,53,58,61,],[31,-25,-17,-18,-26,-27,-28,-29,-30,-25,31,-29,31,31,-10,-11,-12,-13,-14,-15,31,31,31,31,31,31,-16,31,31,]),'GE':([6,8,10,11,12,13,14,15,16,19,20,21,35,38,41,42,43,44,45,46,47,48,49,50,51,52,53,58,61,],[32,-25,-17,-18,-26,-27,-28,-29,-30,-25,32,-29,32,32,-10,-11,-12,-13,-14,-15,32,32,32,32,32,32,-16,32,32,]),'LE':([6,8,10,11,12,13,14,15,16,19,20,21,35,38,41,42,43,44,45,46,47,48,49,50,51,52,53,58,61,],[33,-25,-17,-18,-26,-27,-28,-29,-30,-25,33,-29,33,33,-10,-11,-12,-13,-14,-15,33,33,33,33,33,33,-16,33,33,]),'NE':([6,8,10,11,12,13,14,15,16,19,20,21,35,38,41,42,43,44,45,46,47,48,49,50,51,52,53,58,61,],[34,-25,-17,-18,-26,-27,-28,-29,-30,-25,34,-29,34,34,-10,-11,-12,-13,-14,-15,34,34,34,34,34,34,-16,34,34,]),'RPAREN':([8,10,11,12,13,14,16,21,35,41,42,43,44,45,46,47,48,49,50,51,52,53,61,],[-25,-17,-18,-26,-27,-28,-30,-29,53,-10,-11,-12,-13,-14,-15,-19,-20,-21,-22,-23,-24,-16,-4,]),'THEN':([8,10,11,12,13,14,16,19,21,41,42,43,44,45,46,47,48,49,50,51,52,53,61,],[-25,-17,-18,-26,-27,-28,-30,40,-29,-10,-11,-12,-13,-14,-15,-19,-20,-21,-22,-23,-24,-16,-4,]),'EXPECTING':([15,],[36,]),'DATATYPE':([17,57,],[37,59,]),'FROM':([37,],[55,]),'AND':([54,],[57,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,40,],[1,56,]),'var_assignment':([0,40,],[3,3,]),'expression':([2,4,9,18,23,24,25,26,27,28,29,30,31,32,33,34,55,60,],[6,20,35,38,20,42,43,44,45,46,47,48,49,50,51,52,58,61,]),'ask':([2,18,],[7,39,]),'comp_expr':([2,4,9,18,23,24,25,26,27,28,29,30,31,32,33,34,55,60,],[8,19,8,8,41,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'random_statement':([2,4,9,18,23,24,25,26,27,28,29,30,31,32,33,34,55,60,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> OUTPUT expression','statement',2,'p_statement_output','parser.py',15),
  ('statement -> OUTPUT ask','statement',2,'p_statement_output','parser.py',16),
  ('ask -> TEXT EXPECTING INPUT AND DATATYPE','ask',5,'p_ask_statement','parser.py',23),
  ('random_statement -> RANDOM DATATYPE FROM expression TO expression','random_statement',6,'p_random_statement','parser.py',30),
  ('var_assignment -> SET IDENTIFIER','var_assignment',2,'p_statement_var_assignment','parser.py',37),
  ('statement -> var_assignment TO expression','statement',3,'p_statement_assignment','parser.py',44),
  ('statement -> var_assignment','statement',1,'p_statement_assignment','parser.py',45),
  ('statement -> var_assignment TO ask','statement',3,'p_statement_assignment','parser.py',46),
  ('statement -> IF comp_expr THEN statement','statement',4,'p_statement_if','parser.py',56),
  ('expression -> expression IF comp_expr','expression',3,'p_expr_if','parser.py',63),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',70),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',71),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',72),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',73),
  ('expression -> expression POWER expression','expression',3,'p_expression_binop','parser.py',74),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',80),
  ('expression -> YES','expression',1,'p_expression_boolean','parser.py',86),
  ('expression -> NO','expression',1,'p_expression_boolean','parser.py',87),
  ('comp_expr -> expression EQ expression','comp_expr',3,'p_comp_expr','parser.py',94),
  ('comp_expr -> expression GT expression','comp_expr',3,'p_comp_expr','parser.py',95),
  ('comp_expr -> expression LT expression','comp_expr',3,'p_comp_expr','parser.py',96),
  ('comp_expr -> expression GE expression','comp_expr',3,'p_comp_expr','parser.py',97),
  ('comp_expr -> expression LE expression','comp_expr',3,'p_comp_expr','parser.py',98),
  ('comp_expr -> expression NE expression','comp_expr',3,'p_comp_expr','parser.py',99),
  ('expression -> comp_expr','expression',1,'p_expression_comp_expr','parser.py',106),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',112),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','parser.py',117),
  ('expression -> random_statement','expression',1,'p_expression_random','parser.py',122),
  ('expression -> TEXT','expression',1,'p_expression_text','parser.py',127),
  ('expression -> INPUT','expression',1,'p_expression_input','parser.py',132),
]
