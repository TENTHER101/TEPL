Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ELSEIF

Grammar

Rule 0     S' -> statements
Rule 1     statements -> statement
Rule 2     statements -> statements statement
Rule 3     end_statement -> END IF
Rule 4     statement -> OUTPUT expression
Rule 5     statement -> OUTPUT ask
Rule 6     ask -> TEXT EXPECTING INPUT AND DATATYPE
Rule 7     random_statement -> RANDOM DATATYPE FROM expression TO expression
Rule 8     var_assignment -> SET IDENTIFIER
Rule 9     statement -> var_assignment TO expression
Rule 10    statement -> var_assignment
Rule 11    statement -> var_assignment TO ask
Rule 12    if_then -> IF expression THEN statements
Rule 13    statement -> if_then end_statement
Rule 14    statement -> if_then ELSE THEN statement end_statement
Rule 15    expression -> expression PLUS expression
Rule 16    expression -> expression MINUS expression
Rule 17    expression -> expression TIMES expression
Rule 18    expression -> expression DIVIDE expression
Rule 19    expression -> expression POWER expression
Rule 20    expression -> LPAREN expression RPAREN
Rule 21    expression -> YES
Rule 22    expression -> NO
Rule 23    comp_expr -> expression EQ expression
Rule 24    comp_expr -> expression GT expression
Rule 25    comp_expr -> expression LT expression
Rule 26    comp_expr -> expression GE expression
Rule 27    comp_expr -> expression LE expression
Rule 28    comp_expr -> expression NE expression
Rule 29    comp_expr -> comp_expr AND comp_expr
Rule 30    comp_expr -> comp_expr OR comp_expr
Rule 31    comp_expr -> NOT expression
Rule 32    comp_expr -> expression IN expression
Rule 33    expression -> comp_expr
Rule 34    expression -> NUMBER
Rule 35    expression -> IDENTIFIER
Rule 36    expression -> random_statement
Rule 37    expression -> TEXT
Rule 38    expression -> INPUT

Terminals, with rules where they appear

AND                  : 6 29
DATATYPE             : 6 7
DIVIDE               : 18
ELSE                 : 14
ELSEIF               : 
END                  : 3
EQ                   : 23
EXPECTING            : 6
FROM                 : 7
GE                   : 26
GT                   : 24
IDENTIFIER           : 8 35
IF                   : 3 12
IN                   : 32
INPUT                : 6 38
LE                   : 27
LPAREN               : 20
LT                   : 25
MINUS                : 16
NE                   : 28
NO                   : 22
NOT                  : 31
NUMBER               : 34
OR                   : 30
OUTPUT               : 4 5
PLUS                 : 15
POWER                : 19
RANDOM               : 7
RPAREN               : 20
SET                  : 8
TEXT                 : 6 37
THEN                 : 12 14
TIMES                : 17
TO                   : 7 9 11
YES                  : 21
error                : 

Nonterminals, with rules where they appear

ask                  : 5 11
comp_expr            : 29 29 30 30 33
end_statement        : 13 14
expression           : 4 7 7 9 12 15 15 16 16 17 17 18 18 19 19 20 23 23 24 24 25 25 26 26 27 27 28 28 31 32 32
if_then              : 13 14
random_statement     : 36
statement            : 1 2 14
statements           : 2 12 0
var_assignment       : 9 10 11

Parsing method: LALR

state 0

    (0) S' -> . statements
    (1) statements -> . statement
    (2) statements -> . statements statement
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (13) statement -> . if_then end_statement
    (14) statement -> . if_then ELSE THEN statement end_statement
    (8) var_assignment -> . SET IDENTIFIER
    (12) if_then -> . IF expression THEN statements

    OUTPUT          shift and go to state 3
    SET             shift and go to state 6
    IF              shift and go to state 7

    statements                     shift and go to state 1
    statement                      shift and go to state 2
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 1

    (0) S' -> statements .
    (2) statements -> statements . statement
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (13) statement -> . if_then end_statement
    (14) statement -> . if_then ELSE THEN statement end_statement
    (8) var_assignment -> . SET IDENTIFIER
    (12) if_then -> . IF expression THEN statements

    OUTPUT          shift and go to state 3
    SET             shift and go to state 6
    IF              shift and go to state 7

    statement                      shift and go to state 8
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 2

    (1) statements -> statement .

    OUTPUT          reduce using rule 1 (statements -> statement .)
    SET             reduce using rule 1 (statements -> statement .)
    IF              reduce using rule 1 (statements -> statement .)
    $end            reduce using rule 1 (statements -> statement .)
    ELSE            reduce using rule 1 (statements -> statement .)
    END             reduce using rule 1 (statements -> statement .)


state 3

    (4) statement -> OUTPUT . expression
    (5) statement -> OUTPUT . ask
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression POWER expression
    (20) expression -> . LPAREN expression RPAREN
    (21) expression -> . YES
    (22) expression -> . NO
    (33) expression -> . comp_expr
    (34) expression -> . NUMBER
    (35) expression -> . IDENTIFIER
    (36) expression -> . random_statement
    (37) expression -> . TEXT
    (38) expression -> . INPUT
    (6) ask -> . TEXT EXPECTING INPUT AND DATATYPE
    (23) comp_expr -> . expression EQ expression
    (24) comp_expr -> . expression GT expression
    (25) comp_expr -> . expression LT expression
    (26) comp_expr -> . expression GE expression
    (27) comp_expr -> . expression LE expression
    (28) comp_expr -> . expression NE expression
    (29) comp_expr -> . comp_expr AND comp_expr
    (30) comp_expr -> . comp_expr OR comp_expr
    (31) comp_expr -> . NOT expression
    (32) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 11
    YES             shift and go to state 12
    NO              shift and go to state 13
    NUMBER          shift and go to state 15
    IDENTIFIER      shift and go to state 16
    TEXT            shift and go to state 18
    INPUT           shift and go to state 19
    NOT             shift and go to state 20
    RANDOM          shift and go to state 21

    expression                     shift and go to state 9
    ask                            shift and go to state 10
    comp_expr                      shift and go to state 14
    random_statement               shift and go to state 17

state 4

    (9) statement -> var_assignment . TO expression
    (10) statement -> var_assignment .
    (11) statement -> var_assignment . TO ask

    TO              shift and go to state 22
    OUTPUT          reduce using rule 10 (statement -> var_assignment .)
    SET             reduce using rule 10 (statement -> var_assignment .)
    IF              reduce using rule 10 (statement -> var_assignment .)
    $end            reduce using rule 10 (statement -> var_assignment .)
    END             reduce using rule 10 (statement -> var_assignment .)
    ELSE            reduce using rule 10 (statement -> var_assignment .)


state 5

    (13) statement -> if_then . end_statement
    (14) statement -> if_then . ELSE THEN statement end_statement
    (3) end_statement -> . END IF

    ELSE            shift and go to state 24
    END             shift and go to state 25

    end_statement                  shift and go to state 23

state 6

    (8) var_assignment -> SET . IDENTIFIER

    IDENTIFIER      shift and go to state 26


state 7

    (12) if_then -> IF . expression THEN statements
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression POWER expression
    (20) expression -> . LPAREN expression RPAREN
    (21) expression -> . YES
    (22) expression -> . NO
    (33) expression -> . comp_expr
    (34) expression -> . NUMBER
    (35) expression -> . IDENTIFIER
    (36) expression -> . random_statement
    (37) expression -> . TEXT
    (38) expression -> . INPUT
    (23) comp_expr -> . expression EQ expression
    (24) comp_expr -> . expression GT expression
    (25) comp_expr -> . expression LT expression
    (26) comp_expr -> . expression GE expression
    (27) comp_expr -> . expression LE expression
    (28) comp_expr -> . expression NE expression
    (29) comp_expr -> . comp_expr AND comp_expr
    (30) comp_expr -> . comp_expr OR comp_expr
    (31) comp_expr -> . NOT expression
    (32) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 11
    YES             shift and go to state 12
    NO              shift and go to state 13
    NUMBER          shift and go to state 15
    IDENTIFIER      shift and go to state 16
    TEXT            shift and go to state 28
    INPUT           shift and go to state 19
    NOT             shift and go to state 20
    RANDOM          shift and go to state 21

    expression                     shift and go to state 27
    comp_expr                      shift and go to state 14
    random_statement               shift and go to state 17

state 8

    (2) statements -> statements statement .

    OUTPUT          reduce using rule 2 (statements -> statements statement .)
    SET             reduce using rule 2 (statements -> statements statement .)
    IF              reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)
    ELSE            reduce using rule 2 (statements -> statements statement .)
    END             reduce using rule 2 (statements -> statements statement .)


state 9

    (4) statement -> OUTPUT expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . POWER expression
    (23) comp_expr -> expression . EQ expression
    (24) comp_expr -> expression . GT expression
    (25) comp_expr -> expression . LT expression
    (26) comp_expr -> expression . GE expression
    (27) comp_expr -> expression . LE expression
    (28) comp_expr -> expression . NE expression
    (32) comp_expr -> expression . IN expression

    OUTPUT          reduce using rule 4 (statement -> OUTPUT expression .)
    SET             reduce using rule 4 (statement -> OUTPUT expression .)
    IF              reduce using rule 4 (statement -> OUTPUT expression .)
    $end            reduce using rule 4 (statement -> OUTPUT expression .)
    END             reduce using rule 4 (statement -> OUTPUT expression .)
    ELSE            reduce using rule 4 (statement -> OUTPUT expression .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32
    POWER           shift and go to state 33
    EQ              shift and go to state 34
    GT              shift and go to state 35
    LT              shift and go to state 36
    GE              shift and go to state 37
    LE              shift and go to state 38
    NE              shift and go to state 39
    IN              shift and go to state 40


state 10

    (5) statement -> OUTPUT ask .

    OUTPUT          reduce using rule 5 (statement -> OUTPUT ask .)
    SET             reduce using rule 5 (statement -> OUTPUT ask .)
    IF              reduce using rule 5 (statement -> OUTPUT ask .)
    $end            reduce using rule 5 (statement -> OUTPUT ask .)
    END             reduce using rule 5 (statement -> OUTPUT ask .)
    ELSE            reduce using rule 5 (statement -> OUTPUT ask .)


state 11

    (20) expression -> LPAREN . expression RPAREN
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression POWER expression
    (20) expression -> . LPAREN expression RPAREN
    (21) expression -> . YES
    (22) expression -> . NO
    (33) expression -> . comp_expr
    (34) expression -> . NUMBER
    (35) expression -> . IDENTIFIER
    (36) expression -> . random_statement
    (37) expression -> . TEXT
    (38) expression -> . INPUT
    (23) comp_expr -> . expression EQ expression
    (24) comp_expr -> . expression GT expression
    (25) comp_expr -> . expression LT expression
    (26) comp_expr -> . expression GE expression
    (27) comp_expr -> . expression LE expression
    (28) comp_expr -> . expression NE expression
    (29) comp_expr -> . comp_expr AND comp_expr
    (30) comp_expr -> . comp_expr OR comp_expr
    (31) comp_expr -> . NOT expression
    (32) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 11
    YES             shift and go to state 12
    NO              shift and go to state 13
    NUMBER          shift and go to state 15
    IDENTIFIER      shift and go to state 16
    TEXT            shift and go to state 28
    INPUT           shift and go to state 19
    NOT             shift and go to state 20
    RANDOM          shift and go to state 21

    expression                     shift and go to state 41
    comp_expr                      shift and go to state 14
    random_statement               shift and go to state 17

state 12

    (21) expression -> YES .

    PLUS            reduce using rule 21 (expression -> YES .)
    MINUS           reduce using rule 21 (expression -> YES .)
    TIMES           reduce using rule 21 (expression -> YES .)
    DIVIDE          reduce using rule 21 (expression -> YES .)
    POWER           reduce using rule 21 (expression -> YES .)
    EQ              reduce using rule 21 (expression -> YES .)
    GT              reduce using rule 21 (expression -> YES .)
    LT              reduce using rule 21 (expression -> YES .)
    GE              reduce using rule 21 (expression -> YES .)
    LE              reduce using rule 21 (expression -> YES .)
    NE              reduce using rule 21 (expression -> YES .)
    IN              reduce using rule 21 (expression -> YES .)
    OUTPUT          reduce using rule 21 (expression -> YES .)
    SET             reduce using rule 21 (expression -> YES .)
    IF              reduce using rule 21 (expression -> YES .)
    $end            reduce using rule 21 (expression -> YES .)
    END             reduce using rule 21 (expression -> YES .)
    ELSE            reduce using rule 21 (expression -> YES .)
    THEN            reduce using rule 21 (expression -> YES .)
    RPAREN          reduce using rule 21 (expression -> YES .)
    AND             reduce using rule 21 (expression -> YES .)
    OR              reduce using rule 21 (expression -> YES .)
    TO              reduce using rule 21 (expression -> YES .)


state 13

    (22) expression -> NO .

    PLUS            reduce using rule 22 (expression -> NO .)
    MINUS           reduce using rule 22 (expression -> NO .)
    TIMES           reduce using rule 22 (expression -> NO .)
    DIVIDE          reduce using rule 22 (expression -> NO .)
    POWER           reduce using rule 22 (expression -> NO .)
    EQ              reduce using rule 22 (expression -> NO .)
    GT              reduce using rule 22 (expression -> NO .)
    LT              reduce using rule 22 (expression -> NO .)
    GE              reduce using rule 22 (expression -> NO .)
    LE              reduce using rule 22 (expression -> NO .)
    NE              reduce using rule 22 (expression -> NO .)
    IN              reduce using rule 22 (expression -> NO .)
    OUTPUT          reduce using rule 22 (expression -> NO .)
    SET             reduce using rule 22 (expression -> NO .)
    IF              reduce using rule 22 (expression -> NO .)
    $end            reduce using rule 22 (expression -> NO .)
    END             reduce using rule 22 (expression -> NO .)
    ELSE            reduce using rule 22 (expression -> NO .)
    THEN            reduce using rule 22 (expression -> NO .)
    RPAREN          reduce using rule 22 (expression -> NO .)
    AND             reduce using rule 22 (expression -> NO .)
    OR              reduce using rule 22 (expression -> NO .)
    TO              reduce using rule 22 (expression -> NO .)


state 14

    (33) expression -> comp_expr .
    (29) comp_expr -> comp_expr . AND comp_expr
    (30) comp_expr -> comp_expr . OR comp_expr

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    PLUS            reduce using rule 33 (expression -> comp_expr .)
    MINUS           reduce using rule 33 (expression -> comp_expr .)
    TIMES           reduce using rule 33 (expression -> comp_expr .)
    DIVIDE          reduce using rule 33 (expression -> comp_expr .)
    POWER           reduce using rule 33 (expression -> comp_expr .)
    EQ              reduce using rule 33 (expression -> comp_expr .)
    GT              reduce using rule 33 (expression -> comp_expr .)
    LT              reduce using rule 33 (expression -> comp_expr .)
    GE              reduce using rule 33 (expression -> comp_expr .)
    LE              reduce using rule 33 (expression -> comp_expr .)
    NE              reduce using rule 33 (expression -> comp_expr .)
    IN              reduce using rule 33 (expression -> comp_expr .)
    OUTPUT          reduce using rule 33 (expression -> comp_expr .)
    SET             reduce using rule 33 (expression -> comp_expr .)
    IF              reduce using rule 33 (expression -> comp_expr .)
    $end            reduce using rule 33 (expression -> comp_expr .)
    END             reduce using rule 33 (expression -> comp_expr .)
    ELSE            reduce using rule 33 (expression -> comp_expr .)
    THEN            reduce using rule 33 (expression -> comp_expr .)
    RPAREN          reduce using rule 33 (expression -> comp_expr .)
    TO              reduce using rule 33 (expression -> comp_expr .)
    AND             shift and go to state 42
    OR              shift and go to state 43

  ! AND             [ reduce using rule 33 (expression -> comp_expr .) ]
  ! OR              [ reduce using rule 33 (expression -> comp_expr .) ]


state 15

    (34) expression -> NUMBER .

    PLUS            reduce using rule 34 (expression -> NUMBER .)
    MINUS           reduce using rule 34 (expression -> NUMBER .)
    TIMES           reduce using rule 34 (expression -> NUMBER .)
    DIVIDE          reduce using rule 34 (expression -> NUMBER .)
    POWER           reduce using rule 34 (expression -> NUMBER .)
    EQ              reduce using rule 34 (expression -> NUMBER .)
    GT              reduce using rule 34 (expression -> NUMBER .)
    LT              reduce using rule 34 (expression -> NUMBER .)
    GE              reduce using rule 34 (expression -> NUMBER .)
    LE              reduce using rule 34 (expression -> NUMBER .)
    NE              reduce using rule 34 (expression -> NUMBER .)
    IN              reduce using rule 34 (expression -> NUMBER .)
    OUTPUT          reduce using rule 34 (expression -> NUMBER .)
    SET             reduce using rule 34 (expression -> NUMBER .)
    IF              reduce using rule 34 (expression -> NUMBER .)
    $end            reduce using rule 34 (expression -> NUMBER .)
    END             reduce using rule 34 (expression -> NUMBER .)
    ELSE            reduce using rule 34 (expression -> NUMBER .)
    THEN            reduce using rule 34 (expression -> NUMBER .)
    RPAREN          reduce using rule 34 (expression -> NUMBER .)
    AND             reduce using rule 34 (expression -> NUMBER .)
    OR              reduce using rule 34 (expression -> NUMBER .)
    TO              reduce using rule 34 (expression -> NUMBER .)


state 16

    (35) expression -> IDENTIFIER .

    PLUS            reduce using rule 35 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 35 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 35 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 35 (expression -> IDENTIFIER .)
    POWER           reduce using rule 35 (expression -> IDENTIFIER .)
    EQ              reduce using rule 35 (expression -> IDENTIFIER .)
    GT              reduce using rule 35 (expression -> IDENTIFIER .)
    LT              reduce using rule 35 (expression -> IDENTIFIER .)
    GE              reduce using rule 35 (expression -> IDENTIFIER .)
    LE              reduce using rule 35 (expression -> IDENTIFIER .)
    NE              reduce using rule 35 (expression -> IDENTIFIER .)
    IN              reduce using rule 35 (expression -> IDENTIFIER .)
    OUTPUT          reduce using rule 35 (expression -> IDENTIFIER .)
    SET             reduce using rule 35 (expression -> IDENTIFIER .)
    IF              reduce using rule 35 (expression -> IDENTIFIER .)
    $end            reduce using rule 35 (expression -> IDENTIFIER .)
    END             reduce using rule 35 (expression -> IDENTIFIER .)
    ELSE            reduce using rule 35 (expression -> IDENTIFIER .)
    THEN            reduce using rule 35 (expression -> IDENTIFIER .)
    RPAREN          reduce using rule 35 (expression -> IDENTIFIER .)
    AND             reduce using rule 35 (expression -> IDENTIFIER .)
    OR              reduce using rule 35 (expression -> IDENTIFIER .)
    TO              reduce using rule 35 (expression -> IDENTIFIER .)


state 17

    (36) expression -> random_statement .

    PLUS            reduce using rule 36 (expression -> random_statement .)
    MINUS           reduce using rule 36 (expression -> random_statement .)
    TIMES           reduce using rule 36 (expression -> random_statement .)
    DIVIDE          reduce using rule 36 (expression -> random_statement .)
    POWER           reduce using rule 36 (expression -> random_statement .)
    EQ              reduce using rule 36 (expression -> random_statement .)
    GT              reduce using rule 36 (expression -> random_statement .)
    LT              reduce using rule 36 (expression -> random_statement .)
    GE              reduce using rule 36 (expression -> random_statement .)
    LE              reduce using rule 36 (expression -> random_statement .)
    NE              reduce using rule 36 (expression -> random_statement .)
    IN              reduce using rule 36 (expression -> random_statement .)
    OUTPUT          reduce using rule 36 (expression -> random_statement .)
    SET             reduce using rule 36 (expression -> random_statement .)
    IF              reduce using rule 36 (expression -> random_statement .)
    $end            reduce using rule 36 (expression -> random_statement .)
    END             reduce using rule 36 (expression -> random_statement .)
    ELSE            reduce using rule 36 (expression -> random_statement .)
    THEN            reduce using rule 36 (expression -> random_statement .)
    RPAREN          reduce using rule 36 (expression -> random_statement .)
    AND             reduce using rule 36 (expression -> random_statement .)
    OR              reduce using rule 36 (expression -> random_statement .)
    TO              reduce using rule 36 (expression -> random_statement .)


state 18

    (37) expression -> TEXT .
    (6) ask -> TEXT . EXPECTING INPUT AND DATATYPE

    PLUS            reduce using rule 37 (expression -> TEXT .)
    MINUS           reduce using rule 37 (expression -> TEXT .)
    TIMES           reduce using rule 37 (expression -> TEXT .)
    DIVIDE          reduce using rule 37 (expression -> TEXT .)
    POWER           reduce using rule 37 (expression -> TEXT .)
    EQ              reduce using rule 37 (expression -> TEXT .)
    GT              reduce using rule 37 (expression -> TEXT .)
    LT              reduce using rule 37 (expression -> TEXT .)
    GE              reduce using rule 37 (expression -> TEXT .)
    LE              reduce using rule 37 (expression -> TEXT .)
    NE              reduce using rule 37 (expression -> TEXT .)
    IN              reduce using rule 37 (expression -> TEXT .)
    OUTPUT          reduce using rule 37 (expression -> TEXT .)
    SET             reduce using rule 37 (expression -> TEXT .)
    IF              reduce using rule 37 (expression -> TEXT .)
    $end            reduce using rule 37 (expression -> TEXT .)
    END             reduce using rule 37 (expression -> TEXT .)
    ELSE            reduce using rule 37 (expression -> TEXT .)
    EXPECTING       shift and go to state 44


state 19

    (38) expression -> INPUT .

    PLUS            reduce using rule 38 (expression -> INPUT .)
    MINUS           reduce using rule 38 (expression -> INPUT .)
    TIMES           reduce using rule 38 (expression -> INPUT .)
    DIVIDE          reduce using rule 38 (expression -> INPUT .)
    POWER           reduce using rule 38 (expression -> INPUT .)
    EQ              reduce using rule 38 (expression -> INPUT .)
    GT              reduce using rule 38 (expression -> INPUT .)
    LT              reduce using rule 38 (expression -> INPUT .)
    GE              reduce using rule 38 (expression -> INPUT .)
    LE              reduce using rule 38 (expression -> INPUT .)
    NE              reduce using rule 38 (expression -> INPUT .)
    IN              reduce using rule 38 (expression -> INPUT .)
    OUTPUT          reduce using rule 38 (expression -> INPUT .)
    SET             reduce using rule 38 (expression -> INPUT .)
    IF              reduce using rule 38 (expression -> INPUT .)
    $end            reduce using rule 38 (expression -> INPUT .)
    END             reduce using rule 38 (expression -> INPUT .)
    ELSE            reduce using rule 38 (expression -> INPUT .)
    THEN            reduce using rule 38 (expression -> INPUT .)
    RPAREN          reduce using rule 38 (expression -> INPUT .)
    AND             reduce using rule 38 (expression -> INPUT .)
    OR              reduce using rule 38 (expression -> INPUT .)
    TO              reduce using rule 38 (expression -> INPUT .)


state 20

    (31) comp_expr -> NOT . expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression POWER expression
    (20) expression -> . LPAREN expression RPAREN
    (21) expression -> . YES
    (22) expression -> . NO
    (33) expression -> . comp_expr
    (34) expression -> . NUMBER
    (35) expression -> . IDENTIFIER
    (36) expression -> . random_statement
    (37) expression -> . TEXT
    (38) expression -> . INPUT
    (23) comp_expr -> . expression EQ expression
    (24) comp_expr -> . expression GT expression
    (25) comp_expr -> . expression LT expression
    (26) comp_expr -> . expression GE expression
    (27) comp_expr -> . expression LE expression
    (28) comp_expr -> . expression NE expression
    (29) comp_expr -> . comp_expr AND comp_expr
    (30) comp_expr -> . comp_expr OR comp_expr
    (31) comp_expr -> . NOT expression
    (32) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 11
    YES             shift and go to state 12
    NO              shift and go to state 13
    NUMBER          shift and go to state 15
    IDENTIFIER      shift and go to state 16
    TEXT            shift and go to state 28
    INPUT           shift and go to state 19
    NOT             shift and go to state 20
    RANDOM          shift and go to state 21

    expression                     shift and go to state 45
    comp_expr                      shift and go to state 14
    random_statement               shift and go to state 17

state 21

    (7) random_statement -> RANDOM . DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 46


state 22

    (9) statement -> var_assignment TO . expression
    (11) statement -> var_assignment TO . ask
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression POWER expression
    (20) expression -> . LPAREN expression RPAREN
    (21) expression -> . YES
    (22) expression -> . NO
    (33) expression -> . comp_expr
    (34) expression -> . NUMBER
    (35) expression -> . IDENTIFIER
    (36) expression -> . random_statement
    (37) expression -> . TEXT
    (38) expression -> . INPUT
    (6) ask -> . TEXT EXPECTING INPUT AND DATATYPE
    (23) comp_expr -> . expression EQ expression
    (24) comp_expr -> . expression GT expression
    (25) comp_expr -> . expression LT expression
    (26) comp_expr -> . expression GE expression
    (27) comp_expr -> . expression LE expression
    (28) comp_expr -> . expression NE expression
    (29) comp_expr -> . comp_expr AND comp_expr
    (30) comp_expr -> . comp_expr OR comp_expr
    (31) comp_expr -> . NOT expression
    (32) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 11
    YES             shift and go to state 12
    NO              shift and go to state 13
    NUMBER          shift and go to state 15
    IDENTIFIER      shift and go to state 16
    TEXT            shift and go to state 18
    INPUT           shift and go to state 19
    NOT             shift and go to state 20
    RANDOM          shift and go to state 21

    expression                     shift and go to state 47
    ask                            shift and go to state 48
    comp_expr                      shift and go to state 14
    random_statement               shift and go to state 17

state 23

    (13) statement -> if_then end_statement .

    OUTPUT          reduce using rule 13 (statement -> if_then end_statement .)
    SET             reduce using rule 13 (statement -> if_then end_statement .)
    IF              reduce using rule 13 (statement -> if_then end_statement .)
    $end            reduce using rule 13 (statement -> if_then end_statement .)
    END             reduce using rule 13 (statement -> if_then end_statement .)
    ELSE            reduce using rule 13 (statement -> if_then end_statement .)


state 24

    (14) statement -> if_then ELSE . THEN statement end_statement

    THEN            shift and go to state 49


state 25

    (3) end_statement -> END . IF

    IF              shift and go to state 50


state 26

    (8) var_assignment -> SET IDENTIFIER .

    TO              reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    OUTPUT          reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    SET             reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    IF              reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    $end            reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    END             reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    ELSE            reduce using rule 8 (var_assignment -> SET IDENTIFIER .)


state 27

    (12) if_then -> IF expression . THEN statements
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . POWER expression
    (23) comp_expr -> expression . EQ expression
    (24) comp_expr -> expression . GT expression
    (25) comp_expr -> expression . LT expression
    (26) comp_expr -> expression . GE expression
    (27) comp_expr -> expression . LE expression
    (28) comp_expr -> expression . NE expression
    (32) comp_expr -> expression . IN expression

    THEN            shift and go to state 51
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32
    POWER           shift and go to state 33
    EQ              shift and go to state 34
    GT              shift and go to state 35
    LT              shift and go to state 36
    GE              shift and go to state 37
    LE              shift and go to state 38
    NE              shift and go to state 39
    IN              shift and go to state 40


state 28

    (37) expression -> TEXT .

    THEN            reduce using rule 37 (expression -> TEXT .)
    PLUS            reduce using rule 37 (expression -> TEXT .)
    MINUS           reduce using rule 37 (expression -> TEXT .)
    TIMES           reduce using rule 37 (expression -> TEXT .)
    DIVIDE          reduce using rule 37 (expression -> TEXT .)
    POWER           reduce using rule 37 (expression -> TEXT .)
    EQ              reduce using rule 37 (expression -> TEXT .)
    GT              reduce using rule 37 (expression -> TEXT .)
    LT              reduce using rule 37 (expression -> TEXT .)
    GE              reduce using rule 37 (expression -> TEXT .)
    LE              reduce using rule 37 (expression -> TEXT .)
    NE              reduce using rule 37 (expression -> TEXT .)
    IN              reduce using rule 37 (expression -> TEXT .)
    RPAREN          reduce using rule 37 (expression -> TEXT .)
    AND             reduce using rule 37 (expression -> TEXT .)
    OR              reduce using rule 37 (expression -> TEXT .)
    OUTPUT          reduce using rule 37 (expression -> TEXT .)
    SET             reduce using rule 37 (expression -> TEXT .)
    IF              reduce using rule 37 (expression -> TEXT .)
    $end            reduce using rule 37 (expression -> TEXT .)
    END             reduce using rule 37 (expression -> TEXT .)
    ELSE            reduce using rule 37 (expression -> TEXT .)
    TO              reduce using rule 37 (expression -> TEXT .)


state 29

    (15) expression -> expression PLUS . expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression POWER expression
    (20) expression -> . LPAREN expression RPAREN
    (21) expression -> . YES
    (22) expression -> . NO
    (33) expression -> . comp_expr
    (34) expression -> . NUMBER
    (35) expression -> . IDENTIFIER
    (36) expression -> . random_statement
    (37) expression -> . TEXT
    (38) expression -> . INPUT
    (23) comp_expr -> . expression EQ expression
    (24) comp_expr -> . expression GT expression
    (25) comp_expr -> . expression LT expression
    (26) comp_expr -> . expression GE expression
    (27) comp_expr -> . expression LE expression
    (28) comp_expr -> . expression NE expression
    (29) comp_expr -> . comp_expr AND comp_expr
    (30) comp_expr -> . comp_expr OR comp_expr
    (31) comp_expr -> . NOT expression
    (32) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 11
    YES             shift and go to state 12
    NO              shift and go to state 13
    NUMBER          shift and go to state 15
    IDENTIFIER      shift and go to state 16
    TEXT            shift and go to state 28
    INPUT           shift and go to state 19
    NOT             shift and go to state 20
    RANDOM          shift and go to state 21

    expression                     shift and go to state 52
    comp_expr                      shift and go to state 14
    random_statement               shift and go to state 17

state 30

    (16) expression -> expression MINUS . expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression POWER expression
    (20) expression -> . LPAREN expression RPAREN
    (21) expression -> . YES
    (22) expression -> . NO
    (33) expression -> . comp_expr
    (34) expression -> . NUMBER
    (35) expression -> . IDENTIFIER
    (36) expression -> . random_statement
    (37) expression -> . TEXT
    (38) expression -> . INPUT
    (23) comp_expr -> . expression EQ expression
    (24) comp_expr -> . expression GT expression
    (25) comp_expr -> . expression LT expression
    (26) comp_expr -> . expression GE expression
    (27) comp_expr -> . expression LE expression
    (28) comp_expr -> . expression NE expression
    (29) comp_expr -> . comp_expr AND comp_expr
    (30) comp_expr -> . comp_expr OR comp_expr
    (31) comp_expr -> . NOT expression
    (32) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 11
    YES             shift and go to state 12
    NO              shift and go to state 13
    NUMBER          shift and go to state 15
    IDENTIFIER      shift and go to state 16
    TEXT            shift and go to state 28
    INPUT           shift and go to state 19
    NOT             shift and go to state 20
    RANDOM          shift and go to state 21

    expression                     shift and go to state 53
    comp_expr                      shift and go to state 14
    random_statement               shift and go to state 17

state 31

    (17) expression -> expression TIMES . expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression POWER expression
    (20) expression -> . LPAREN expression RPAREN
    (21) expression -> . YES
    (22) expression -> . NO
    (33) expression -> . comp_expr
    (34) expression -> . NUMBER
    (35) expression -> . IDENTIFIER
    (36) expression -> . random_statement
    (37) expression -> . TEXT
    (38) expression -> . INPUT
    (23) comp_expr -> . expression EQ expression
    (24) comp_expr -> . expression GT expression
    (25) comp_expr -> . expression LT expression
    (26) comp_expr -> . expression GE expression
    (27) comp_expr -> . expression LE expression
    (28) comp_expr -> . expression NE expression
    (29) comp_expr -> . comp_expr AND comp_expr
    (30) comp_expr -> . comp_expr OR comp_expr
    (31) comp_expr -> . NOT expression
    (32) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 11
    YES             shift and go to state 12
    NO              shift and go to state 13
    NUMBER          shift and go to state 15
    IDENTIFIER      shift and go to state 16
    TEXT            shift and go to state 28
    INPUT           shift and go to state 19
    NOT             shift and go to state 20
    RANDOM          shift and go to state 21

    expression                     shift and go to state 54
    comp_expr                      shift and go to state 14
    random_statement               shift and go to state 17

state 32

    (18) expression -> expression DIVIDE . expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression POWER expression
    (20) expression -> . LPAREN expression RPAREN
    (21) expression -> . YES
    (22) expression -> . NO
    (33) expression -> . comp_expr
    (34) expression -> . NUMBER
    (35) expression -> . IDENTIFIER
    (36) expression -> . random_statement
    (37) expression -> . TEXT
    (38) expression -> . INPUT
    (23) comp_expr -> . expression EQ expression
    (24) comp_expr -> . expression GT expression
    (25) comp_expr -> . expression LT expression
    (26) comp_expr -> . expression GE expression
    (27) comp_expr -> . expression LE expression
    (28) comp_expr -> . expression NE expression
    (29) comp_expr -> . comp_expr AND comp_expr
    (30) comp_expr -> . comp_expr OR comp_expr
    (31) comp_expr -> . NOT expression
    (32) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 11
    YES             shift and go to state 12
    NO              shift and go to state 13
    NUMBER          shift and go to state 15
    IDENTIFIER      shift and go to state 16
    TEXT            shift and go to state 28
    INPUT           shift and go to state 19
    NOT             shift and go to state 20
    RANDOM          shift and go to state 21

    expression                     shift and go to state 55
    comp_expr                      shift and go to state 14
    random_statement               shift and go to state 17

state 33

    (19) expression -> expression POWER . expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression POWER expression
    (20) expression -> . LPAREN expression RPAREN
    (21) expression -> . YES
    (22) expression -> . NO
    (33) expression -> . comp_expr
    (34) expression -> . NUMBER
    (35) expression -> . IDENTIFIER
    (36) expression -> . random_statement
    (37) expression -> . TEXT
    (38) expression -> . INPUT
    (23) comp_expr -> . expression EQ expression
    (24) comp_expr -> . expression GT expression
    (25) comp_expr -> . expression LT expression
    (26) comp_expr -> . expression GE expression
    (27) comp_expr -> . expression LE expression
    (28) comp_expr -> . expression NE expression
    (29) comp_expr -> . comp_expr AND comp_expr
    (30) comp_expr -> . comp_expr OR comp_expr
    (31) comp_expr -> . NOT expression
    (32) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 11
    YES             shift and go to state 12
    NO              shift and go to state 13
    NUMBER          shift and go to state 15
    IDENTIFIER      shift and go to state 16
    TEXT            shift and go to state 28
    INPUT           shift and go to state 19
    NOT             shift and go to state 20
    RANDOM          shift and go to state 21

    expression                     shift and go to state 56
    comp_expr                      shift and go to state 14
    random_statement               shift and go to state 17

state 34

    (23) comp_expr -> expression EQ . expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression POWER expression
    (20) expression -> . LPAREN expression RPAREN
    (21) expression -> . YES
    (22) expression -> . NO
    (33) expression -> . comp_expr
    (34) expression -> . NUMBER
    (35) expression -> . IDENTIFIER
    (36) expression -> . random_statement
    (37) expression -> . TEXT
    (38) expression -> . INPUT
    (23) comp_expr -> . expression EQ expression
    (24) comp_expr -> . expression GT expression
    (25) comp_expr -> . expression LT expression
    (26) comp_expr -> . expression GE expression
    (27) comp_expr -> . expression LE expression
    (28) comp_expr -> . expression NE expression
    (29) comp_expr -> . comp_expr AND comp_expr
    (30) comp_expr -> . comp_expr OR comp_expr
    (31) comp_expr -> . NOT expression
    (32) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 11
    YES             shift and go to state 12
    NO              shift and go to state 13
    NUMBER          shift and go to state 15
    IDENTIFIER      shift and go to state 16
    TEXT            shift and go to state 28
    INPUT           shift and go to state 19
    NOT             shift and go to state 20
    RANDOM          shift and go to state 21

    expression                     shift and go to state 57
    comp_expr                      shift and go to state 14
    random_statement               shift and go to state 17

state 35

    (24) comp_expr -> expression GT . expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression POWER expression
    (20) expression -> . LPAREN expression RPAREN
    (21) expression -> . YES
    (22) expression -> . NO
    (33) expression -> . comp_expr
    (34) expression -> . NUMBER
    (35) expression -> . IDENTIFIER
    (36) expression -> . random_statement
    (37) expression -> . TEXT
    (38) expression -> . INPUT
    (23) comp_expr -> . expression EQ expression
    (24) comp_expr -> . expression GT expression
    (25) comp_expr -> . expression LT expression
    (26) comp_expr -> . expression GE expression
    (27) comp_expr -> . expression LE expression
    (28) comp_expr -> . expression NE expression
    (29) comp_expr -> . comp_expr AND comp_expr
    (30) comp_expr -> . comp_expr OR comp_expr
    (31) comp_expr -> . NOT expression
    (32) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 11
    YES             shift and go to state 12
    NO              shift and go to state 13
    NUMBER          shift and go to state 15
    IDENTIFIER      shift and go to state 16
    TEXT            shift and go to state 28
    INPUT           shift and go to state 19
    NOT             shift and go to state 20
    RANDOM          shift and go to state 21

    expression                     shift and go to state 58
    comp_expr                      shift and go to state 14
    random_statement               shift and go to state 17

state 36

    (25) comp_expr -> expression LT . expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression POWER expression
    (20) expression -> . LPAREN expression RPAREN
    (21) expression -> . YES
    (22) expression -> . NO
    (33) expression -> . comp_expr
    (34) expression -> . NUMBER
    (35) expression -> . IDENTIFIER
    (36) expression -> . random_statement
    (37) expression -> . TEXT
    (38) expression -> . INPUT
    (23) comp_expr -> . expression EQ expression
    (24) comp_expr -> . expression GT expression
    (25) comp_expr -> . expression LT expression
    (26) comp_expr -> . expression GE expression
    (27) comp_expr -> . expression LE expression
    (28) comp_expr -> . expression NE expression
    (29) comp_expr -> . comp_expr AND comp_expr
    (30) comp_expr -> . comp_expr OR comp_expr
    (31) comp_expr -> . NOT expression
    (32) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 11
    YES             shift and go to state 12
    NO              shift and go to state 13
    NUMBER          shift and go to state 15
    IDENTIFIER      shift and go to state 16
    TEXT            shift and go to state 28
    INPUT           shift and go to state 19
    NOT             shift and go to state 20
    RANDOM          shift and go to state 21

    expression                     shift and go to state 59
    comp_expr                      shift and go to state 14
    random_statement               shift and go to state 17

state 37

    (26) comp_expr -> expression GE . expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression POWER expression
    (20) expression -> . LPAREN expression RPAREN
    (21) expression -> . YES
    (22) expression -> . NO
    (33) expression -> . comp_expr
    (34) expression -> . NUMBER
    (35) expression -> . IDENTIFIER
    (36) expression -> . random_statement
    (37) expression -> . TEXT
    (38) expression -> . INPUT
    (23) comp_expr -> . expression EQ expression
    (24) comp_expr -> . expression GT expression
    (25) comp_expr -> . expression LT expression
    (26) comp_expr -> . expression GE expression
    (27) comp_expr -> . expression LE expression
    (28) comp_expr -> . expression NE expression
    (29) comp_expr -> . comp_expr AND comp_expr
    (30) comp_expr -> . comp_expr OR comp_expr
    (31) comp_expr -> . NOT expression
    (32) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 11
    YES             shift and go to state 12
    NO              shift and go to state 13
    NUMBER          shift and go to state 15
    IDENTIFIER      shift and go to state 16
    TEXT            shift and go to state 28
    INPUT           shift and go to state 19
    NOT             shift and go to state 20
    RANDOM          shift and go to state 21

    expression                     shift and go to state 60
    comp_expr                      shift and go to state 14
    random_statement               shift and go to state 17

state 38

    (27) comp_expr -> expression LE . expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression POWER expression
    (20) expression -> . LPAREN expression RPAREN
    (21) expression -> . YES
    (22) expression -> . NO
    (33) expression -> . comp_expr
    (34) expression -> . NUMBER
    (35) expression -> . IDENTIFIER
    (36) expression -> . random_statement
    (37) expression -> . TEXT
    (38) expression -> . INPUT
    (23) comp_expr -> . expression EQ expression
    (24) comp_expr -> . expression GT expression
    (25) comp_expr -> . expression LT expression
    (26) comp_expr -> . expression GE expression
    (27) comp_expr -> . expression LE expression
    (28) comp_expr -> . expression NE expression
    (29) comp_expr -> . comp_expr AND comp_expr
    (30) comp_expr -> . comp_expr OR comp_expr
    (31) comp_expr -> . NOT expression
    (32) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 11
    YES             shift and go to state 12
    NO              shift and go to state 13
    NUMBER          shift and go to state 15
    IDENTIFIER      shift and go to state 16
    TEXT            shift and go to state 28
    INPUT           shift and go to state 19
    NOT             shift and go to state 20
    RANDOM          shift and go to state 21

    expression                     shift and go to state 61
    comp_expr                      shift and go to state 14
    random_statement               shift and go to state 17

state 39

    (28) comp_expr -> expression NE . expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression POWER expression
    (20) expression -> . LPAREN expression RPAREN
    (21) expression -> . YES
    (22) expression -> . NO
    (33) expression -> . comp_expr
    (34) expression -> . NUMBER
    (35) expression -> . IDENTIFIER
    (36) expression -> . random_statement
    (37) expression -> . TEXT
    (38) expression -> . INPUT
    (23) comp_expr -> . expression EQ expression
    (24) comp_expr -> . expression GT expression
    (25) comp_expr -> . expression LT expression
    (26) comp_expr -> . expression GE expression
    (27) comp_expr -> . expression LE expression
    (28) comp_expr -> . expression NE expression
    (29) comp_expr -> . comp_expr AND comp_expr
    (30) comp_expr -> . comp_expr OR comp_expr
    (31) comp_expr -> . NOT expression
    (32) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 11
    YES             shift and go to state 12
    NO              shift and go to state 13
    NUMBER          shift and go to state 15
    IDENTIFIER      shift and go to state 16
    TEXT            shift and go to state 28
    INPUT           shift and go to state 19
    NOT             shift and go to state 20
    RANDOM          shift and go to state 21

    expression                     shift and go to state 62
    comp_expr                      shift and go to state 14
    random_statement               shift and go to state 17

state 40

    (32) comp_expr -> expression IN . expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression POWER expression
    (20) expression -> . LPAREN expression RPAREN
    (21) expression -> . YES
    (22) expression -> . NO
    (33) expression -> . comp_expr
    (34) expression -> . NUMBER
    (35) expression -> . IDENTIFIER
    (36) expression -> . random_statement
    (37) expression -> . TEXT
    (38) expression -> . INPUT
    (23) comp_expr -> . expression EQ expression
    (24) comp_expr -> . expression GT expression
    (25) comp_expr -> . expression LT expression
    (26) comp_expr -> . expression GE expression
    (27) comp_expr -> . expression LE expression
    (28) comp_expr -> . expression NE expression
    (29) comp_expr -> . comp_expr AND comp_expr
    (30) comp_expr -> . comp_expr OR comp_expr
    (31) comp_expr -> . NOT expression
    (32) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 11
    YES             shift and go to state 12
    NO              shift and go to state 13
    NUMBER          shift and go to state 15
    IDENTIFIER      shift and go to state 16
    TEXT            shift and go to state 28
    INPUT           shift and go to state 19
    NOT             shift and go to state 20
    RANDOM          shift and go to state 21

    expression                     shift and go to state 63
    comp_expr                      shift and go to state 14
    random_statement               shift and go to state 17

state 41

    (20) expression -> LPAREN expression . RPAREN
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . POWER expression
    (23) comp_expr -> expression . EQ expression
    (24) comp_expr -> expression . GT expression
    (25) comp_expr -> expression . LT expression
    (26) comp_expr -> expression . GE expression
    (27) comp_expr -> expression . LE expression
    (28) comp_expr -> expression . NE expression
    (32) comp_expr -> expression . IN expression

    RPAREN          shift and go to state 64
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32
    POWER           shift and go to state 33
    EQ              shift and go to state 34
    GT              shift and go to state 35
    LT              shift and go to state 36
    GE              shift and go to state 37
    LE              shift and go to state 38
    NE              shift and go to state 39
    IN              shift and go to state 40


state 42

    (29) comp_expr -> comp_expr AND . comp_expr
    (23) comp_expr -> . expression EQ expression
    (24) comp_expr -> . expression GT expression
    (25) comp_expr -> . expression LT expression
    (26) comp_expr -> . expression GE expression
    (27) comp_expr -> . expression LE expression
    (28) comp_expr -> . expression NE expression
    (29) comp_expr -> . comp_expr AND comp_expr
    (30) comp_expr -> . comp_expr OR comp_expr
    (31) comp_expr -> . NOT expression
    (32) comp_expr -> . expression IN expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression POWER expression
    (20) expression -> . LPAREN expression RPAREN
    (21) expression -> . YES
    (22) expression -> . NO
    (33) expression -> . comp_expr
    (34) expression -> . NUMBER
    (35) expression -> . IDENTIFIER
    (36) expression -> . random_statement
    (37) expression -> . TEXT
    (38) expression -> . INPUT
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    NOT             shift and go to state 20
    LPAREN          shift and go to state 11
    YES             shift and go to state 12
    NO              shift and go to state 13
    NUMBER          shift and go to state 15
    IDENTIFIER      shift and go to state 16
    TEXT            shift and go to state 28
    INPUT           shift and go to state 19
    RANDOM          shift and go to state 21

    comp_expr                      shift and go to state 65
    expression                     shift and go to state 66
    random_statement               shift and go to state 17

state 43

    (30) comp_expr -> comp_expr OR . comp_expr
    (23) comp_expr -> . expression EQ expression
    (24) comp_expr -> . expression GT expression
    (25) comp_expr -> . expression LT expression
    (26) comp_expr -> . expression GE expression
    (27) comp_expr -> . expression LE expression
    (28) comp_expr -> . expression NE expression
    (29) comp_expr -> . comp_expr AND comp_expr
    (30) comp_expr -> . comp_expr OR comp_expr
    (31) comp_expr -> . NOT expression
    (32) comp_expr -> . expression IN expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression POWER expression
    (20) expression -> . LPAREN expression RPAREN
    (21) expression -> . YES
    (22) expression -> . NO
    (33) expression -> . comp_expr
    (34) expression -> . NUMBER
    (35) expression -> . IDENTIFIER
    (36) expression -> . random_statement
    (37) expression -> . TEXT
    (38) expression -> . INPUT
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    NOT             shift and go to state 20
    LPAREN          shift and go to state 11
    YES             shift and go to state 12
    NO              shift and go to state 13
    NUMBER          shift and go to state 15
    IDENTIFIER      shift and go to state 16
    TEXT            shift and go to state 28
    INPUT           shift and go to state 19
    RANDOM          shift and go to state 21

    comp_expr                      shift and go to state 67
    expression                     shift and go to state 66
    random_statement               shift and go to state 17

state 44

    (6) ask -> TEXT EXPECTING . INPUT AND DATATYPE

    INPUT           shift and go to state 68


state 45

    (31) comp_expr -> NOT expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . POWER expression
    (23) comp_expr -> expression . EQ expression
    (24) comp_expr -> expression . GT expression
    (25) comp_expr -> expression . LT expression
    (26) comp_expr -> expression . GE expression
    (27) comp_expr -> expression . LE expression
    (28) comp_expr -> expression . NE expression
    (32) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    AND             reduce using rule 31 (comp_expr -> NOT expression .)
    OR              reduce using rule 31 (comp_expr -> NOT expression .)
    OUTPUT          reduce using rule 31 (comp_expr -> NOT expression .)
    SET             reduce using rule 31 (comp_expr -> NOT expression .)
    IF              reduce using rule 31 (comp_expr -> NOT expression .)
    $end            reduce using rule 31 (comp_expr -> NOT expression .)
    END             reduce using rule 31 (comp_expr -> NOT expression .)
    ELSE            reduce using rule 31 (comp_expr -> NOT expression .)
    THEN            reduce using rule 31 (comp_expr -> NOT expression .)
    RPAREN          reduce using rule 31 (comp_expr -> NOT expression .)
    TO              reduce using rule 31 (comp_expr -> NOT expression .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32
    POWER           shift and go to state 33
    EQ              shift and go to state 34
    GT              shift and go to state 35
    LT              shift and go to state 36
    GE              shift and go to state 37
    LE              shift and go to state 38
    NE              shift and go to state 39
    IN              shift and go to state 40

  ! PLUS            [ reduce using rule 31 (comp_expr -> NOT expression .) ]
  ! MINUS           [ reduce using rule 31 (comp_expr -> NOT expression .) ]
  ! TIMES           [ reduce using rule 31 (comp_expr -> NOT expression .) ]
  ! DIVIDE          [ reduce using rule 31 (comp_expr -> NOT expression .) ]
  ! POWER           [ reduce using rule 31 (comp_expr -> NOT expression .) ]
  ! EQ              [ reduce using rule 31 (comp_expr -> NOT expression .) ]
  ! GT              [ reduce using rule 31 (comp_expr -> NOT expression .) ]
  ! LT              [ reduce using rule 31 (comp_expr -> NOT expression .) ]
  ! GE              [ reduce using rule 31 (comp_expr -> NOT expression .) ]
  ! LE              [ reduce using rule 31 (comp_expr -> NOT expression .) ]
  ! NE              [ reduce using rule 31 (comp_expr -> NOT expression .) ]
  ! IN              [ reduce using rule 31 (comp_expr -> NOT expression .) ]


state 46

    (7) random_statement -> RANDOM DATATYPE . FROM expression TO expression

    FROM            shift and go to state 69


state 47

    (9) statement -> var_assignment TO expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . POWER expression
    (23) comp_expr -> expression . EQ expression
    (24) comp_expr -> expression . GT expression
    (25) comp_expr -> expression . LT expression
    (26) comp_expr -> expression . GE expression
    (27) comp_expr -> expression . LE expression
    (28) comp_expr -> expression . NE expression
    (32) comp_expr -> expression . IN expression

    OUTPUT          reduce using rule 9 (statement -> var_assignment TO expression .)
    SET             reduce using rule 9 (statement -> var_assignment TO expression .)
    IF              reduce using rule 9 (statement -> var_assignment TO expression .)
    $end            reduce using rule 9 (statement -> var_assignment TO expression .)
    END             reduce using rule 9 (statement -> var_assignment TO expression .)
    ELSE            reduce using rule 9 (statement -> var_assignment TO expression .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32
    POWER           shift and go to state 33
    EQ              shift and go to state 34
    GT              shift and go to state 35
    LT              shift and go to state 36
    GE              shift and go to state 37
    LE              shift and go to state 38
    NE              shift and go to state 39
    IN              shift and go to state 40


state 48

    (11) statement -> var_assignment TO ask .

    OUTPUT          reduce using rule 11 (statement -> var_assignment TO ask .)
    SET             reduce using rule 11 (statement -> var_assignment TO ask .)
    IF              reduce using rule 11 (statement -> var_assignment TO ask .)
    $end            reduce using rule 11 (statement -> var_assignment TO ask .)
    END             reduce using rule 11 (statement -> var_assignment TO ask .)
    ELSE            reduce using rule 11 (statement -> var_assignment TO ask .)


state 49

    (14) statement -> if_then ELSE THEN . statement end_statement
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (13) statement -> . if_then end_statement
    (14) statement -> . if_then ELSE THEN statement end_statement
    (8) var_assignment -> . SET IDENTIFIER
    (12) if_then -> . IF expression THEN statements

    OUTPUT          shift and go to state 3
    SET             shift and go to state 6
    IF              shift and go to state 7

    if_then                        shift and go to state 5
    statement                      shift and go to state 70
    var_assignment                 shift and go to state 4

state 50

    (3) end_statement -> END IF .

    OUTPUT          reduce using rule 3 (end_statement -> END IF .)
    SET             reduce using rule 3 (end_statement -> END IF .)
    IF              reduce using rule 3 (end_statement -> END IF .)
    $end            reduce using rule 3 (end_statement -> END IF .)
    END             reduce using rule 3 (end_statement -> END IF .)
    ELSE            reduce using rule 3 (end_statement -> END IF .)


state 51

    (12) if_then -> IF expression THEN . statements
    (1) statements -> . statement
    (2) statements -> . statements statement
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (13) statement -> . if_then end_statement
    (14) statement -> . if_then ELSE THEN statement end_statement
    (8) var_assignment -> . SET IDENTIFIER
    (12) if_then -> . IF expression THEN statements

    OUTPUT          shift and go to state 3
    SET             shift and go to state 6
    IF              shift and go to state 7

    statements                     shift and go to state 71
    statement                      shift and go to state 2
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 52

    (15) expression -> expression PLUS expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . POWER expression
    (23) comp_expr -> expression . EQ expression
    (24) comp_expr -> expression . GT expression
    (25) comp_expr -> expression . LT expression
    (26) comp_expr -> expression . GE expression
    (27) comp_expr -> expression . LE expression
    (28) comp_expr -> expression . NE expression
    (32) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    OUTPUT          reduce using rule 15 (expression -> expression PLUS expression .)
    SET             reduce using rule 15 (expression -> expression PLUS expression .)
    IF              reduce using rule 15 (expression -> expression PLUS expression .)
    $end            reduce using rule 15 (expression -> expression PLUS expression .)
    END             reduce using rule 15 (expression -> expression PLUS expression .)
    ELSE            reduce using rule 15 (expression -> expression PLUS expression .)
    THEN            reduce using rule 15 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 15 (expression -> expression PLUS expression .)
    AND             reduce using rule 15 (expression -> expression PLUS expression .)
    OR              reduce using rule 15 (expression -> expression PLUS expression .)
    TO              reduce using rule 15 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32
    POWER           shift and go to state 33
    EQ              shift and go to state 34
    GT              shift and go to state 35
    LT              shift and go to state 36
    GE              shift and go to state 37
    LE              shift and go to state 38
    NE              shift and go to state 39
    IN              shift and go to state 40

  ! PLUS            [ reduce using rule 15 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 15 (expression -> expression PLUS expression .) ]
  ! TIMES           [ reduce using rule 15 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 15 (expression -> expression PLUS expression .) ]
  ! POWER           [ reduce using rule 15 (expression -> expression PLUS expression .) ]
  ! EQ              [ reduce using rule 15 (expression -> expression PLUS expression .) ]
  ! GT              [ reduce using rule 15 (expression -> expression PLUS expression .) ]
  ! LT              [ reduce using rule 15 (expression -> expression PLUS expression .) ]
  ! GE              [ reduce using rule 15 (expression -> expression PLUS expression .) ]
  ! LE              [ reduce using rule 15 (expression -> expression PLUS expression .) ]
  ! NE              [ reduce using rule 15 (expression -> expression PLUS expression .) ]
  ! IN              [ reduce using rule 15 (expression -> expression PLUS expression .) ]


state 53

    (16) expression -> expression MINUS expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . POWER expression
    (23) comp_expr -> expression . EQ expression
    (24) comp_expr -> expression . GT expression
    (25) comp_expr -> expression . LT expression
    (26) comp_expr -> expression . GE expression
    (27) comp_expr -> expression . LE expression
    (28) comp_expr -> expression . NE expression
    (32) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    OUTPUT          reduce using rule 16 (expression -> expression MINUS expression .)
    SET             reduce using rule 16 (expression -> expression MINUS expression .)
    IF              reduce using rule 16 (expression -> expression MINUS expression .)
    $end            reduce using rule 16 (expression -> expression MINUS expression .)
    END             reduce using rule 16 (expression -> expression MINUS expression .)
    ELSE            reduce using rule 16 (expression -> expression MINUS expression .)
    THEN            reduce using rule 16 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 16 (expression -> expression MINUS expression .)
    AND             reduce using rule 16 (expression -> expression MINUS expression .)
    OR              reduce using rule 16 (expression -> expression MINUS expression .)
    TO              reduce using rule 16 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32
    POWER           shift and go to state 33
    EQ              shift and go to state 34
    GT              shift and go to state 35
    LT              shift and go to state 36
    GE              shift and go to state 37
    LE              shift and go to state 38
    NE              shift and go to state 39
    IN              shift and go to state 40

  ! PLUS            [ reduce using rule 16 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 16 (expression -> expression MINUS expression .) ]
  ! TIMES           [ reduce using rule 16 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 16 (expression -> expression MINUS expression .) ]
  ! POWER           [ reduce using rule 16 (expression -> expression MINUS expression .) ]
  ! EQ              [ reduce using rule 16 (expression -> expression MINUS expression .) ]
  ! GT              [ reduce using rule 16 (expression -> expression MINUS expression .) ]
  ! LT              [ reduce using rule 16 (expression -> expression MINUS expression .) ]
  ! GE              [ reduce using rule 16 (expression -> expression MINUS expression .) ]
  ! LE              [ reduce using rule 16 (expression -> expression MINUS expression .) ]
  ! NE              [ reduce using rule 16 (expression -> expression MINUS expression .) ]
  ! IN              [ reduce using rule 16 (expression -> expression MINUS expression .) ]


state 54

    (17) expression -> expression TIMES expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . POWER expression
    (23) comp_expr -> expression . EQ expression
    (24) comp_expr -> expression . GT expression
    (25) comp_expr -> expression . LT expression
    (26) comp_expr -> expression . GE expression
    (27) comp_expr -> expression . LE expression
    (28) comp_expr -> expression . NE expression
    (32) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    OUTPUT          reduce using rule 17 (expression -> expression TIMES expression .)
    SET             reduce using rule 17 (expression -> expression TIMES expression .)
    IF              reduce using rule 17 (expression -> expression TIMES expression .)
    $end            reduce using rule 17 (expression -> expression TIMES expression .)
    END             reduce using rule 17 (expression -> expression TIMES expression .)
    ELSE            reduce using rule 17 (expression -> expression TIMES expression .)
    THEN            reduce using rule 17 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 17 (expression -> expression TIMES expression .)
    AND             reduce using rule 17 (expression -> expression TIMES expression .)
    OR              reduce using rule 17 (expression -> expression TIMES expression .)
    TO              reduce using rule 17 (expression -> expression TIMES expression .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32
    POWER           shift and go to state 33
    EQ              shift and go to state 34
    GT              shift and go to state 35
    LT              shift and go to state 36
    GE              shift and go to state 37
    LE              shift and go to state 38
    NE              shift and go to state 39
    IN              shift and go to state 40

  ! PLUS            [ reduce using rule 17 (expression -> expression TIMES expression .) ]
  ! MINUS           [ reduce using rule 17 (expression -> expression TIMES expression .) ]
  ! TIMES           [ reduce using rule 17 (expression -> expression TIMES expression .) ]
  ! DIVIDE          [ reduce using rule 17 (expression -> expression TIMES expression .) ]
  ! POWER           [ reduce using rule 17 (expression -> expression TIMES expression .) ]
  ! EQ              [ reduce using rule 17 (expression -> expression TIMES expression .) ]
  ! GT              [ reduce using rule 17 (expression -> expression TIMES expression .) ]
  ! LT              [ reduce using rule 17 (expression -> expression TIMES expression .) ]
  ! GE              [ reduce using rule 17 (expression -> expression TIMES expression .) ]
  ! LE              [ reduce using rule 17 (expression -> expression TIMES expression .) ]
  ! NE              [ reduce using rule 17 (expression -> expression TIMES expression .) ]
  ! IN              [ reduce using rule 17 (expression -> expression TIMES expression .) ]


state 55

    (18) expression -> expression DIVIDE expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . POWER expression
    (23) comp_expr -> expression . EQ expression
    (24) comp_expr -> expression . GT expression
    (25) comp_expr -> expression . LT expression
    (26) comp_expr -> expression . GE expression
    (27) comp_expr -> expression . LE expression
    (28) comp_expr -> expression . NE expression
    (32) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    OUTPUT          reduce using rule 18 (expression -> expression DIVIDE expression .)
    SET             reduce using rule 18 (expression -> expression DIVIDE expression .)
    IF              reduce using rule 18 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 18 (expression -> expression DIVIDE expression .)
    END             reduce using rule 18 (expression -> expression DIVIDE expression .)
    ELSE            reduce using rule 18 (expression -> expression DIVIDE expression .)
    THEN            reduce using rule 18 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 18 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 18 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 18 (expression -> expression DIVIDE expression .)
    TO              reduce using rule 18 (expression -> expression DIVIDE expression .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32
    POWER           shift and go to state 33
    EQ              shift and go to state 34
    GT              shift and go to state 35
    LT              shift and go to state 36
    GE              shift and go to state 37
    LE              shift and go to state 38
    NE              shift and go to state 39
    IN              shift and go to state 40

  ! PLUS            [ reduce using rule 18 (expression -> expression DIVIDE expression .) ]
  ! MINUS           [ reduce using rule 18 (expression -> expression DIVIDE expression .) ]
  ! TIMES           [ reduce using rule 18 (expression -> expression DIVIDE expression .) ]
  ! DIVIDE          [ reduce using rule 18 (expression -> expression DIVIDE expression .) ]
  ! POWER           [ reduce using rule 18 (expression -> expression DIVIDE expression .) ]
  ! EQ              [ reduce using rule 18 (expression -> expression DIVIDE expression .) ]
  ! GT              [ reduce using rule 18 (expression -> expression DIVIDE expression .) ]
  ! LT              [ reduce using rule 18 (expression -> expression DIVIDE expression .) ]
  ! GE              [ reduce using rule 18 (expression -> expression DIVIDE expression .) ]
  ! LE              [ reduce using rule 18 (expression -> expression DIVIDE expression .) ]
  ! NE              [ reduce using rule 18 (expression -> expression DIVIDE expression .) ]
  ! IN              [ reduce using rule 18 (expression -> expression DIVIDE expression .) ]


state 56

    (19) expression -> expression POWER expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . POWER expression
    (23) comp_expr -> expression . EQ expression
    (24) comp_expr -> expression . GT expression
    (25) comp_expr -> expression . LT expression
    (26) comp_expr -> expression . GE expression
    (27) comp_expr -> expression . LE expression
    (28) comp_expr -> expression . NE expression
    (32) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    OUTPUT          reduce using rule 19 (expression -> expression POWER expression .)
    SET             reduce using rule 19 (expression -> expression POWER expression .)
    IF              reduce using rule 19 (expression -> expression POWER expression .)
    $end            reduce using rule 19 (expression -> expression POWER expression .)
    END             reduce using rule 19 (expression -> expression POWER expression .)
    ELSE            reduce using rule 19 (expression -> expression POWER expression .)
    THEN            reduce using rule 19 (expression -> expression POWER expression .)
    RPAREN          reduce using rule 19 (expression -> expression POWER expression .)
    AND             reduce using rule 19 (expression -> expression POWER expression .)
    OR              reduce using rule 19 (expression -> expression POWER expression .)
    TO              reduce using rule 19 (expression -> expression POWER expression .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32
    POWER           shift and go to state 33
    EQ              shift and go to state 34
    GT              shift and go to state 35
    LT              shift and go to state 36
    GE              shift and go to state 37
    LE              shift and go to state 38
    NE              shift and go to state 39
    IN              shift and go to state 40

  ! PLUS            [ reduce using rule 19 (expression -> expression POWER expression .) ]
  ! MINUS           [ reduce using rule 19 (expression -> expression POWER expression .) ]
  ! TIMES           [ reduce using rule 19 (expression -> expression POWER expression .) ]
  ! DIVIDE          [ reduce using rule 19 (expression -> expression POWER expression .) ]
  ! POWER           [ reduce using rule 19 (expression -> expression POWER expression .) ]
  ! EQ              [ reduce using rule 19 (expression -> expression POWER expression .) ]
  ! GT              [ reduce using rule 19 (expression -> expression POWER expression .) ]
  ! LT              [ reduce using rule 19 (expression -> expression POWER expression .) ]
  ! GE              [ reduce using rule 19 (expression -> expression POWER expression .) ]
  ! LE              [ reduce using rule 19 (expression -> expression POWER expression .) ]
  ! NE              [ reduce using rule 19 (expression -> expression POWER expression .) ]
  ! IN              [ reduce using rule 19 (expression -> expression POWER expression .) ]


state 57

    (23) comp_expr -> expression EQ expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . POWER expression
    (23) comp_expr -> expression . EQ expression
    (24) comp_expr -> expression . GT expression
    (25) comp_expr -> expression . LT expression
    (26) comp_expr -> expression . GE expression
    (27) comp_expr -> expression . LE expression
    (28) comp_expr -> expression . NE expression
    (32) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    AND             reduce using rule 23 (comp_expr -> expression EQ expression .)
    OR              reduce using rule 23 (comp_expr -> expression EQ expression .)
    OUTPUT          reduce using rule 23 (comp_expr -> expression EQ expression .)
    SET             reduce using rule 23 (comp_expr -> expression EQ expression .)
    IF              reduce using rule 23 (comp_expr -> expression EQ expression .)
    $end            reduce using rule 23 (comp_expr -> expression EQ expression .)
    END             reduce using rule 23 (comp_expr -> expression EQ expression .)
    ELSE            reduce using rule 23 (comp_expr -> expression EQ expression .)
    THEN            reduce using rule 23 (comp_expr -> expression EQ expression .)
    RPAREN          reduce using rule 23 (comp_expr -> expression EQ expression .)
    TO              reduce using rule 23 (comp_expr -> expression EQ expression .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32
    POWER           shift and go to state 33
    EQ              shift and go to state 34
    GT              shift and go to state 35
    LT              shift and go to state 36
    GE              shift and go to state 37
    LE              shift and go to state 38
    NE              shift and go to state 39
    IN              shift and go to state 40

  ! PLUS            [ reduce using rule 23 (comp_expr -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 23 (comp_expr -> expression EQ expression .) ]
  ! TIMES           [ reduce using rule 23 (comp_expr -> expression EQ expression .) ]
  ! DIVIDE          [ reduce using rule 23 (comp_expr -> expression EQ expression .) ]
  ! POWER           [ reduce using rule 23 (comp_expr -> expression EQ expression .) ]
  ! EQ              [ reduce using rule 23 (comp_expr -> expression EQ expression .) ]
  ! GT              [ reduce using rule 23 (comp_expr -> expression EQ expression .) ]
  ! LT              [ reduce using rule 23 (comp_expr -> expression EQ expression .) ]
  ! GE              [ reduce using rule 23 (comp_expr -> expression EQ expression .) ]
  ! LE              [ reduce using rule 23 (comp_expr -> expression EQ expression .) ]
  ! NE              [ reduce using rule 23 (comp_expr -> expression EQ expression .) ]
  ! IN              [ reduce using rule 23 (comp_expr -> expression EQ expression .) ]


state 58

    (24) comp_expr -> expression GT expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . POWER expression
    (23) comp_expr -> expression . EQ expression
    (24) comp_expr -> expression . GT expression
    (25) comp_expr -> expression . LT expression
    (26) comp_expr -> expression . GE expression
    (27) comp_expr -> expression . LE expression
    (28) comp_expr -> expression . NE expression
    (32) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    AND             reduce using rule 24 (comp_expr -> expression GT expression .)
    OR              reduce using rule 24 (comp_expr -> expression GT expression .)
    OUTPUT          reduce using rule 24 (comp_expr -> expression GT expression .)
    SET             reduce using rule 24 (comp_expr -> expression GT expression .)
    IF              reduce using rule 24 (comp_expr -> expression GT expression .)
    $end            reduce using rule 24 (comp_expr -> expression GT expression .)
    END             reduce using rule 24 (comp_expr -> expression GT expression .)
    ELSE            reduce using rule 24 (comp_expr -> expression GT expression .)
    THEN            reduce using rule 24 (comp_expr -> expression GT expression .)
    RPAREN          reduce using rule 24 (comp_expr -> expression GT expression .)
    TO              reduce using rule 24 (comp_expr -> expression GT expression .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32
    POWER           shift and go to state 33
    EQ              shift and go to state 34
    GT              shift and go to state 35
    LT              shift and go to state 36
    GE              shift and go to state 37
    LE              shift and go to state 38
    NE              shift and go to state 39
    IN              shift and go to state 40

  ! PLUS            [ reduce using rule 24 (comp_expr -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 24 (comp_expr -> expression GT expression .) ]
  ! TIMES           [ reduce using rule 24 (comp_expr -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 24 (comp_expr -> expression GT expression .) ]
  ! POWER           [ reduce using rule 24 (comp_expr -> expression GT expression .) ]
  ! EQ              [ reduce using rule 24 (comp_expr -> expression GT expression .) ]
  ! GT              [ reduce using rule 24 (comp_expr -> expression GT expression .) ]
  ! LT              [ reduce using rule 24 (comp_expr -> expression GT expression .) ]
  ! GE              [ reduce using rule 24 (comp_expr -> expression GT expression .) ]
  ! LE              [ reduce using rule 24 (comp_expr -> expression GT expression .) ]
  ! NE              [ reduce using rule 24 (comp_expr -> expression GT expression .) ]
  ! IN              [ reduce using rule 24 (comp_expr -> expression GT expression .) ]


state 59

    (25) comp_expr -> expression LT expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . POWER expression
    (23) comp_expr -> expression . EQ expression
    (24) comp_expr -> expression . GT expression
    (25) comp_expr -> expression . LT expression
    (26) comp_expr -> expression . GE expression
    (27) comp_expr -> expression . LE expression
    (28) comp_expr -> expression . NE expression
    (32) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    AND             reduce using rule 25 (comp_expr -> expression LT expression .)
    OR              reduce using rule 25 (comp_expr -> expression LT expression .)
    OUTPUT          reduce using rule 25 (comp_expr -> expression LT expression .)
    SET             reduce using rule 25 (comp_expr -> expression LT expression .)
    IF              reduce using rule 25 (comp_expr -> expression LT expression .)
    $end            reduce using rule 25 (comp_expr -> expression LT expression .)
    END             reduce using rule 25 (comp_expr -> expression LT expression .)
    ELSE            reduce using rule 25 (comp_expr -> expression LT expression .)
    THEN            reduce using rule 25 (comp_expr -> expression LT expression .)
    RPAREN          reduce using rule 25 (comp_expr -> expression LT expression .)
    TO              reduce using rule 25 (comp_expr -> expression LT expression .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32
    POWER           shift and go to state 33
    EQ              shift and go to state 34
    GT              shift and go to state 35
    LT              shift and go to state 36
    GE              shift and go to state 37
    LE              shift and go to state 38
    NE              shift and go to state 39
    IN              shift and go to state 40

  ! PLUS            [ reduce using rule 25 (comp_expr -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 25 (comp_expr -> expression LT expression .) ]
  ! TIMES           [ reduce using rule 25 (comp_expr -> expression LT expression .) ]
  ! DIVIDE          [ reduce using rule 25 (comp_expr -> expression LT expression .) ]
  ! POWER           [ reduce using rule 25 (comp_expr -> expression LT expression .) ]
  ! EQ              [ reduce using rule 25 (comp_expr -> expression LT expression .) ]
  ! GT              [ reduce using rule 25 (comp_expr -> expression LT expression .) ]
  ! LT              [ reduce using rule 25 (comp_expr -> expression LT expression .) ]
  ! GE              [ reduce using rule 25 (comp_expr -> expression LT expression .) ]
  ! LE              [ reduce using rule 25 (comp_expr -> expression LT expression .) ]
  ! NE              [ reduce using rule 25 (comp_expr -> expression LT expression .) ]
  ! IN              [ reduce using rule 25 (comp_expr -> expression LT expression .) ]


state 60

    (26) comp_expr -> expression GE expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . POWER expression
    (23) comp_expr -> expression . EQ expression
    (24) comp_expr -> expression . GT expression
    (25) comp_expr -> expression . LT expression
    (26) comp_expr -> expression . GE expression
    (27) comp_expr -> expression . LE expression
    (28) comp_expr -> expression . NE expression
    (32) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    AND             reduce using rule 26 (comp_expr -> expression GE expression .)
    OR              reduce using rule 26 (comp_expr -> expression GE expression .)
    OUTPUT          reduce using rule 26 (comp_expr -> expression GE expression .)
    SET             reduce using rule 26 (comp_expr -> expression GE expression .)
    IF              reduce using rule 26 (comp_expr -> expression GE expression .)
    $end            reduce using rule 26 (comp_expr -> expression GE expression .)
    END             reduce using rule 26 (comp_expr -> expression GE expression .)
    ELSE            reduce using rule 26 (comp_expr -> expression GE expression .)
    THEN            reduce using rule 26 (comp_expr -> expression GE expression .)
    RPAREN          reduce using rule 26 (comp_expr -> expression GE expression .)
    TO              reduce using rule 26 (comp_expr -> expression GE expression .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32
    POWER           shift and go to state 33
    EQ              shift and go to state 34
    GT              shift and go to state 35
    LT              shift and go to state 36
    GE              shift and go to state 37
    LE              shift and go to state 38
    NE              shift and go to state 39
    IN              shift and go to state 40

  ! PLUS            [ reduce using rule 26 (comp_expr -> expression GE expression .) ]
  ! MINUS           [ reduce using rule 26 (comp_expr -> expression GE expression .) ]
  ! TIMES           [ reduce using rule 26 (comp_expr -> expression GE expression .) ]
  ! DIVIDE          [ reduce using rule 26 (comp_expr -> expression GE expression .) ]
  ! POWER           [ reduce using rule 26 (comp_expr -> expression GE expression .) ]
  ! EQ              [ reduce using rule 26 (comp_expr -> expression GE expression .) ]
  ! GT              [ reduce using rule 26 (comp_expr -> expression GE expression .) ]
  ! LT              [ reduce using rule 26 (comp_expr -> expression GE expression .) ]
  ! GE              [ reduce using rule 26 (comp_expr -> expression GE expression .) ]
  ! LE              [ reduce using rule 26 (comp_expr -> expression GE expression .) ]
  ! NE              [ reduce using rule 26 (comp_expr -> expression GE expression .) ]
  ! IN              [ reduce using rule 26 (comp_expr -> expression GE expression .) ]


state 61

    (27) comp_expr -> expression LE expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . POWER expression
    (23) comp_expr -> expression . EQ expression
    (24) comp_expr -> expression . GT expression
    (25) comp_expr -> expression . LT expression
    (26) comp_expr -> expression . GE expression
    (27) comp_expr -> expression . LE expression
    (28) comp_expr -> expression . NE expression
    (32) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    AND             reduce using rule 27 (comp_expr -> expression LE expression .)
    OR              reduce using rule 27 (comp_expr -> expression LE expression .)
    OUTPUT          reduce using rule 27 (comp_expr -> expression LE expression .)
    SET             reduce using rule 27 (comp_expr -> expression LE expression .)
    IF              reduce using rule 27 (comp_expr -> expression LE expression .)
    $end            reduce using rule 27 (comp_expr -> expression LE expression .)
    END             reduce using rule 27 (comp_expr -> expression LE expression .)
    ELSE            reduce using rule 27 (comp_expr -> expression LE expression .)
    THEN            reduce using rule 27 (comp_expr -> expression LE expression .)
    RPAREN          reduce using rule 27 (comp_expr -> expression LE expression .)
    TO              reduce using rule 27 (comp_expr -> expression LE expression .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32
    POWER           shift and go to state 33
    EQ              shift and go to state 34
    GT              shift and go to state 35
    LT              shift and go to state 36
    GE              shift and go to state 37
    LE              shift and go to state 38
    NE              shift and go to state 39
    IN              shift and go to state 40

  ! PLUS            [ reduce using rule 27 (comp_expr -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 27 (comp_expr -> expression LE expression .) ]
  ! TIMES           [ reduce using rule 27 (comp_expr -> expression LE expression .) ]
  ! DIVIDE          [ reduce using rule 27 (comp_expr -> expression LE expression .) ]
  ! POWER           [ reduce using rule 27 (comp_expr -> expression LE expression .) ]
  ! EQ              [ reduce using rule 27 (comp_expr -> expression LE expression .) ]
  ! GT              [ reduce using rule 27 (comp_expr -> expression LE expression .) ]
  ! LT              [ reduce using rule 27 (comp_expr -> expression LE expression .) ]
  ! GE              [ reduce using rule 27 (comp_expr -> expression LE expression .) ]
  ! LE              [ reduce using rule 27 (comp_expr -> expression LE expression .) ]
  ! NE              [ reduce using rule 27 (comp_expr -> expression LE expression .) ]
  ! IN              [ reduce using rule 27 (comp_expr -> expression LE expression .) ]


state 62

    (28) comp_expr -> expression NE expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . POWER expression
    (23) comp_expr -> expression . EQ expression
    (24) comp_expr -> expression . GT expression
    (25) comp_expr -> expression . LT expression
    (26) comp_expr -> expression . GE expression
    (27) comp_expr -> expression . LE expression
    (28) comp_expr -> expression . NE expression
    (32) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    AND             reduce using rule 28 (comp_expr -> expression NE expression .)
    OR              reduce using rule 28 (comp_expr -> expression NE expression .)
    OUTPUT          reduce using rule 28 (comp_expr -> expression NE expression .)
    SET             reduce using rule 28 (comp_expr -> expression NE expression .)
    IF              reduce using rule 28 (comp_expr -> expression NE expression .)
    $end            reduce using rule 28 (comp_expr -> expression NE expression .)
    END             reduce using rule 28 (comp_expr -> expression NE expression .)
    ELSE            reduce using rule 28 (comp_expr -> expression NE expression .)
    THEN            reduce using rule 28 (comp_expr -> expression NE expression .)
    RPAREN          reduce using rule 28 (comp_expr -> expression NE expression .)
    TO              reduce using rule 28 (comp_expr -> expression NE expression .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32
    POWER           shift and go to state 33
    EQ              shift and go to state 34
    GT              shift and go to state 35
    LT              shift and go to state 36
    GE              shift and go to state 37
    LE              shift and go to state 38
    NE              shift and go to state 39
    IN              shift and go to state 40

  ! PLUS            [ reduce using rule 28 (comp_expr -> expression NE expression .) ]
  ! MINUS           [ reduce using rule 28 (comp_expr -> expression NE expression .) ]
  ! TIMES           [ reduce using rule 28 (comp_expr -> expression NE expression .) ]
  ! DIVIDE          [ reduce using rule 28 (comp_expr -> expression NE expression .) ]
  ! POWER           [ reduce using rule 28 (comp_expr -> expression NE expression .) ]
  ! EQ              [ reduce using rule 28 (comp_expr -> expression NE expression .) ]
  ! GT              [ reduce using rule 28 (comp_expr -> expression NE expression .) ]
  ! LT              [ reduce using rule 28 (comp_expr -> expression NE expression .) ]
  ! GE              [ reduce using rule 28 (comp_expr -> expression NE expression .) ]
  ! LE              [ reduce using rule 28 (comp_expr -> expression NE expression .) ]
  ! NE              [ reduce using rule 28 (comp_expr -> expression NE expression .) ]
  ! IN              [ reduce using rule 28 (comp_expr -> expression NE expression .) ]


state 63

    (32) comp_expr -> expression IN expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . POWER expression
    (23) comp_expr -> expression . EQ expression
    (24) comp_expr -> expression . GT expression
    (25) comp_expr -> expression . LT expression
    (26) comp_expr -> expression . GE expression
    (27) comp_expr -> expression . LE expression
    (28) comp_expr -> expression . NE expression
    (32) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    AND             reduce using rule 32 (comp_expr -> expression IN expression .)
    OR              reduce using rule 32 (comp_expr -> expression IN expression .)
    OUTPUT          reduce using rule 32 (comp_expr -> expression IN expression .)
    SET             reduce using rule 32 (comp_expr -> expression IN expression .)
    IF              reduce using rule 32 (comp_expr -> expression IN expression .)
    $end            reduce using rule 32 (comp_expr -> expression IN expression .)
    END             reduce using rule 32 (comp_expr -> expression IN expression .)
    ELSE            reduce using rule 32 (comp_expr -> expression IN expression .)
    THEN            reduce using rule 32 (comp_expr -> expression IN expression .)
    RPAREN          reduce using rule 32 (comp_expr -> expression IN expression .)
    TO              reduce using rule 32 (comp_expr -> expression IN expression .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32
    POWER           shift and go to state 33
    EQ              shift and go to state 34
    GT              shift and go to state 35
    LT              shift and go to state 36
    GE              shift and go to state 37
    LE              shift and go to state 38
    NE              shift and go to state 39
    IN              shift and go to state 40

  ! PLUS            [ reduce using rule 32 (comp_expr -> expression IN expression .) ]
  ! MINUS           [ reduce using rule 32 (comp_expr -> expression IN expression .) ]
  ! TIMES           [ reduce using rule 32 (comp_expr -> expression IN expression .) ]
  ! DIVIDE          [ reduce using rule 32 (comp_expr -> expression IN expression .) ]
  ! POWER           [ reduce using rule 32 (comp_expr -> expression IN expression .) ]
  ! EQ              [ reduce using rule 32 (comp_expr -> expression IN expression .) ]
  ! GT              [ reduce using rule 32 (comp_expr -> expression IN expression .) ]
  ! LT              [ reduce using rule 32 (comp_expr -> expression IN expression .) ]
  ! GE              [ reduce using rule 32 (comp_expr -> expression IN expression .) ]
  ! LE              [ reduce using rule 32 (comp_expr -> expression IN expression .) ]
  ! NE              [ reduce using rule 32 (comp_expr -> expression IN expression .) ]
  ! IN              [ reduce using rule 32 (comp_expr -> expression IN expression .) ]


state 64

    (20) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 20 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 20 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 20 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 20 (expression -> LPAREN expression RPAREN .)
    POWER           reduce using rule 20 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 20 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 20 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 20 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 20 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 20 (expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 20 (expression -> LPAREN expression RPAREN .)
    IN              reduce using rule 20 (expression -> LPAREN expression RPAREN .)
    OUTPUT          reduce using rule 20 (expression -> LPAREN expression RPAREN .)
    SET             reduce using rule 20 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 20 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 20 (expression -> LPAREN expression RPAREN .)
    END             reduce using rule 20 (expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 20 (expression -> LPAREN expression RPAREN .)
    THEN            reduce using rule 20 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 20 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 20 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 20 (expression -> LPAREN expression RPAREN .)
    TO              reduce using rule 20 (expression -> LPAREN expression RPAREN .)


state 65

    (29) comp_expr -> comp_expr AND comp_expr .
    (29) comp_expr -> comp_expr . AND comp_expr
    (30) comp_expr -> comp_expr . OR comp_expr
    (33) expression -> comp_expr .

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! reduce/reduce conflict for EQ resolved using rule 29 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for GT resolved using rule 29 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for LT resolved using rule 29 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for GE resolved using rule 29 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for LE resolved using rule 29 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for NE resolved using rule 29 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for IN resolved using rule 29 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for PLUS resolved using rule 29 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for MINUS resolved using rule 29 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for TIMES resolved using rule 29 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 29 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for POWER resolved using rule 29 (comp_expr -> comp_expr AND comp_expr .)
    PLUS            reduce using rule 29 (comp_expr -> comp_expr AND comp_expr .)
    MINUS           reduce using rule 29 (comp_expr -> comp_expr AND comp_expr .)
    TIMES           reduce using rule 29 (comp_expr -> comp_expr AND comp_expr .)
    DIVIDE          reduce using rule 29 (comp_expr -> comp_expr AND comp_expr .)
    POWER           reduce using rule 29 (comp_expr -> comp_expr AND comp_expr .)
    EQ              reduce using rule 29 (comp_expr -> comp_expr AND comp_expr .)
    GT              reduce using rule 29 (comp_expr -> comp_expr AND comp_expr .)
    LT              reduce using rule 29 (comp_expr -> comp_expr AND comp_expr .)
    GE              reduce using rule 29 (comp_expr -> comp_expr AND comp_expr .)
    LE              reduce using rule 29 (comp_expr -> comp_expr AND comp_expr .)
    NE              reduce using rule 29 (comp_expr -> comp_expr AND comp_expr .)
    IN              reduce using rule 29 (comp_expr -> comp_expr AND comp_expr .)
    OUTPUT          reduce using rule 29 (comp_expr -> comp_expr AND comp_expr .)
    SET             reduce using rule 29 (comp_expr -> comp_expr AND comp_expr .)
    IF              reduce using rule 29 (comp_expr -> comp_expr AND comp_expr .)
    $end            reduce using rule 29 (comp_expr -> comp_expr AND comp_expr .)
    END             reduce using rule 29 (comp_expr -> comp_expr AND comp_expr .)
    ELSE            reduce using rule 29 (comp_expr -> comp_expr AND comp_expr .)
    THEN            reduce using rule 29 (comp_expr -> comp_expr AND comp_expr .)
    RPAREN          reduce using rule 29 (comp_expr -> comp_expr AND comp_expr .)
    TO              reduce using rule 29 (comp_expr -> comp_expr AND comp_expr .)
    AND             shift and go to state 42
    OR              shift and go to state 43

  ! AND             [ reduce using rule 29 (comp_expr -> comp_expr AND comp_expr .) ]
  ! OR              [ reduce using rule 29 (comp_expr -> comp_expr AND comp_expr .) ]
  ! EQ              [ reduce using rule 33 (expression -> comp_expr .) ]
  ! GT              [ reduce using rule 33 (expression -> comp_expr .) ]
  ! LT              [ reduce using rule 33 (expression -> comp_expr .) ]
  ! GE              [ reduce using rule 33 (expression -> comp_expr .) ]
  ! LE              [ reduce using rule 33 (expression -> comp_expr .) ]
  ! NE              [ reduce using rule 33 (expression -> comp_expr .) ]
  ! IN              [ reduce using rule 33 (expression -> comp_expr .) ]
  ! PLUS            [ reduce using rule 33 (expression -> comp_expr .) ]
  ! MINUS           [ reduce using rule 33 (expression -> comp_expr .) ]
  ! TIMES           [ reduce using rule 33 (expression -> comp_expr .) ]
  ! DIVIDE          [ reduce using rule 33 (expression -> comp_expr .) ]
  ! POWER           [ reduce using rule 33 (expression -> comp_expr .) ]


state 66

    (23) comp_expr -> expression . EQ expression
    (24) comp_expr -> expression . GT expression
    (25) comp_expr -> expression . LT expression
    (26) comp_expr -> expression . GE expression
    (27) comp_expr -> expression . LE expression
    (28) comp_expr -> expression . NE expression
    (32) comp_expr -> expression . IN expression
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . POWER expression

    EQ              shift and go to state 34
    GT              shift and go to state 35
    LT              shift and go to state 36
    GE              shift and go to state 37
    LE              shift and go to state 38
    NE              shift and go to state 39
    IN              shift and go to state 40
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32
    POWER           shift and go to state 33


state 67

    (30) comp_expr -> comp_expr OR comp_expr .
    (29) comp_expr -> comp_expr . AND comp_expr
    (30) comp_expr -> comp_expr . OR comp_expr
    (33) expression -> comp_expr .

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! reduce/reduce conflict for EQ resolved using rule 30 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for GT resolved using rule 30 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for LT resolved using rule 30 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for GE resolved using rule 30 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for LE resolved using rule 30 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for NE resolved using rule 30 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for IN resolved using rule 30 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for PLUS resolved using rule 30 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for MINUS resolved using rule 30 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for TIMES resolved using rule 30 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 30 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for POWER resolved using rule 30 (comp_expr -> comp_expr OR comp_expr .)
    PLUS            reduce using rule 30 (comp_expr -> comp_expr OR comp_expr .)
    MINUS           reduce using rule 30 (comp_expr -> comp_expr OR comp_expr .)
    TIMES           reduce using rule 30 (comp_expr -> comp_expr OR comp_expr .)
    DIVIDE          reduce using rule 30 (comp_expr -> comp_expr OR comp_expr .)
    POWER           reduce using rule 30 (comp_expr -> comp_expr OR comp_expr .)
    EQ              reduce using rule 30 (comp_expr -> comp_expr OR comp_expr .)
    GT              reduce using rule 30 (comp_expr -> comp_expr OR comp_expr .)
    LT              reduce using rule 30 (comp_expr -> comp_expr OR comp_expr .)
    GE              reduce using rule 30 (comp_expr -> comp_expr OR comp_expr .)
    LE              reduce using rule 30 (comp_expr -> comp_expr OR comp_expr .)
    NE              reduce using rule 30 (comp_expr -> comp_expr OR comp_expr .)
    IN              reduce using rule 30 (comp_expr -> comp_expr OR comp_expr .)
    OUTPUT          reduce using rule 30 (comp_expr -> comp_expr OR comp_expr .)
    SET             reduce using rule 30 (comp_expr -> comp_expr OR comp_expr .)
    IF              reduce using rule 30 (comp_expr -> comp_expr OR comp_expr .)
    $end            reduce using rule 30 (comp_expr -> comp_expr OR comp_expr .)
    END             reduce using rule 30 (comp_expr -> comp_expr OR comp_expr .)
    ELSE            reduce using rule 30 (comp_expr -> comp_expr OR comp_expr .)
    THEN            reduce using rule 30 (comp_expr -> comp_expr OR comp_expr .)
    RPAREN          reduce using rule 30 (comp_expr -> comp_expr OR comp_expr .)
    TO              reduce using rule 30 (comp_expr -> comp_expr OR comp_expr .)
    AND             shift and go to state 42
    OR              shift and go to state 43

  ! AND             [ reduce using rule 30 (comp_expr -> comp_expr OR comp_expr .) ]
  ! OR              [ reduce using rule 30 (comp_expr -> comp_expr OR comp_expr .) ]
  ! EQ              [ reduce using rule 33 (expression -> comp_expr .) ]
  ! GT              [ reduce using rule 33 (expression -> comp_expr .) ]
  ! LT              [ reduce using rule 33 (expression -> comp_expr .) ]
  ! GE              [ reduce using rule 33 (expression -> comp_expr .) ]
  ! LE              [ reduce using rule 33 (expression -> comp_expr .) ]
  ! NE              [ reduce using rule 33 (expression -> comp_expr .) ]
  ! IN              [ reduce using rule 33 (expression -> comp_expr .) ]
  ! PLUS            [ reduce using rule 33 (expression -> comp_expr .) ]
  ! MINUS           [ reduce using rule 33 (expression -> comp_expr .) ]
  ! TIMES           [ reduce using rule 33 (expression -> comp_expr .) ]
  ! DIVIDE          [ reduce using rule 33 (expression -> comp_expr .) ]
  ! POWER           [ reduce using rule 33 (expression -> comp_expr .) ]


state 68

    (6) ask -> TEXT EXPECTING INPUT . AND DATATYPE

    AND             shift and go to state 72


state 69

    (7) random_statement -> RANDOM DATATYPE FROM . expression TO expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression POWER expression
    (20) expression -> . LPAREN expression RPAREN
    (21) expression -> . YES
    (22) expression -> . NO
    (33) expression -> . comp_expr
    (34) expression -> . NUMBER
    (35) expression -> . IDENTIFIER
    (36) expression -> . random_statement
    (37) expression -> . TEXT
    (38) expression -> . INPUT
    (23) comp_expr -> . expression EQ expression
    (24) comp_expr -> . expression GT expression
    (25) comp_expr -> . expression LT expression
    (26) comp_expr -> . expression GE expression
    (27) comp_expr -> . expression LE expression
    (28) comp_expr -> . expression NE expression
    (29) comp_expr -> . comp_expr AND comp_expr
    (30) comp_expr -> . comp_expr OR comp_expr
    (31) comp_expr -> . NOT expression
    (32) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 11
    YES             shift and go to state 12
    NO              shift and go to state 13
    NUMBER          shift and go to state 15
    IDENTIFIER      shift and go to state 16
    TEXT            shift and go to state 28
    INPUT           shift and go to state 19
    NOT             shift and go to state 20
    RANDOM          shift and go to state 21

    expression                     shift and go to state 73
    comp_expr                      shift and go to state 14
    random_statement               shift and go to state 17

state 70

    (14) statement -> if_then ELSE THEN statement . end_statement
    (3) end_statement -> . END IF

    END             shift and go to state 25

    end_statement                  shift and go to state 74

state 71

    (12) if_then -> IF expression THEN statements .
    (2) statements -> statements . statement
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (13) statement -> . if_then end_statement
    (14) statement -> . if_then ELSE THEN statement end_statement
    (8) var_assignment -> . SET IDENTIFIER
    (12) if_then -> . IF expression THEN statements

    ELSE            reduce using rule 12 (if_then -> IF expression THEN statements .)
    END             reduce using rule 12 (if_then -> IF expression THEN statements .)
    OUTPUT          shift and go to state 3
    SET             shift and go to state 6
    IF              shift and go to state 7

    statement                      shift and go to state 8
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 72

    (6) ask -> TEXT EXPECTING INPUT AND . DATATYPE

    DATATYPE        shift and go to state 75


state 73

    (7) random_statement -> RANDOM DATATYPE FROM expression . TO expression
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . POWER expression
    (23) comp_expr -> expression . EQ expression
    (24) comp_expr -> expression . GT expression
    (25) comp_expr -> expression . LT expression
    (26) comp_expr -> expression . GE expression
    (27) comp_expr -> expression . LE expression
    (28) comp_expr -> expression . NE expression
    (32) comp_expr -> expression . IN expression

    TO              shift and go to state 76
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32
    POWER           shift and go to state 33
    EQ              shift and go to state 34
    GT              shift and go to state 35
    LT              shift and go to state 36
    GE              shift and go to state 37
    LE              shift and go to state 38
    NE              shift and go to state 39
    IN              shift and go to state 40


state 74

    (14) statement -> if_then ELSE THEN statement end_statement .

    OUTPUT          reduce using rule 14 (statement -> if_then ELSE THEN statement end_statement .)
    SET             reduce using rule 14 (statement -> if_then ELSE THEN statement end_statement .)
    IF              reduce using rule 14 (statement -> if_then ELSE THEN statement end_statement .)
    $end            reduce using rule 14 (statement -> if_then ELSE THEN statement end_statement .)
    END             reduce using rule 14 (statement -> if_then ELSE THEN statement end_statement .)
    ELSE            reduce using rule 14 (statement -> if_then ELSE THEN statement end_statement .)


state 75

    (6) ask -> TEXT EXPECTING INPUT AND DATATYPE .

    OUTPUT          reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    SET             reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    IF              reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    $end            reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    END             reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    ELSE            reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)


state 76

    (7) random_statement -> RANDOM DATATYPE FROM expression TO . expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . expression POWER expression
    (20) expression -> . LPAREN expression RPAREN
    (21) expression -> . YES
    (22) expression -> . NO
    (33) expression -> . comp_expr
    (34) expression -> . NUMBER
    (35) expression -> . IDENTIFIER
    (36) expression -> . random_statement
    (37) expression -> . TEXT
    (38) expression -> . INPUT
    (23) comp_expr -> . expression EQ expression
    (24) comp_expr -> . expression GT expression
    (25) comp_expr -> . expression LT expression
    (26) comp_expr -> . expression GE expression
    (27) comp_expr -> . expression LE expression
    (28) comp_expr -> . expression NE expression
    (29) comp_expr -> . comp_expr AND comp_expr
    (30) comp_expr -> . comp_expr OR comp_expr
    (31) comp_expr -> . NOT expression
    (32) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 11
    YES             shift and go to state 12
    NO              shift and go to state 13
    NUMBER          shift and go to state 15
    IDENTIFIER      shift and go to state 16
    TEXT            shift and go to state 28
    INPUT           shift and go to state 19
    NOT             shift and go to state 20
    RANDOM          shift and go to state 21

    expression                     shift and go to state 77
    comp_expr                      shift and go to state 14
    random_statement               shift and go to state 17

state 77

    (7) random_statement -> RANDOM DATATYPE FROM expression TO expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression
    (19) expression -> expression . POWER expression
    (23) comp_expr -> expression . EQ expression
    (24) comp_expr -> expression . GT expression
    (25) comp_expr -> expression . LT expression
    (26) comp_expr -> expression . GE expression
    (27) comp_expr -> expression . LE expression
    (28) comp_expr -> expression . NE expression
    (32) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    OUTPUT          reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    SET             reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    IF              reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    $end            reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    END             reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    ELSE            reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    THEN            reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    RPAREN          reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    AND             reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    OR              reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    TO              reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32
    POWER           shift and go to state 33
    EQ              shift and go to state 34
    GT              shift and go to state 35
    LT              shift and go to state 36
    GE              shift and go to state 37
    LE              shift and go to state 38
    NE              shift and go to state 39
    IN              shift and go to state 40

  ! PLUS            [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! MINUS           [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! TIMES           [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! DIVIDE          [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! POWER           [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! EQ              [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! GT              [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! LT              [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! GE              [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! LE              [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! NE              [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! IN              [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for AND in state 14 resolved as shift
WARNING: shift/reduce conflict for OR in state 14 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 45 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 45 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 45 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 45 resolved as shift
WARNING: shift/reduce conflict for POWER in state 45 resolved as shift
WARNING: shift/reduce conflict for EQ in state 45 resolved as shift
WARNING: shift/reduce conflict for GT in state 45 resolved as shift
WARNING: shift/reduce conflict for LT in state 45 resolved as shift
WARNING: shift/reduce conflict for GE in state 45 resolved as shift
WARNING: shift/reduce conflict for LE in state 45 resolved as shift
WARNING: shift/reduce conflict for NE in state 45 resolved as shift
WARNING: shift/reduce conflict for IN in state 45 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 52 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 52 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 52 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 52 resolved as shift
WARNING: shift/reduce conflict for POWER in state 52 resolved as shift
WARNING: shift/reduce conflict for EQ in state 52 resolved as shift
WARNING: shift/reduce conflict for GT in state 52 resolved as shift
WARNING: shift/reduce conflict for LT in state 52 resolved as shift
WARNING: shift/reduce conflict for GE in state 52 resolved as shift
WARNING: shift/reduce conflict for LE in state 52 resolved as shift
WARNING: shift/reduce conflict for NE in state 52 resolved as shift
WARNING: shift/reduce conflict for IN in state 52 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 53 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 53 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 53 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 53 resolved as shift
WARNING: shift/reduce conflict for POWER in state 53 resolved as shift
WARNING: shift/reduce conflict for EQ in state 53 resolved as shift
WARNING: shift/reduce conflict for GT in state 53 resolved as shift
WARNING: shift/reduce conflict for LT in state 53 resolved as shift
WARNING: shift/reduce conflict for GE in state 53 resolved as shift
WARNING: shift/reduce conflict for LE in state 53 resolved as shift
WARNING: shift/reduce conflict for NE in state 53 resolved as shift
WARNING: shift/reduce conflict for IN in state 53 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 54 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 54 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 54 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 54 resolved as shift
WARNING: shift/reduce conflict for POWER in state 54 resolved as shift
WARNING: shift/reduce conflict for EQ in state 54 resolved as shift
WARNING: shift/reduce conflict for GT in state 54 resolved as shift
WARNING: shift/reduce conflict for LT in state 54 resolved as shift
WARNING: shift/reduce conflict for GE in state 54 resolved as shift
WARNING: shift/reduce conflict for LE in state 54 resolved as shift
WARNING: shift/reduce conflict for NE in state 54 resolved as shift
WARNING: shift/reduce conflict for IN in state 54 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 55 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 55 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 55 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 55 resolved as shift
WARNING: shift/reduce conflict for POWER in state 55 resolved as shift
WARNING: shift/reduce conflict for EQ in state 55 resolved as shift
WARNING: shift/reduce conflict for GT in state 55 resolved as shift
WARNING: shift/reduce conflict for LT in state 55 resolved as shift
WARNING: shift/reduce conflict for GE in state 55 resolved as shift
WARNING: shift/reduce conflict for LE in state 55 resolved as shift
WARNING: shift/reduce conflict for NE in state 55 resolved as shift
WARNING: shift/reduce conflict for IN in state 55 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 56 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 56 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 56 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 56 resolved as shift
WARNING: shift/reduce conflict for POWER in state 56 resolved as shift
WARNING: shift/reduce conflict for EQ in state 56 resolved as shift
WARNING: shift/reduce conflict for GT in state 56 resolved as shift
WARNING: shift/reduce conflict for LT in state 56 resolved as shift
WARNING: shift/reduce conflict for GE in state 56 resolved as shift
WARNING: shift/reduce conflict for LE in state 56 resolved as shift
WARNING: shift/reduce conflict for NE in state 56 resolved as shift
WARNING: shift/reduce conflict for IN in state 56 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 57 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 57 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 57 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 57 resolved as shift
WARNING: shift/reduce conflict for POWER in state 57 resolved as shift
WARNING: shift/reduce conflict for EQ in state 57 resolved as shift
WARNING: shift/reduce conflict for GT in state 57 resolved as shift
WARNING: shift/reduce conflict for LT in state 57 resolved as shift
WARNING: shift/reduce conflict for GE in state 57 resolved as shift
WARNING: shift/reduce conflict for LE in state 57 resolved as shift
WARNING: shift/reduce conflict for NE in state 57 resolved as shift
WARNING: shift/reduce conflict for IN in state 57 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 58 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 58 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 58 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 58 resolved as shift
WARNING: shift/reduce conflict for POWER in state 58 resolved as shift
WARNING: shift/reduce conflict for EQ in state 58 resolved as shift
WARNING: shift/reduce conflict for GT in state 58 resolved as shift
WARNING: shift/reduce conflict for LT in state 58 resolved as shift
WARNING: shift/reduce conflict for GE in state 58 resolved as shift
WARNING: shift/reduce conflict for LE in state 58 resolved as shift
WARNING: shift/reduce conflict for NE in state 58 resolved as shift
WARNING: shift/reduce conflict for IN in state 58 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 59 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 59 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 59 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 59 resolved as shift
WARNING: shift/reduce conflict for POWER in state 59 resolved as shift
WARNING: shift/reduce conflict for EQ in state 59 resolved as shift
WARNING: shift/reduce conflict for GT in state 59 resolved as shift
WARNING: shift/reduce conflict for LT in state 59 resolved as shift
WARNING: shift/reduce conflict for GE in state 59 resolved as shift
WARNING: shift/reduce conflict for LE in state 59 resolved as shift
WARNING: shift/reduce conflict for NE in state 59 resolved as shift
WARNING: shift/reduce conflict for IN in state 59 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 60 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 60 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 60 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 60 resolved as shift
WARNING: shift/reduce conflict for POWER in state 60 resolved as shift
WARNING: shift/reduce conflict for EQ in state 60 resolved as shift
WARNING: shift/reduce conflict for GT in state 60 resolved as shift
WARNING: shift/reduce conflict for LT in state 60 resolved as shift
WARNING: shift/reduce conflict for GE in state 60 resolved as shift
WARNING: shift/reduce conflict for LE in state 60 resolved as shift
WARNING: shift/reduce conflict for NE in state 60 resolved as shift
WARNING: shift/reduce conflict for IN in state 60 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 61 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 61 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 61 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 61 resolved as shift
WARNING: shift/reduce conflict for POWER in state 61 resolved as shift
WARNING: shift/reduce conflict for EQ in state 61 resolved as shift
WARNING: shift/reduce conflict for GT in state 61 resolved as shift
WARNING: shift/reduce conflict for LT in state 61 resolved as shift
WARNING: shift/reduce conflict for GE in state 61 resolved as shift
WARNING: shift/reduce conflict for LE in state 61 resolved as shift
WARNING: shift/reduce conflict for NE in state 61 resolved as shift
WARNING: shift/reduce conflict for IN in state 61 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 62 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 62 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 62 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 62 resolved as shift
WARNING: shift/reduce conflict for POWER in state 62 resolved as shift
WARNING: shift/reduce conflict for EQ in state 62 resolved as shift
WARNING: shift/reduce conflict for GT in state 62 resolved as shift
WARNING: shift/reduce conflict for LT in state 62 resolved as shift
WARNING: shift/reduce conflict for GE in state 62 resolved as shift
WARNING: shift/reduce conflict for LE in state 62 resolved as shift
WARNING: shift/reduce conflict for NE in state 62 resolved as shift
WARNING: shift/reduce conflict for IN in state 62 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 63 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 63 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 63 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 63 resolved as shift
WARNING: shift/reduce conflict for POWER in state 63 resolved as shift
WARNING: shift/reduce conflict for EQ in state 63 resolved as shift
WARNING: shift/reduce conflict for GT in state 63 resolved as shift
WARNING: shift/reduce conflict for LT in state 63 resolved as shift
WARNING: shift/reduce conflict for GE in state 63 resolved as shift
WARNING: shift/reduce conflict for LE in state 63 resolved as shift
WARNING: shift/reduce conflict for NE in state 63 resolved as shift
WARNING: shift/reduce conflict for IN in state 63 resolved as shift
WARNING: shift/reduce conflict for AND in state 65 resolved as shift
WARNING: shift/reduce conflict for OR in state 65 resolved as shift
WARNING: shift/reduce conflict for AND in state 67 resolved as shift
WARNING: shift/reduce conflict for OR in state 67 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 77 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 77 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 77 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 77 resolved as shift
WARNING: shift/reduce conflict for POWER in state 77 resolved as shift
WARNING: shift/reduce conflict for EQ in state 77 resolved as shift
WARNING: shift/reduce conflict for GT in state 77 resolved as shift
WARNING: shift/reduce conflict for LT in state 77 resolved as shift
WARNING: shift/reduce conflict for GE in state 77 resolved as shift
WARNING: shift/reduce conflict for LE in state 77 resolved as shift
WARNING: shift/reduce conflict for NE in state 77 resolved as shift
WARNING: shift/reduce conflict for IN in state 77 resolved as shift
WARNING: reduce/reduce conflict in state 65 resolved using rule (comp_expr -> comp_expr AND comp_expr)
WARNING: rejected rule (expression -> comp_expr) in state 65
WARNING: reduce/reduce conflict in state 67 resolved using rule (comp_expr -> comp_expr OR comp_expr)
WARNING: rejected rule (expression -> comp_expr) in state 67
