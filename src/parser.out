Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ELSEIF
    RETURN

Grammar

Rule 0     S' -> statements
Rule 1     statements -> statement
Rule 2     statements -> statements statement
Rule 3     end_statement -> END
Rule 4     statement -> OUTPUT expression
Rule 5     statement -> OUTPUT ask
Rule 6     ask -> TEXT EXPECTING INPUT AND DATATYPE
Rule 7     random_statement -> RANDOM DATATYPE FROM expression TO expression
Rule 8     var_assignment -> SET IDENTIFIER
Rule 9     statement -> var_assignment TO expression
Rule 10    statement -> var_assignment
Rule 11    statement -> var_assignment TO ask
Rule 12    statement -> var_assignment TO items type_stmt
Rule 13    if_then -> IF expression THEN statements
Rule 14    statement -> if_then end_statement
Rule 15    statement -> if_then ELSE THEN statements end_statement
Rule 16    statement -> REPEAT statements UNTIL expression
Rule 17    statement -> PAUSE expression
Rule 18    type_stmt -> TYPE DATATYPE
Rule 19    statement -> FUNCTION IDENTIFIER MEANS statements end_statement
Rule 20    statement -> WHILE expression DO statements end_statement
Rule 21    statement -> FOREVER DO statements end_statement
Rule 22    statement -> EXIT LOOP
Rule 23    expression -> DATATYPE FROM expression TO expression FROM expression
Rule 24    expression -> LENGTH OF expression
Rule 25    expression -> FIND OCCURENCES OF expression IN expression
Rule 26    items -> expression
Rule 27    items -> items expression
Rule 28    expression -> expression PLUS expression
Rule 29    expression -> expression MINUS expression
Rule 30    expression -> expression TIMES expression
Rule 31    expression -> expression DIVIDE expression
Rule 32    expression -> expression POWER expression
Rule 33    expression -> LPAREN expression RPAREN
Rule 34    expression -> YES
Rule 35    expression -> NO
Rule 36    comp_expr -> expression EQ expression
Rule 37    comp_expr -> expression GT expression
Rule 38    comp_expr -> expression LT expression
Rule 39    comp_expr -> expression GE expression
Rule 40    comp_expr -> expression LE expression
Rule 41    comp_expr -> expression NE expression
Rule 42    comp_expr -> comp_expr AND comp_expr
Rule 43    comp_expr -> comp_expr OR comp_expr
Rule 44    comp_expr -> NOT expression
Rule 45    comp_expr -> expression IN expression
Rule 46    expression -> comp_expr
Rule 47    expression -> NUMBER
Rule 48    expression -> IDENTIFIER
Rule 49    expression -> random_statement
Rule 50    expression -> TEXT
Rule 51    expression -> INPUT

Terminals, with rules where they appear

AND                  : 6 42
DATATYPE             : 6 7 18 23
DIVIDE               : 31
DO                   : 20 21
ELSE                 : 15
ELSEIF               : 
END                  : 3
EQ                   : 36
EXIT                 : 22
EXPECTING            : 6
FIND                 : 25
FOREVER              : 21
FROM                 : 7 23 23
FUNCTION             : 19
GE                   : 39
GT                   : 37
IDENTIFIER           : 8 19 48
IF                   : 13
IN                   : 25 45
INPUT                : 6 51
LE                   : 40
LENGTH               : 24
LOOP                 : 22
LPAREN               : 33
LT                   : 38
MEANS                : 19
MINUS                : 29
NE                   : 41
NO                   : 35
NOT                  : 44
NUMBER               : 47
OCCURENCES           : 25
OF                   : 24 25
OR                   : 43
OUTPUT               : 4 5
PAUSE                : 17
PLUS                 : 28
POWER                : 32
RANDOM               : 7
REPEAT               : 16
RETURN               : 
RPAREN               : 33
SET                  : 8
TEXT                 : 6 50
THEN                 : 13 15
TIMES                : 30
TO                   : 7 9 11 12 23
TYPE                 : 18
UNTIL                : 16
WHILE                : 20
YES                  : 34
error                : 

Nonterminals, with rules where they appear

ask                  : 5 11
comp_expr            : 42 42 43 43 46
end_statement        : 14 15 19 20 21
expression           : 4 7 7 9 13 16 17 20 23 23 23 24 25 25 26 27 28 28 29 29 30 30 31 31 32 32 33 36 36 37 37 38 38 39 39 40 40 41 41 44 45 45
if_then              : 14 15
items                : 12 27
random_statement     : 49
statement            : 1 2
statements           : 2 13 15 16 19 20 21 0
type_stmt            : 12
var_assignment       : 9 10 11 12

Parsing method: LALR

state 0

    (0) S' -> . statements
    (1) statements -> . statement
    (2) statements -> . statements statement
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . WHILE expression DO statements end_statement
    (21) statement -> . FOREVER DO statements end_statement
    (22) statement -> . EXIT LOOP
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    FOREVER         shift and go to state 10
    EXIT            shift and go to state 11
    SET             shift and go to state 12
    IF              shift and go to state 13

    statements                     shift and go to state 1
    statement                      shift and go to state 2
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 1

    (0) S' -> statements .
    (2) statements -> statements . statement
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . WHILE expression DO statements end_statement
    (21) statement -> . FOREVER DO statements end_statement
    (22) statement -> . EXIT LOOP
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    FOREVER         shift and go to state 10
    EXIT            shift and go to state 11
    SET             shift and go to state 12
    IF              shift and go to state 13

    statement                      shift and go to state 14
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 2

    (1) statements -> statement .

    OUTPUT          reduce using rule 1 (statements -> statement .)
    REPEAT          reduce using rule 1 (statements -> statement .)
    PAUSE           reduce using rule 1 (statements -> statement .)
    FUNCTION        reduce using rule 1 (statements -> statement .)
    WHILE           reduce using rule 1 (statements -> statement .)
    FOREVER         reduce using rule 1 (statements -> statement .)
    EXIT            reduce using rule 1 (statements -> statement .)
    SET             reduce using rule 1 (statements -> statement .)
    IF              reduce using rule 1 (statements -> statement .)
    $end            reduce using rule 1 (statements -> statement .)
    UNTIL           reduce using rule 1 (statements -> statement .)
    END             reduce using rule 1 (statements -> statement .)
    ELSE            reduce using rule 1 (statements -> statement .)


state 3

    (4) statement -> OUTPUT . expression
    (5) statement -> OUTPUT . ask
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (24) expression -> . LENGTH OF expression
    (25) expression -> . FIND OCCURENCES OF expression IN expression
    (28) expression -> . expression PLUS expression
    (29) expression -> . expression MINUS expression
    (30) expression -> . expression TIMES expression
    (31) expression -> . expression DIVIDE expression
    (32) expression -> . expression POWER expression
    (33) expression -> . LPAREN expression RPAREN
    (34) expression -> . YES
    (35) expression -> . NO
    (46) expression -> . comp_expr
    (47) expression -> . NUMBER
    (48) expression -> . IDENTIFIER
    (49) expression -> . random_statement
    (50) expression -> . TEXT
    (51) expression -> . INPUT
    (6) ask -> . TEXT EXPECTING INPUT AND DATATYPE
    (36) comp_expr -> . expression EQ expression
    (37) comp_expr -> . expression GT expression
    (38) comp_expr -> . expression LT expression
    (39) comp_expr -> . expression GE expression
    (40) comp_expr -> . expression LE expression
    (41) comp_expr -> . expression NE expression
    (42) comp_expr -> . comp_expr AND comp_expr
    (43) comp_expr -> . comp_expr OR comp_expr
    (44) comp_expr -> . NOT expression
    (45) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LENGTH          shift and go to state 18
    FIND            shift and go to state 19
    LPAREN          shift and go to state 20
    YES             shift and go to state 21
    NO              shift and go to state 22
    NUMBER          shift and go to state 24
    IDENTIFIER      shift and go to state 25
    TEXT            shift and go to state 27
    INPUT           shift and go to state 28
    NOT             shift and go to state 29
    RANDOM          shift and go to state 30

    expression                     shift and go to state 15
    ask                            shift and go to state 16
    comp_expr                      shift and go to state 23
    random_statement               shift and go to state 26

state 4

    (9) statement -> var_assignment . TO expression
    (10) statement -> var_assignment .
    (11) statement -> var_assignment . TO ask
    (12) statement -> var_assignment . TO items type_stmt

    TO              shift and go to state 31
    OUTPUT          reduce using rule 10 (statement -> var_assignment .)
    REPEAT          reduce using rule 10 (statement -> var_assignment .)
    PAUSE           reduce using rule 10 (statement -> var_assignment .)
    FUNCTION        reduce using rule 10 (statement -> var_assignment .)
    WHILE           reduce using rule 10 (statement -> var_assignment .)
    FOREVER         reduce using rule 10 (statement -> var_assignment .)
    EXIT            reduce using rule 10 (statement -> var_assignment .)
    SET             reduce using rule 10 (statement -> var_assignment .)
    IF              reduce using rule 10 (statement -> var_assignment .)
    $end            reduce using rule 10 (statement -> var_assignment .)
    UNTIL           reduce using rule 10 (statement -> var_assignment .)
    END             reduce using rule 10 (statement -> var_assignment .)
    ELSE            reduce using rule 10 (statement -> var_assignment .)


state 5

    (14) statement -> if_then . end_statement
    (15) statement -> if_then . ELSE THEN statements end_statement
    (3) end_statement -> . END

    ELSE            shift and go to state 33
    END             shift and go to state 34

    end_statement                  shift and go to state 32

state 6

    (16) statement -> REPEAT . statements UNTIL expression
    (1) statements -> . statement
    (2) statements -> . statements statement
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . WHILE expression DO statements end_statement
    (21) statement -> . FOREVER DO statements end_statement
    (22) statement -> . EXIT LOOP
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    FOREVER         shift and go to state 10
    EXIT            shift and go to state 11
    SET             shift and go to state 12
    IF              shift and go to state 13

    statements                     shift and go to state 35
    statement                      shift and go to state 2
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 7

    (17) statement -> PAUSE . expression
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (24) expression -> . LENGTH OF expression
    (25) expression -> . FIND OCCURENCES OF expression IN expression
    (28) expression -> . expression PLUS expression
    (29) expression -> . expression MINUS expression
    (30) expression -> . expression TIMES expression
    (31) expression -> . expression DIVIDE expression
    (32) expression -> . expression POWER expression
    (33) expression -> . LPAREN expression RPAREN
    (34) expression -> . YES
    (35) expression -> . NO
    (46) expression -> . comp_expr
    (47) expression -> . NUMBER
    (48) expression -> . IDENTIFIER
    (49) expression -> . random_statement
    (50) expression -> . TEXT
    (51) expression -> . INPUT
    (36) comp_expr -> . expression EQ expression
    (37) comp_expr -> . expression GT expression
    (38) comp_expr -> . expression LT expression
    (39) comp_expr -> . expression GE expression
    (40) comp_expr -> . expression LE expression
    (41) comp_expr -> . expression NE expression
    (42) comp_expr -> . comp_expr AND comp_expr
    (43) comp_expr -> . comp_expr OR comp_expr
    (44) comp_expr -> . NOT expression
    (45) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LENGTH          shift and go to state 18
    FIND            shift and go to state 19
    LPAREN          shift and go to state 20
    YES             shift and go to state 21
    NO              shift and go to state 22
    NUMBER          shift and go to state 24
    IDENTIFIER      shift and go to state 25
    TEXT            shift and go to state 37
    INPUT           shift and go to state 28
    NOT             shift and go to state 29
    RANDOM          shift and go to state 30

    expression                     shift and go to state 36
    comp_expr                      shift and go to state 23
    random_statement               shift and go to state 26

state 8

    (19) statement -> FUNCTION . IDENTIFIER MEANS statements end_statement

    IDENTIFIER      shift and go to state 38


state 9

    (20) statement -> WHILE . expression DO statements end_statement
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (24) expression -> . LENGTH OF expression
    (25) expression -> . FIND OCCURENCES OF expression IN expression
    (28) expression -> . expression PLUS expression
    (29) expression -> . expression MINUS expression
    (30) expression -> . expression TIMES expression
    (31) expression -> . expression DIVIDE expression
    (32) expression -> . expression POWER expression
    (33) expression -> . LPAREN expression RPAREN
    (34) expression -> . YES
    (35) expression -> . NO
    (46) expression -> . comp_expr
    (47) expression -> . NUMBER
    (48) expression -> . IDENTIFIER
    (49) expression -> . random_statement
    (50) expression -> . TEXT
    (51) expression -> . INPUT
    (36) comp_expr -> . expression EQ expression
    (37) comp_expr -> . expression GT expression
    (38) comp_expr -> . expression LT expression
    (39) comp_expr -> . expression GE expression
    (40) comp_expr -> . expression LE expression
    (41) comp_expr -> . expression NE expression
    (42) comp_expr -> . comp_expr AND comp_expr
    (43) comp_expr -> . comp_expr OR comp_expr
    (44) comp_expr -> . NOT expression
    (45) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LENGTH          shift and go to state 18
    FIND            shift and go to state 19
    LPAREN          shift and go to state 20
    YES             shift and go to state 21
    NO              shift and go to state 22
    NUMBER          shift and go to state 24
    IDENTIFIER      shift and go to state 25
    TEXT            shift and go to state 37
    INPUT           shift and go to state 28
    NOT             shift and go to state 29
    RANDOM          shift and go to state 30

    expression                     shift and go to state 39
    comp_expr                      shift and go to state 23
    random_statement               shift and go to state 26

state 10

    (21) statement -> FOREVER . DO statements end_statement

    DO              shift and go to state 40


state 11

    (22) statement -> EXIT . LOOP

    LOOP            shift and go to state 41


state 12

    (8) var_assignment -> SET . IDENTIFIER

    IDENTIFIER      shift and go to state 42


state 13

    (13) if_then -> IF . expression THEN statements
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (24) expression -> . LENGTH OF expression
    (25) expression -> . FIND OCCURENCES OF expression IN expression
    (28) expression -> . expression PLUS expression
    (29) expression -> . expression MINUS expression
    (30) expression -> . expression TIMES expression
    (31) expression -> . expression DIVIDE expression
    (32) expression -> . expression POWER expression
    (33) expression -> . LPAREN expression RPAREN
    (34) expression -> . YES
    (35) expression -> . NO
    (46) expression -> . comp_expr
    (47) expression -> . NUMBER
    (48) expression -> . IDENTIFIER
    (49) expression -> . random_statement
    (50) expression -> . TEXT
    (51) expression -> . INPUT
    (36) comp_expr -> . expression EQ expression
    (37) comp_expr -> . expression GT expression
    (38) comp_expr -> . expression LT expression
    (39) comp_expr -> . expression GE expression
    (40) comp_expr -> . expression LE expression
    (41) comp_expr -> . expression NE expression
    (42) comp_expr -> . comp_expr AND comp_expr
    (43) comp_expr -> . comp_expr OR comp_expr
    (44) comp_expr -> . NOT expression
    (45) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LENGTH          shift and go to state 18
    FIND            shift and go to state 19
    LPAREN          shift and go to state 20
    YES             shift and go to state 21
    NO              shift and go to state 22
    NUMBER          shift and go to state 24
    IDENTIFIER      shift and go to state 25
    TEXT            shift and go to state 37
    INPUT           shift and go to state 28
    NOT             shift and go to state 29
    RANDOM          shift and go to state 30

    expression                     shift and go to state 43
    comp_expr                      shift and go to state 23
    random_statement               shift and go to state 26

state 14

    (2) statements -> statements statement .

    OUTPUT          reduce using rule 2 (statements -> statements statement .)
    REPEAT          reduce using rule 2 (statements -> statements statement .)
    PAUSE           reduce using rule 2 (statements -> statements statement .)
    FUNCTION        reduce using rule 2 (statements -> statements statement .)
    WHILE           reduce using rule 2 (statements -> statements statement .)
    FOREVER         reduce using rule 2 (statements -> statements statement .)
    EXIT            reduce using rule 2 (statements -> statements statement .)
    SET             reduce using rule 2 (statements -> statements statement .)
    IF              reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)
    UNTIL           reduce using rule 2 (statements -> statements statement .)
    END             reduce using rule 2 (statements -> statements statement .)
    ELSE            reduce using rule 2 (statements -> statements statement .)


state 15

    (4) statement -> OUTPUT expression .
    (28) expression -> expression . PLUS expression
    (29) expression -> expression . MINUS expression
    (30) expression -> expression . TIMES expression
    (31) expression -> expression . DIVIDE expression
    (32) expression -> expression . POWER expression
    (36) comp_expr -> expression . EQ expression
    (37) comp_expr -> expression . GT expression
    (38) comp_expr -> expression . LT expression
    (39) comp_expr -> expression . GE expression
    (40) comp_expr -> expression . LE expression
    (41) comp_expr -> expression . NE expression
    (45) comp_expr -> expression . IN expression

    OUTPUT          reduce using rule 4 (statement -> OUTPUT expression .)
    REPEAT          reduce using rule 4 (statement -> OUTPUT expression .)
    PAUSE           reduce using rule 4 (statement -> OUTPUT expression .)
    FUNCTION        reduce using rule 4 (statement -> OUTPUT expression .)
    WHILE           reduce using rule 4 (statement -> OUTPUT expression .)
    FOREVER         reduce using rule 4 (statement -> OUTPUT expression .)
    EXIT            reduce using rule 4 (statement -> OUTPUT expression .)
    SET             reduce using rule 4 (statement -> OUTPUT expression .)
    IF              reduce using rule 4 (statement -> OUTPUT expression .)
    $end            reduce using rule 4 (statement -> OUTPUT expression .)
    UNTIL           reduce using rule 4 (statement -> OUTPUT expression .)
    END             reduce using rule 4 (statement -> OUTPUT expression .)
    ELSE            reduce using rule 4 (statement -> OUTPUT expression .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    TIMES           shift and go to state 46
    DIVIDE          shift and go to state 47
    POWER           shift and go to state 48
    EQ              shift and go to state 49
    GT              shift and go to state 50
    LT              shift and go to state 51
    GE              shift and go to state 52
    LE              shift and go to state 53
    NE              shift and go to state 54
    IN              shift and go to state 55


state 16

    (5) statement -> OUTPUT ask .

    OUTPUT          reduce using rule 5 (statement -> OUTPUT ask .)
    REPEAT          reduce using rule 5 (statement -> OUTPUT ask .)
    PAUSE           reduce using rule 5 (statement -> OUTPUT ask .)
    FUNCTION        reduce using rule 5 (statement -> OUTPUT ask .)
    WHILE           reduce using rule 5 (statement -> OUTPUT ask .)
    FOREVER         reduce using rule 5 (statement -> OUTPUT ask .)
    EXIT            reduce using rule 5 (statement -> OUTPUT ask .)
    SET             reduce using rule 5 (statement -> OUTPUT ask .)
    IF              reduce using rule 5 (statement -> OUTPUT ask .)
    $end            reduce using rule 5 (statement -> OUTPUT ask .)
    UNTIL           reduce using rule 5 (statement -> OUTPUT ask .)
    END             reduce using rule 5 (statement -> OUTPUT ask .)
    ELSE            reduce using rule 5 (statement -> OUTPUT ask .)


state 17

    (23) expression -> DATATYPE . FROM expression TO expression FROM expression

    FROM            shift and go to state 56


state 18

    (24) expression -> LENGTH . OF expression

    OF              shift and go to state 57


state 19

    (25) expression -> FIND . OCCURENCES OF expression IN expression

    OCCURENCES      shift and go to state 58


state 20

    (33) expression -> LPAREN . expression RPAREN
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (24) expression -> . LENGTH OF expression
    (25) expression -> . FIND OCCURENCES OF expression IN expression
    (28) expression -> . expression PLUS expression
    (29) expression -> . expression MINUS expression
    (30) expression -> . expression TIMES expression
    (31) expression -> . expression DIVIDE expression
    (32) expression -> . expression POWER expression
    (33) expression -> . LPAREN expression RPAREN
    (34) expression -> . YES
    (35) expression -> . NO
    (46) expression -> . comp_expr
    (47) expression -> . NUMBER
    (48) expression -> . IDENTIFIER
    (49) expression -> . random_statement
    (50) expression -> . TEXT
    (51) expression -> . INPUT
    (36) comp_expr -> . expression EQ expression
    (37) comp_expr -> . expression GT expression
    (38) comp_expr -> . expression LT expression
    (39) comp_expr -> . expression GE expression
    (40) comp_expr -> . expression LE expression
    (41) comp_expr -> . expression NE expression
    (42) comp_expr -> . comp_expr AND comp_expr
    (43) comp_expr -> . comp_expr OR comp_expr
    (44) comp_expr -> . NOT expression
    (45) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LENGTH          shift and go to state 18
    FIND            shift and go to state 19
    LPAREN          shift and go to state 20
    YES             shift and go to state 21
    NO              shift and go to state 22
    NUMBER          shift and go to state 24
    IDENTIFIER      shift and go to state 25
    TEXT            shift and go to state 37
    INPUT           shift and go to state 28
    NOT             shift and go to state 29
    RANDOM          shift and go to state 30

    expression                     shift and go to state 59
    comp_expr                      shift and go to state 23
    random_statement               shift and go to state 26

state 21

    (34) expression -> YES .

    PLUS            reduce using rule 34 (expression -> YES .)
    MINUS           reduce using rule 34 (expression -> YES .)
    TIMES           reduce using rule 34 (expression -> YES .)
    DIVIDE          reduce using rule 34 (expression -> YES .)
    POWER           reduce using rule 34 (expression -> YES .)
    EQ              reduce using rule 34 (expression -> YES .)
    GT              reduce using rule 34 (expression -> YES .)
    LT              reduce using rule 34 (expression -> YES .)
    GE              reduce using rule 34 (expression -> YES .)
    LE              reduce using rule 34 (expression -> YES .)
    NE              reduce using rule 34 (expression -> YES .)
    IN              reduce using rule 34 (expression -> YES .)
    OUTPUT          reduce using rule 34 (expression -> YES .)
    REPEAT          reduce using rule 34 (expression -> YES .)
    PAUSE           reduce using rule 34 (expression -> YES .)
    FUNCTION        reduce using rule 34 (expression -> YES .)
    WHILE           reduce using rule 34 (expression -> YES .)
    FOREVER         reduce using rule 34 (expression -> YES .)
    EXIT            reduce using rule 34 (expression -> YES .)
    SET             reduce using rule 34 (expression -> YES .)
    IF              reduce using rule 34 (expression -> YES .)
    $end            reduce using rule 34 (expression -> YES .)
    UNTIL           reduce using rule 34 (expression -> YES .)
    END             reduce using rule 34 (expression -> YES .)
    ELSE            reduce using rule 34 (expression -> YES .)
    DO              reduce using rule 34 (expression -> YES .)
    THEN            reduce using rule 34 (expression -> YES .)
    RPAREN          reduce using rule 34 (expression -> YES .)
    AND             reduce using rule 34 (expression -> YES .)
    OR              reduce using rule 34 (expression -> YES .)
    TYPE            reduce using rule 34 (expression -> YES .)
    DATATYPE        reduce using rule 34 (expression -> YES .)
    LENGTH          reduce using rule 34 (expression -> YES .)
    FIND            reduce using rule 34 (expression -> YES .)
    LPAREN          reduce using rule 34 (expression -> YES .)
    YES             reduce using rule 34 (expression -> YES .)
    NO              reduce using rule 34 (expression -> YES .)
    NUMBER          reduce using rule 34 (expression -> YES .)
    IDENTIFIER      reduce using rule 34 (expression -> YES .)
    TEXT            reduce using rule 34 (expression -> YES .)
    INPUT           reduce using rule 34 (expression -> YES .)
    NOT             reduce using rule 34 (expression -> YES .)
    RANDOM          reduce using rule 34 (expression -> YES .)
    TO              reduce using rule 34 (expression -> YES .)
    FROM            reduce using rule 34 (expression -> YES .)


state 22

    (35) expression -> NO .

    PLUS            reduce using rule 35 (expression -> NO .)
    MINUS           reduce using rule 35 (expression -> NO .)
    TIMES           reduce using rule 35 (expression -> NO .)
    DIVIDE          reduce using rule 35 (expression -> NO .)
    POWER           reduce using rule 35 (expression -> NO .)
    EQ              reduce using rule 35 (expression -> NO .)
    GT              reduce using rule 35 (expression -> NO .)
    LT              reduce using rule 35 (expression -> NO .)
    GE              reduce using rule 35 (expression -> NO .)
    LE              reduce using rule 35 (expression -> NO .)
    NE              reduce using rule 35 (expression -> NO .)
    IN              reduce using rule 35 (expression -> NO .)
    OUTPUT          reduce using rule 35 (expression -> NO .)
    REPEAT          reduce using rule 35 (expression -> NO .)
    PAUSE           reduce using rule 35 (expression -> NO .)
    FUNCTION        reduce using rule 35 (expression -> NO .)
    WHILE           reduce using rule 35 (expression -> NO .)
    FOREVER         reduce using rule 35 (expression -> NO .)
    EXIT            reduce using rule 35 (expression -> NO .)
    SET             reduce using rule 35 (expression -> NO .)
    IF              reduce using rule 35 (expression -> NO .)
    $end            reduce using rule 35 (expression -> NO .)
    UNTIL           reduce using rule 35 (expression -> NO .)
    END             reduce using rule 35 (expression -> NO .)
    ELSE            reduce using rule 35 (expression -> NO .)
    DO              reduce using rule 35 (expression -> NO .)
    THEN            reduce using rule 35 (expression -> NO .)
    RPAREN          reduce using rule 35 (expression -> NO .)
    AND             reduce using rule 35 (expression -> NO .)
    OR              reduce using rule 35 (expression -> NO .)
    TYPE            reduce using rule 35 (expression -> NO .)
    DATATYPE        reduce using rule 35 (expression -> NO .)
    LENGTH          reduce using rule 35 (expression -> NO .)
    FIND            reduce using rule 35 (expression -> NO .)
    LPAREN          reduce using rule 35 (expression -> NO .)
    YES             reduce using rule 35 (expression -> NO .)
    NO              reduce using rule 35 (expression -> NO .)
    NUMBER          reduce using rule 35 (expression -> NO .)
    IDENTIFIER      reduce using rule 35 (expression -> NO .)
    TEXT            reduce using rule 35 (expression -> NO .)
    INPUT           reduce using rule 35 (expression -> NO .)
    NOT             reduce using rule 35 (expression -> NO .)
    RANDOM          reduce using rule 35 (expression -> NO .)
    TO              reduce using rule 35 (expression -> NO .)
    FROM            reduce using rule 35 (expression -> NO .)


state 23

    (46) expression -> comp_expr .
    (42) comp_expr -> comp_expr . AND comp_expr
    (43) comp_expr -> comp_expr . OR comp_expr

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    PLUS            reduce using rule 46 (expression -> comp_expr .)
    MINUS           reduce using rule 46 (expression -> comp_expr .)
    TIMES           reduce using rule 46 (expression -> comp_expr .)
    DIVIDE          reduce using rule 46 (expression -> comp_expr .)
    POWER           reduce using rule 46 (expression -> comp_expr .)
    EQ              reduce using rule 46 (expression -> comp_expr .)
    GT              reduce using rule 46 (expression -> comp_expr .)
    LT              reduce using rule 46 (expression -> comp_expr .)
    GE              reduce using rule 46 (expression -> comp_expr .)
    LE              reduce using rule 46 (expression -> comp_expr .)
    NE              reduce using rule 46 (expression -> comp_expr .)
    IN              reduce using rule 46 (expression -> comp_expr .)
    OUTPUT          reduce using rule 46 (expression -> comp_expr .)
    REPEAT          reduce using rule 46 (expression -> comp_expr .)
    PAUSE           reduce using rule 46 (expression -> comp_expr .)
    FUNCTION        reduce using rule 46 (expression -> comp_expr .)
    WHILE           reduce using rule 46 (expression -> comp_expr .)
    FOREVER         reduce using rule 46 (expression -> comp_expr .)
    EXIT            reduce using rule 46 (expression -> comp_expr .)
    SET             reduce using rule 46 (expression -> comp_expr .)
    IF              reduce using rule 46 (expression -> comp_expr .)
    $end            reduce using rule 46 (expression -> comp_expr .)
    UNTIL           reduce using rule 46 (expression -> comp_expr .)
    END             reduce using rule 46 (expression -> comp_expr .)
    ELSE            reduce using rule 46 (expression -> comp_expr .)
    DO              reduce using rule 46 (expression -> comp_expr .)
    THEN            reduce using rule 46 (expression -> comp_expr .)
    RPAREN          reduce using rule 46 (expression -> comp_expr .)
    TYPE            reduce using rule 46 (expression -> comp_expr .)
    DATATYPE        reduce using rule 46 (expression -> comp_expr .)
    LENGTH          reduce using rule 46 (expression -> comp_expr .)
    FIND            reduce using rule 46 (expression -> comp_expr .)
    LPAREN          reduce using rule 46 (expression -> comp_expr .)
    YES             reduce using rule 46 (expression -> comp_expr .)
    NO              reduce using rule 46 (expression -> comp_expr .)
    NUMBER          reduce using rule 46 (expression -> comp_expr .)
    IDENTIFIER      reduce using rule 46 (expression -> comp_expr .)
    TEXT            reduce using rule 46 (expression -> comp_expr .)
    INPUT           reduce using rule 46 (expression -> comp_expr .)
    NOT             reduce using rule 46 (expression -> comp_expr .)
    RANDOM          reduce using rule 46 (expression -> comp_expr .)
    TO              reduce using rule 46 (expression -> comp_expr .)
    FROM            reduce using rule 46 (expression -> comp_expr .)
    AND             shift and go to state 60
    OR              shift and go to state 61

  ! AND             [ reduce using rule 46 (expression -> comp_expr .) ]
  ! OR              [ reduce using rule 46 (expression -> comp_expr .) ]


state 24

    (47) expression -> NUMBER .

    PLUS            reduce using rule 47 (expression -> NUMBER .)
    MINUS           reduce using rule 47 (expression -> NUMBER .)
    TIMES           reduce using rule 47 (expression -> NUMBER .)
    DIVIDE          reduce using rule 47 (expression -> NUMBER .)
    POWER           reduce using rule 47 (expression -> NUMBER .)
    EQ              reduce using rule 47 (expression -> NUMBER .)
    GT              reduce using rule 47 (expression -> NUMBER .)
    LT              reduce using rule 47 (expression -> NUMBER .)
    GE              reduce using rule 47 (expression -> NUMBER .)
    LE              reduce using rule 47 (expression -> NUMBER .)
    NE              reduce using rule 47 (expression -> NUMBER .)
    IN              reduce using rule 47 (expression -> NUMBER .)
    OUTPUT          reduce using rule 47 (expression -> NUMBER .)
    REPEAT          reduce using rule 47 (expression -> NUMBER .)
    PAUSE           reduce using rule 47 (expression -> NUMBER .)
    FUNCTION        reduce using rule 47 (expression -> NUMBER .)
    WHILE           reduce using rule 47 (expression -> NUMBER .)
    FOREVER         reduce using rule 47 (expression -> NUMBER .)
    EXIT            reduce using rule 47 (expression -> NUMBER .)
    SET             reduce using rule 47 (expression -> NUMBER .)
    IF              reduce using rule 47 (expression -> NUMBER .)
    $end            reduce using rule 47 (expression -> NUMBER .)
    UNTIL           reduce using rule 47 (expression -> NUMBER .)
    END             reduce using rule 47 (expression -> NUMBER .)
    ELSE            reduce using rule 47 (expression -> NUMBER .)
    DO              reduce using rule 47 (expression -> NUMBER .)
    THEN            reduce using rule 47 (expression -> NUMBER .)
    RPAREN          reduce using rule 47 (expression -> NUMBER .)
    AND             reduce using rule 47 (expression -> NUMBER .)
    OR              reduce using rule 47 (expression -> NUMBER .)
    TYPE            reduce using rule 47 (expression -> NUMBER .)
    DATATYPE        reduce using rule 47 (expression -> NUMBER .)
    LENGTH          reduce using rule 47 (expression -> NUMBER .)
    FIND            reduce using rule 47 (expression -> NUMBER .)
    LPAREN          reduce using rule 47 (expression -> NUMBER .)
    YES             reduce using rule 47 (expression -> NUMBER .)
    NO              reduce using rule 47 (expression -> NUMBER .)
    NUMBER          reduce using rule 47 (expression -> NUMBER .)
    IDENTIFIER      reduce using rule 47 (expression -> NUMBER .)
    TEXT            reduce using rule 47 (expression -> NUMBER .)
    INPUT           reduce using rule 47 (expression -> NUMBER .)
    NOT             reduce using rule 47 (expression -> NUMBER .)
    RANDOM          reduce using rule 47 (expression -> NUMBER .)
    TO              reduce using rule 47 (expression -> NUMBER .)
    FROM            reduce using rule 47 (expression -> NUMBER .)


state 25

    (48) expression -> IDENTIFIER .

    PLUS            reduce using rule 48 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 48 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 48 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 48 (expression -> IDENTIFIER .)
    POWER           reduce using rule 48 (expression -> IDENTIFIER .)
    EQ              reduce using rule 48 (expression -> IDENTIFIER .)
    GT              reduce using rule 48 (expression -> IDENTIFIER .)
    LT              reduce using rule 48 (expression -> IDENTIFIER .)
    GE              reduce using rule 48 (expression -> IDENTIFIER .)
    LE              reduce using rule 48 (expression -> IDENTIFIER .)
    NE              reduce using rule 48 (expression -> IDENTIFIER .)
    IN              reduce using rule 48 (expression -> IDENTIFIER .)
    OUTPUT          reduce using rule 48 (expression -> IDENTIFIER .)
    REPEAT          reduce using rule 48 (expression -> IDENTIFIER .)
    PAUSE           reduce using rule 48 (expression -> IDENTIFIER .)
    FUNCTION        reduce using rule 48 (expression -> IDENTIFIER .)
    WHILE           reduce using rule 48 (expression -> IDENTIFIER .)
    FOREVER         reduce using rule 48 (expression -> IDENTIFIER .)
    EXIT            reduce using rule 48 (expression -> IDENTIFIER .)
    SET             reduce using rule 48 (expression -> IDENTIFIER .)
    IF              reduce using rule 48 (expression -> IDENTIFIER .)
    $end            reduce using rule 48 (expression -> IDENTIFIER .)
    UNTIL           reduce using rule 48 (expression -> IDENTIFIER .)
    END             reduce using rule 48 (expression -> IDENTIFIER .)
    ELSE            reduce using rule 48 (expression -> IDENTIFIER .)
    DO              reduce using rule 48 (expression -> IDENTIFIER .)
    THEN            reduce using rule 48 (expression -> IDENTIFIER .)
    RPAREN          reduce using rule 48 (expression -> IDENTIFIER .)
    AND             reduce using rule 48 (expression -> IDENTIFIER .)
    OR              reduce using rule 48 (expression -> IDENTIFIER .)
    TYPE            reduce using rule 48 (expression -> IDENTIFIER .)
    DATATYPE        reduce using rule 48 (expression -> IDENTIFIER .)
    LENGTH          reduce using rule 48 (expression -> IDENTIFIER .)
    FIND            reduce using rule 48 (expression -> IDENTIFIER .)
    LPAREN          reduce using rule 48 (expression -> IDENTIFIER .)
    YES             reduce using rule 48 (expression -> IDENTIFIER .)
    NO              reduce using rule 48 (expression -> IDENTIFIER .)
    NUMBER          reduce using rule 48 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 48 (expression -> IDENTIFIER .)
    TEXT            reduce using rule 48 (expression -> IDENTIFIER .)
    INPUT           reduce using rule 48 (expression -> IDENTIFIER .)
    NOT             reduce using rule 48 (expression -> IDENTIFIER .)
    RANDOM          reduce using rule 48 (expression -> IDENTIFIER .)
    TO              reduce using rule 48 (expression -> IDENTIFIER .)
    FROM            reduce using rule 48 (expression -> IDENTIFIER .)


state 26

    (49) expression -> random_statement .

    PLUS            reduce using rule 49 (expression -> random_statement .)
    MINUS           reduce using rule 49 (expression -> random_statement .)
    TIMES           reduce using rule 49 (expression -> random_statement .)
    DIVIDE          reduce using rule 49 (expression -> random_statement .)
    POWER           reduce using rule 49 (expression -> random_statement .)
    EQ              reduce using rule 49 (expression -> random_statement .)
    GT              reduce using rule 49 (expression -> random_statement .)
    LT              reduce using rule 49 (expression -> random_statement .)
    GE              reduce using rule 49 (expression -> random_statement .)
    LE              reduce using rule 49 (expression -> random_statement .)
    NE              reduce using rule 49 (expression -> random_statement .)
    IN              reduce using rule 49 (expression -> random_statement .)
    OUTPUT          reduce using rule 49 (expression -> random_statement .)
    REPEAT          reduce using rule 49 (expression -> random_statement .)
    PAUSE           reduce using rule 49 (expression -> random_statement .)
    FUNCTION        reduce using rule 49 (expression -> random_statement .)
    WHILE           reduce using rule 49 (expression -> random_statement .)
    FOREVER         reduce using rule 49 (expression -> random_statement .)
    EXIT            reduce using rule 49 (expression -> random_statement .)
    SET             reduce using rule 49 (expression -> random_statement .)
    IF              reduce using rule 49 (expression -> random_statement .)
    $end            reduce using rule 49 (expression -> random_statement .)
    UNTIL           reduce using rule 49 (expression -> random_statement .)
    END             reduce using rule 49 (expression -> random_statement .)
    ELSE            reduce using rule 49 (expression -> random_statement .)
    DO              reduce using rule 49 (expression -> random_statement .)
    THEN            reduce using rule 49 (expression -> random_statement .)
    RPAREN          reduce using rule 49 (expression -> random_statement .)
    AND             reduce using rule 49 (expression -> random_statement .)
    OR              reduce using rule 49 (expression -> random_statement .)
    TYPE            reduce using rule 49 (expression -> random_statement .)
    DATATYPE        reduce using rule 49 (expression -> random_statement .)
    LENGTH          reduce using rule 49 (expression -> random_statement .)
    FIND            reduce using rule 49 (expression -> random_statement .)
    LPAREN          reduce using rule 49 (expression -> random_statement .)
    YES             reduce using rule 49 (expression -> random_statement .)
    NO              reduce using rule 49 (expression -> random_statement .)
    NUMBER          reduce using rule 49 (expression -> random_statement .)
    IDENTIFIER      reduce using rule 49 (expression -> random_statement .)
    TEXT            reduce using rule 49 (expression -> random_statement .)
    INPUT           reduce using rule 49 (expression -> random_statement .)
    NOT             reduce using rule 49 (expression -> random_statement .)
    RANDOM          reduce using rule 49 (expression -> random_statement .)
    TO              reduce using rule 49 (expression -> random_statement .)
    FROM            reduce using rule 49 (expression -> random_statement .)


state 27

    (50) expression -> TEXT .
    (6) ask -> TEXT . EXPECTING INPUT AND DATATYPE

    PLUS            reduce using rule 50 (expression -> TEXT .)
    MINUS           reduce using rule 50 (expression -> TEXT .)
    TIMES           reduce using rule 50 (expression -> TEXT .)
    DIVIDE          reduce using rule 50 (expression -> TEXT .)
    POWER           reduce using rule 50 (expression -> TEXT .)
    EQ              reduce using rule 50 (expression -> TEXT .)
    GT              reduce using rule 50 (expression -> TEXT .)
    LT              reduce using rule 50 (expression -> TEXT .)
    GE              reduce using rule 50 (expression -> TEXT .)
    LE              reduce using rule 50 (expression -> TEXT .)
    NE              reduce using rule 50 (expression -> TEXT .)
    IN              reduce using rule 50 (expression -> TEXT .)
    OUTPUT          reduce using rule 50 (expression -> TEXT .)
    REPEAT          reduce using rule 50 (expression -> TEXT .)
    PAUSE           reduce using rule 50 (expression -> TEXT .)
    FUNCTION        reduce using rule 50 (expression -> TEXT .)
    WHILE           reduce using rule 50 (expression -> TEXT .)
    FOREVER         reduce using rule 50 (expression -> TEXT .)
    EXIT            reduce using rule 50 (expression -> TEXT .)
    SET             reduce using rule 50 (expression -> TEXT .)
    IF              reduce using rule 50 (expression -> TEXT .)
    $end            reduce using rule 50 (expression -> TEXT .)
    UNTIL           reduce using rule 50 (expression -> TEXT .)
    END             reduce using rule 50 (expression -> TEXT .)
    ELSE            reduce using rule 50 (expression -> TEXT .)
    TYPE            reduce using rule 50 (expression -> TEXT .)
    DATATYPE        reduce using rule 50 (expression -> TEXT .)
    LENGTH          reduce using rule 50 (expression -> TEXT .)
    FIND            reduce using rule 50 (expression -> TEXT .)
    LPAREN          reduce using rule 50 (expression -> TEXT .)
    YES             reduce using rule 50 (expression -> TEXT .)
    NO              reduce using rule 50 (expression -> TEXT .)
    NUMBER          reduce using rule 50 (expression -> TEXT .)
    IDENTIFIER      reduce using rule 50 (expression -> TEXT .)
    TEXT            reduce using rule 50 (expression -> TEXT .)
    INPUT           reduce using rule 50 (expression -> TEXT .)
    NOT             reduce using rule 50 (expression -> TEXT .)
    RANDOM          reduce using rule 50 (expression -> TEXT .)
    EXPECTING       shift and go to state 62


state 28

    (51) expression -> INPUT .

    PLUS            reduce using rule 51 (expression -> INPUT .)
    MINUS           reduce using rule 51 (expression -> INPUT .)
    TIMES           reduce using rule 51 (expression -> INPUT .)
    DIVIDE          reduce using rule 51 (expression -> INPUT .)
    POWER           reduce using rule 51 (expression -> INPUT .)
    EQ              reduce using rule 51 (expression -> INPUT .)
    GT              reduce using rule 51 (expression -> INPUT .)
    LT              reduce using rule 51 (expression -> INPUT .)
    GE              reduce using rule 51 (expression -> INPUT .)
    LE              reduce using rule 51 (expression -> INPUT .)
    NE              reduce using rule 51 (expression -> INPUT .)
    IN              reduce using rule 51 (expression -> INPUT .)
    OUTPUT          reduce using rule 51 (expression -> INPUT .)
    REPEAT          reduce using rule 51 (expression -> INPUT .)
    PAUSE           reduce using rule 51 (expression -> INPUT .)
    FUNCTION        reduce using rule 51 (expression -> INPUT .)
    WHILE           reduce using rule 51 (expression -> INPUT .)
    FOREVER         reduce using rule 51 (expression -> INPUT .)
    EXIT            reduce using rule 51 (expression -> INPUT .)
    SET             reduce using rule 51 (expression -> INPUT .)
    IF              reduce using rule 51 (expression -> INPUT .)
    $end            reduce using rule 51 (expression -> INPUT .)
    UNTIL           reduce using rule 51 (expression -> INPUT .)
    END             reduce using rule 51 (expression -> INPUT .)
    ELSE            reduce using rule 51 (expression -> INPUT .)
    DO              reduce using rule 51 (expression -> INPUT .)
    THEN            reduce using rule 51 (expression -> INPUT .)
    RPAREN          reduce using rule 51 (expression -> INPUT .)
    AND             reduce using rule 51 (expression -> INPUT .)
    OR              reduce using rule 51 (expression -> INPUT .)
    TYPE            reduce using rule 51 (expression -> INPUT .)
    DATATYPE        reduce using rule 51 (expression -> INPUT .)
    LENGTH          reduce using rule 51 (expression -> INPUT .)
    FIND            reduce using rule 51 (expression -> INPUT .)
    LPAREN          reduce using rule 51 (expression -> INPUT .)
    YES             reduce using rule 51 (expression -> INPUT .)
    NO              reduce using rule 51 (expression -> INPUT .)
    NUMBER          reduce using rule 51 (expression -> INPUT .)
    IDENTIFIER      reduce using rule 51 (expression -> INPUT .)
    TEXT            reduce using rule 51 (expression -> INPUT .)
    INPUT           reduce using rule 51 (expression -> INPUT .)
    NOT             reduce using rule 51 (expression -> INPUT .)
    RANDOM          reduce using rule 51 (expression -> INPUT .)
    TO              reduce using rule 51 (expression -> INPUT .)
    FROM            reduce using rule 51 (expression -> INPUT .)


state 29

    (44) comp_expr -> NOT . expression
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (24) expression -> . LENGTH OF expression
    (25) expression -> . FIND OCCURENCES OF expression IN expression
    (28) expression -> . expression PLUS expression
    (29) expression -> . expression MINUS expression
    (30) expression -> . expression TIMES expression
    (31) expression -> . expression DIVIDE expression
    (32) expression -> . expression POWER expression
    (33) expression -> . LPAREN expression RPAREN
    (34) expression -> . YES
    (35) expression -> . NO
    (46) expression -> . comp_expr
    (47) expression -> . NUMBER
    (48) expression -> . IDENTIFIER
    (49) expression -> . random_statement
    (50) expression -> . TEXT
    (51) expression -> . INPUT
    (36) comp_expr -> . expression EQ expression
    (37) comp_expr -> . expression GT expression
    (38) comp_expr -> . expression LT expression
    (39) comp_expr -> . expression GE expression
    (40) comp_expr -> . expression LE expression
    (41) comp_expr -> . expression NE expression
    (42) comp_expr -> . comp_expr AND comp_expr
    (43) comp_expr -> . comp_expr OR comp_expr
    (44) comp_expr -> . NOT expression
    (45) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LENGTH          shift and go to state 18
    FIND            shift and go to state 19
    LPAREN          shift and go to state 20
    YES             shift and go to state 21
    NO              shift and go to state 22
    NUMBER          shift and go to state 24
    IDENTIFIER      shift and go to state 25
    TEXT            shift and go to state 37
    INPUT           shift and go to state 28
    NOT             shift and go to state 29
    RANDOM          shift and go to state 30

    expression                     shift and go to state 63
    comp_expr                      shift and go to state 23
    random_statement               shift and go to state 26

state 30

    (7) random_statement -> RANDOM . DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 64


state 31

    (9) statement -> var_assignment TO . expression
    (11) statement -> var_assignment TO . ask
    (12) statement -> var_assignment TO . items type_stmt
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (24) expression -> . LENGTH OF expression
    (25) expression -> . FIND OCCURENCES OF expression IN expression
    (28) expression -> . expression PLUS expression
    (29) expression -> . expression MINUS expression
    (30) expression -> . expression TIMES expression
    (31) expression -> . expression DIVIDE expression
    (32) expression -> . expression POWER expression
    (33) expression -> . LPAREN expression RPAREN
    (34) expression -> . YES
    (35) expression -> . NO
    (46) expression -> . comp_expr
    (47) expression -> . NUMBER
    (48) expression -> . IDENTIFIER
    (49) expression -> . random_statement
    (50) expression -> . TEXT
    (51) expression -> . INPUT
    (6) ask -> . TEXT EXPECTING INPUT AND DATATYPE
    (26) items -> . expression
    (27) items -> . items expression
    (36) comp_expr -> . expression EQ expression
    (37) comp_expr -> . expression GT expression
    (38) comp_expr -> . expression LT expression
    (39) comp_expr -> . expression GE expression
    (40) comp_expr -> . expression LE expression
    (41) comp_expr -> . expression NE expression
    (42) comp_expr -> . comp_expr AND comp_expr
    (43) comp_expr -> . comp_expr OR comp_expr
    (44) comp_expr -> . NOT expression
    (45) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LENGTH          shift and go to state 18
    FIND            shift and go to state 19
    LPAREN          shift and go to state 20
    YES             shift and go to state 21
    NO              shift and go to state 22
    NUMBER          shift and go to state 24
    IDENTIFIER      shift and go to state 25
    TEXT            shift and go to state 27
    INPUT           shift and go to state 28
    NOT             shift and go to state 29
    RANDOM          shift and go to state 30

    expression                     shift and go to state 65
    ask                            shift and go to state 66
    items                          shift and go to state 67
    comp_expr                      shift and go to state 23
    random_statement               shift and go to state 26

state 32

    (14) statement -> if_then end_statement .

    OUTPUT          reduce using rule 14 (statement -> if_then end_statement .)
    REPEAT          reduce using rule 14 (statement -> if_then end_statement .)
    PAUSE           reduce using rule 14 (statement -> if_then end_statement .)
    FUNCTION        reduce using rule 14 (statement -> if_then end_statement .)
    WHILE           reduce using rule 14 (statement -> if_then end_statement .)
    FOREVER         reduce using rule 14 (statement -> if_then end_statement .)
    EXIT            reduce using rule 14 (statement -> if_then end_statement .)
    SET             reduce using rule 14 (statement -> if_then end_statement .)
    IF              reduce using rule 14 (statement -> if_then end_statement .)
    $end            reduce using rule 14 (statement -> if_then end_statement .)
    UNTIL           reduce using rule 14 (statement -> if_then end_statement .)
    END             reduce using rule 14 (statement -> if_then end_statement .)
    ELSE            reduce using rule 14 (statement -> if_then end_statement .)


state 33

    (15) statement -> if_then ELSE . THEN statements end_statement

    THEN            shift and go to state 68


state 34

    (3) end_statement -> END .

    OUTPUT          reduce using rule 3 (end_statement -> END .)
    REPEAT          reduce using rule 3 (end_statement -> END .)
    PAUSE           reduce using rule 3 (end_statement -> END .)
    FUNCTION        reduce using rule 3 (end_statement -> END .)
    WHILE           reduce using rule 3 (end_statement -> END .)
    FOREVER         reduce using rule 3 (end_statement -> END .)
    EXIT            reduce using rule 3 (end_statement -> END .)
    SET             reduce using rule 3 (end_statement -> END .)
    IF              reduce using rule 3 (end_statement -> END .)
    $end            reduce using rule 3 (end_statement -> END .)
    UNTIL           reduce using rule 3 (end_statement -> END .)
    END             reduce using rule 3 (end_statement -> END .)
    ELSE            reduce using rule 3 (end_statement -> END .)


state 35

    (16) statement -> REPEAT statements . UNTIL expression
    (2) statements -> statements . statement
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . WHILE expression DO statements end_statement
    (21) statement -> . FOREVER DO statements end_statement
    (22) statement -> . EXIT LOOP
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    UNTIL           shift and go to state 69
    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    FOREVER         shift and go to state 10
    EXIT            shift and go to state 11
    SET             shift and go to state 12
    IF              shift and go to state 13

    statement                      shift and go to state 14
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 36

    (17) statement -> PAUSE expression .
    (28) expression -> expression . PLUS expression
    (29) expression -> expression . MINUS expression
    (30) expression -> expression . TIMES expression
    (31) expression -> expression . DIVIDE expression
    (32) expression -> expression . POWER expression
    (36) comp_expr -> expression . EQ expression
    (37) comp_expr -> expression . GT expression
    (38) comp_expr -> expression . LT expression
    (39) comp_expr -> expression . GE expression
    (40) comp_expr -> expression . LE expression
    (41) comp_expr -> expression . NE expression
    (45) comp_expr -> expression . IN expression

    OUTPUT          reduce using rule 17 (statement -> PAUSE expression .)
    REPEAT          reduce using rule 17 (statement -> PAUSE expression .)
    PAUSE           reduce using rule 17 (statement -> PAUSE expression .)
    FUNCTION        reduce using rule 17 (statement -> PAUSE expression .)
    WHILE           reduce using rule 17 (statement -> PAUSE expression .)
    FOREVER         reduce using rule 17 (statement -> PAUSE expression .)
    EXIT            reduce using rule 17 (statement -> PAUSE expression .)
    SET             reduce using rule 17 (statement -> PAUSE expression .)
    IF              reduce using rule 17 (statement -> PAUSE expression .)
    $end            reduce using rule 17 (statement -> PAUSE expression .)
    UNTIL           reduce using rule 17 (statement -> PAUSE expression .)
    END             reduce using rule 17 (statement -> PAUSE expression .)
    ELSE            reduce using rule 17 (statement -> PAUSE expression .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    TIMES           shift and go to state 46
    DIVIDE          shift and go to state 47
    POWER           shift and go to state 48
    EQ              shift and go to state 49
    GT              shift and go to state 50
    LT              shift and go to state 51
    GE              shift and go to state 52
    LE              shift and go to state 53
    NE              shift and go to state 54
    IN              shift and go to state 55


state 37

    (50) expression -> TEXT .

    PLUS            reduce using rule 50 (expression -> TEXT .)
    MINUS           reduce using rule 50 (expression -> TEXT .)
    TIMES           reduce using rule 50 (expression -> TEXT .)
    DIVIDE          reduce using rule 50 (expression -> TEXT .)
    POWER           reduce using rule 50 (expression -> TEXT .)
    EQ              reduce using rule 50 (expression -> TEXT .)
    GT              reduce using rule 50 (expression -> TEXT .)
    LT              reduce using rule 50 (expression -> TEXT .)
    GE              reduce using rule 50 (expression -> TEXT .)
    LE              reduce using rule 50 (expression -> TEXT .)
    NE              reduce using rule 50 (expression -> TEXT .)
    IN              reduce using rule 50 (expression -> TEXT .)
    OUTPUT          reduce using rule 50 (expression -> TEXT .)
    REPEAT          reduce using rule 50 (expression -> TEXT .)
    PAUSE           reduce using rule 50 (expression -> TEXT .)
    FUNCTION        reduce using rule 50 (expression -> TEXT .)
    WHILE           reduce using rule 50 (expression -> TEXT .)
    FOREVER         reduce using rule 50 (expression -> TEXT .)
    EXIT            reduce using rule 50 (expression -> TEXT .)
    SET             reduce using rule 50 (expression -> TEXT .)
    IF              reduce using rule 50 (expression -> TEXT .)
    $end            reduce using rule 50 (expression -> TEXT .)
    UNTIL           reduce using rule 50 (expression -> TEXT .)
    END             reduce using rule 50 (expression -> TEXT .)
    ELSE            reduce using rule 50 (expression -> TEXT .)
    DO              reduce using rule 50 (expression -> TEXT .)
    THEN            reduce using rule 50 (expression -> TEXT .)
    RPAREN          reduce using rule 50 (expression -> TEXT .)
    AND             reduce using rule 50 (expression -> TEXT .)
    OR              reduce using rule 50 (expression -> TEXT .)
    TYPE            reduce using rule 50 (expression -> TEXT .)
    DATATYPE        reduce using rule 50 (expression -> TEXT .)
    LENGTH          reduce using rule 50 (expression -> TEXT .)
    FIND            reduce using rule 50 (expression -> TEXT .)
    LPAREN          reduce using rule 50 (expression -> TEXT .)
    YES             reduce using rule 50 (expression -> TEXT .)
    NO              reduce using rule 50 (expression -> TEXT .)
    NUMBER          reduce using rule 50 (expression -> TEXT .)
    IDENTIFIER      reduce using rule 50 (expression -> TEXT .)
    TEXT            reduce using rule 50 (expression -> TEXT .)
    INPUT           reduce using rule 50 (expression -> TEXT .)
    NOT             reduce using rule 50 (expression -> TEXT .)
    RANDOM          reduce using rule 50 (expression -> TEXT .)
    TO              reduce using rule 50 (expression -> TEXT .)
    FROM            reduce using rule 50 (expression -> TEXT .)


state 38

    (19) statement -> FUNCTION IDENTIFIER . MEANS statements end_statement

    MEANS           shift and go to state 70


state 39

    (20) statement -> WHILE expression . DO statements end_statement
    (28) expression -> expression . PLUS expression
    (29) expression -> expression . MINUS expression
    (30) expression -> expression . TIMES expression
    (31) expression -> expression . DIVIDE expression
    (32) expression -> expression . POWER expression
    (36) comp_expr -> expression . EQ expression
    (37) comp_expr -> expression . GT expression
    (38) comp_expr -> expression . LT expression
    (39) comp_expr -> expression . GE expression
    (40) comp_expr -> expression . LE expression
    (41) comp_expr -> expression . NE expression
    (45) comp_expr -> expression . IN expression

    DO              shift and go to state 71
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    TIMES           shift and go to state 46
    DIVIDE          shift and go to state 47
    POWER           shift and go to state 48
    EQ              shift and go to state 49
    GT              shift and go to state 50
    LT              shift and go to state 51
    GE              shift and go to state 52
    LE              shift and go to state 53
    NE              shift and go to state 54
    IN              shift and go to state 55


state 40

    (21) statement -> FOREVER DO . statements end_statement
    (1) statements -> . statement
    (2) statements -> . statements statement
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . WHILE expression DO statements end_statement
    (21) statement -> . FOREVER DO statements end_statement
    (22) statement -> . EXIT LOOP
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    FOREVER         shift and go to state 10
    EXIT            shift and go to state 11
    SET             shift and go to state 12
    IF              shift and go to state 13

    statements                     shift and go to state 72
    statement                      shift and go to state 2
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 41

    (22) statement -> EXIT LOOP .

    OUTPUT          reduce using rule 22 (statement -> EXIT LOOP .)
    REPEAT          reduce using rule 22 (statement -> EXIT LOOP .)
    PAUSE           reduce using rule 22 (statement -> EXIT LOOP .)
    FUNCTION        reduce using rule 22 (statement -> EXIT LOOP .)
    WHILE           reduce using rule 22 (statement -> EXIT LOOP .)
    FOREVER         reduce using rule 22 (statement -> EXIT LOOP .)
    EXIT            reduce using rule 22 (statement -> EXIT LOOP .)
    SET             reduce using rule 22 (statement -> EXIT LOOP .)
    IF              reduce using rule 22 (statement -> EXIT LOOP .)
    $end            reduce using rule 22 (statement -> EXIT LOOP .)
    UNTIL           reduce using rule 22 (statement -> EXIT LOOP .)
    END             reduce using rule 22 (statement -> EXIT LOOP .)
    ELSE            reduce using rule 22 (statement -> EXIT LOOP .)


state 42

    (8) var_assignment -> SET IDENTIFIER .

    TO              reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    OUTPUT          reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    REPEAT          reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    PAUSE           reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    FUNCTION        reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    WHILE           reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    FOREVER         reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    EXIT            reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    SET             reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    IF              reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    $end            reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    UNTIL           reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    END             reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    ELSE            reduce using rule 8 (var_assignment -> SET IDENTIFIER .)


state 43

    (13) if_then -> IF expression . THEN statements
    (28) expression -> expression . PLUS expression
    (29) expression -> expression . MINUS expression
    (30) expression -> expression . TIMES expression
    (31) expression -> expression . DIVIDE expression
    (32) expression -> expression . POWER expression
    (36) comp_expr -> expression . EQ expression
    (37) comp_expr -> expression . GT expression
    (38) comp_expr -> expression . LT expression
    (39) comp_expr -> expression . GE expression
    (40) comp_expr -> expression . LE expression
    (41) comp_expr -> expression . NE expression
    (45) comp_expr -> expression . IN expression

    THEN            shift and go to state 73
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    TIMES           shift and go to state 46
    DIVIDE          shift and go to state 47
    POWER           shift and go to state 48
    EQ              shift and go to state 49
    GT              shift and go to state 50
    LT              shift and go to state 51
    GE              shift and go to state 52
    LE              shift and go to state 53
    NE              shift and go to state 54
    IN              shift and go to state 55


state 44

    (28) expression -> expression PLUS . expression
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (24) expression -> . LENGTH OF expression
    (25) expression -> . FIND OCCURENCES OF expression IN expression
    (28) expression -> . expression PLUS expression
    (29) expression -> . expression MINUS expression
    (30) expression -> . expression TIMES expression
    (31) expression -> . expression DIVIDE expression
    (32) expression -> . expression POWER expression
    (33) expression -> . LPAREN expression RPAREN
    (34) expression -> . YES
    (35) expression -> . NO
    (46) expression -> . comp_expr
    (47) expression -> . NUMBER
    (48) expression -> . IDENTIFIER
    (49) expression -> . random_statement
    (50) expression -> . TEXT
    (51) expression -> . INPUT
    (36) comp_expr -> . expression EQ expression
    (37) comp_expr -> . expression GT expression
    (38) comp_expr -> . expression LT expression
    (39) comp_expr -> . expression GE expression
    (40) comp_expr -> . expression LE expression
    (41) comp_expr -> . expression NE expression
    (42) comp_expr -> . comp_expr AND comp_expr
    (43) comp_expr -> . comp_expr OR comp_expr
    (44) comp_expr -> . NOT expression
    (45) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LENGTH          shift and go to state 18
    FIND            shift and go to state 19
    LPAREN          shift and go to state 20
    YES             shift and go to state 21
    NO              shift and go to state 22
    NUMBER          shift and go to state 24
    IDENTIFIER      shift and go to state 25
    TEXT            shift and go to state 37
    INPUT           shift and go to state 28
    NOT             shift and go to state 29
    RANDOM          shift and go to state 30

    expression                     shift and go to state 74
    comp_expr                      shift and go to state 23
    random_statement               shift and go to state 26

state 45

    (29) expression -> expression MINUS . expression
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (24) expression -> . LENGTH OF expression
    (25) expression -> . FIND OCCURENCES OF expression IN expression
    (28) expression -> . expression PLUS expression
    (29) expression -> . expression MINUS expression
    (30) expression -> . expression TIMES expression
    (31) expression -> . expression DIVIDE expression
    (32) expression -> . expression POWER expression
    (33) expression -> . LPAREN expression RPAREN
    (34) expression -> . YES
    (35) expression -> . NO
    (46) expression -> . comp_expr
    (47) expression -> . NUMBER
    (48) expression -> . IDENTIFIER
    (49) expression -> . random_statement
    (50) expression -> . TEXT
    (51) expression -> . INPUT
    (36) comp_expr -> . expression EQ expression
    (37) comp_expr -> . expression GT expression
    (38) comp_expr -> . expression LT expression
    (39) comp_expr -> . expression GE expression
    (40) comp_expr -> . expression LE expression
    (41) comp_expr -> . expression NE expression
    (42) comp_expr -> . comp_expr AND comp_expr
    (43) comp_expr -> . comp_expr OR comp_expr
    (44) comp_expr -> . NOT expression
    (45) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LENGTH          shift and go to state 18
    FIND            shift and go to state 19
    LPAREN          shift and go to state 20
    YES             shift and go to state 21
    NO              shift and go to state 22
    NUMBER          shift and go to state 24
    IDENTIFIER      shift and go to state 25
    TEXT            shift and go to state 37
    INPUT           shift and go to state 28
    NOT             shift and go to state 29
    RANDOM          shift and go to state 30

    expression                     shift and go to state 75
    comp_expr                      shift and go to state 23
    random_statement               shift and go to state 26

state 46

    (30) expression -> expression TIMES . expression
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (24) expression -> . LENGTH OF expression
    (25) expression -> . FIND OCCURENCES OF expression IN expression
    (28) expression -> . expression PLUS expression
    (29) expression -> . expression MINUS expression
    (30) expression -> . expression TIMES expression
    (31) expression -> . expression DIVIDE expression
    (32) expression -> . expression POWER expression
    (33) expression -> . LPAREN expression RPAREN
    (34) expression -> . YES
    (35) expression -> . NO
    (46) expression -> . comp_expr
    (47) expression -> . NUMBER
    (48) expression -> . IDENTIFIER
    (49) expression -> . random_statement
    (50) expression -> . TEXT
    (51) expression -> . INPUT
    (36) comp_expr -> . expression EQ expression
    (37) comp_expr -> . expression GT expression
    (38) comp_expr -> . expression LT expression
    (39) comp_expr -> . expression GE expression
    (40) comp_expr -> . expression LE expression
    (41) comp_expr -> . expression NE expression
    (42) comp_expr -> . comp_expr AND comp_expr
    (43) comp_expr -> . comp_expr OR comp_expr
    (44) comp_expr -> . NOT expression
    (45) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LENGTH          shift and go to state 18
    FIND            shift and go to state 19
    LPAREN          shift and go to state 20
    YES             shift and go to state 21
    NO              shift and go to state 22
    NUMBER          shift and go to state 24
    IDENTIFIER      shift and go to state 25
    TEXT            shift and go to state 37
    INPUT           shift and go to state 28
    NOT             shift and go to state 29
    RANDOM          shift and go to state 30

    expression                     shift and go to state 76
    comp_expr                      shift and go to state 23
    random_statement               shift and go to state 26

state 47

    (31) expression -> expression DIVIDE . expression
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (24) expression -> . LENGTH OF expression
    (25) expression -> . FIND OCCURENCES OF expression IN expression
    (28) expression -> . expression PLUS expression
    (29) expression -> . expression MINUS expression
    (30) expression -> . expression TIMES expression
    (31) expression -> . expression DIVIDE expression
    (32) expression -> . expression POWER expression
    (33) expression -> . LPAREN expression RPAREN
    (34) expression -> . YES
    (35) expression -> . NO
    (46) expression -> . comp_expr
    (47) expression -> . NUMBER
    (48) expression -> . IDENTIFIER
    (49) expression -> . random_statement
    (50) expression -> . TEXT
    (51) expression -> . INPUT
    (36) comp_expr -> . expression EQ expression
    (37) comp_expr -> . expression GT expression
    (38) comp_expr -> . expression LT expression
    (39) comp_expr -> . expression GE expression
    (40) comp_expr -> . expression LE expression
    (41) comp_expr -> . expression NE expression
    (42) comp_expr -> . comp_expr AND comp_expr
    (43) comp_expr -> . comp_expr OR comp_expr
    (44) comp_expr -> . NOT expression
    (45) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LENGTH          shift and go to state 18
    FIND            shift and go to state 19
    LPAREN          shift and go to state 20
    YES             shift and go to state 21
    NO              shift and go to state 22
    NUMBER          shift and go to state 24
    IDENTIFIER      shift and go to state 25
    TEXT            shift and go to state 37
    INPUT           shift and go to state 28
    NOT             shift and go to state 29
    RANDOM          shift and go to state 30

    expression                     shift and go to state 77
    comp_expr                      shift and go to state 23
    random_statement               shift and go to state 26

state 48

    (32) expression -> expression POWER . expression
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (24) expression -> . LENGTH OF expression
    (25) expression -> . FIND OCCURENCES OF expression IN expression
    (28) expression -> . expression PLUS expression
    (29) expression -> . expression MINUS expression
    (30) expression -> . expression TIMES expression
    (31) expression -> . expression DIVIDE expression
    (32) expression -> . expression POWER expression
    (33) expression -> . LPAREN expression RPAREN
    (34) expression -> . YES
    (35) expression -> . NO
    (46) expression -> . comp_expr
    (47) expression -> . NUMBER
    (48) expression -> . IDENTIFIER
    (49) expression -> . random_statement
    (50) expression -> . TEXT
    (51) expression -> . INPUT
    (36) comp_expr -> . expression EQ expression
    (37) comp_expr -> . expression GT expression
    (38) comp_expr -> . expression LT expression
    (39) comp_expr -> . expression GE expression
    (40) comp_expr -> . expression LE expression
    (41) comp_expr -> . expression NE expression
    (42) comp_expr -> . comp_expr AND comp_expr
    (43) comp_expr -> . comp_expr OR comp_expr
    (44) comp_expr -> . NOT expression
    (45) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LENGTH          shift and go to state 18
    FIND            shift and go to state 19
    LPAREN          shift and go to state 20
    YES             shift and go to state 21
    NO              shift and go to state 22
    NUMBER          shift and go to state 24
    IDENTIFIER      shift and go to state 25
    TEXT            shift and go to state 37
    INPUT           shift and go to state 28
    NOT             shift and go to state 29
    RANDOM          shift and go to state 30

    expression                     shift and go to state 78
    comp_expr                      shift and go to state 23
    random_statement               shift and go to state 26

state 49

    (36) comp_expr -> expression EQ . expression
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (24) expression -> . LENGTH OF expression
    (25) expression -> . FIND OCCURENCES OF expression IN expression
    (28) expression -> . expression PLUS expression
    (29) expression -> . expression MINUS expression
    (30) expression -> . expression TIMES expression
    (31) expression -> . expression DIVIDE expression
    (32) expression -> . expression POWER expression
    (33) expression -> . LPAREN expression RPAREN
    (34) expression -> . YES
    (35) expression -> . NO
    (46) expression -> . comp_expr
    (47) expression -> . NUMBER
    (48) expression -> . IDENTIFIER
    (49) expression -> . random_statement
    (50) expression -> . TEXT
    (51) expression -> . INPUT
    (36) comp_expr -> . expression EQ expression
    (37) comp_expr -> . expression GT expression
    (38) comp_expr -> . expression LT expression
    (39) comp_expr -> . expression GE expression
    (40) comp_expr -> . expression LE expression
    (41) comp_expr -> . expression NE expression
    (42) comp_expr -> . comp_expr AND comp_expr
    (43) comp_expr -> . comp_expr OR comp_expr
    (44) comp_expr -> . NOT expression
    (45) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LENGTH          shift and go to state 18
    FIND            shift and go to state 19
    LPAREN          shift and go to state 20
    YES             shift and go to state 21
    NO              shift and go to state 22
    NUMBER          shift and go to state 24
    IDENTIFIER      shift and go to state 25
    TEXT            shift and go to state 37
    INPUT           shift and go to state 28
    NOT             shift and go to state 29
    RANDOM          shift and go to state 30

    expression                     shift and go to state 79
    comp_expr                      shift and go to state 23
    random_statement               shift and go to state 26

state 50

    (37) comp_expr -> expression GT . expression
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (24) expression -> . LENGTH OF expression
    (25) expression -> . FIND OCCURENCES OF expression IN expression
    (28) expression -> . expression PLUS expression
    (29) expression -> . expression MINUS expression
    (30) expression -> . expression TIMES expression
    (31) expression -> . expression DIVIDE expression
    (32) expression -> . expression POWER expression
    (33) expression -> . LPAREN expression RPAREN
    (34) expression -> . YES
    (35) expression -> . NO
    (46) expression -> . comp_expr
    (47) expression -> . NUMBER
    (48) expression -> . IDENTIFIER
    (49) expression -> . random_statement
    (50) expression -> . TEXT
    (51) expression -> . INPUT
    (36) comp_expr -> . expression EQ expression
    (37) comp_expr -> . expression GT expression
    (38) comp_expr -> . expression LT expression
    (39) comp_expr -> . expression GE expression
    (40) comp_expr -> . expression LE expression
    (41) comp_expr -> . expression NE expression
    (42) comp_expr -> . comp_expr AND comp_expr
    (43) comp_expr -> . comp_expr OR comp_expr
    (44) comp_expr -> . NOT expression
    (45) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LENGTH          shift and go to state 18
    FIND            shift and go to state 19
    LPAREN          shift and go to state 20
    YES             shift and go to state 21
    NO              shift and go to state 22
    NUMBER          shift and go to state 24
    IDENTIFIER      shift and go to state 25
    TEXT            shift and go to state 37
    INPUT           shift and go to state 28
    NOT             shift and go to state 29
    RANDOM          shift and go to state 30

    expression                     shift and go to state 80
    comp_expr                      shift and go to state 23
    random_statement               shift and go to state 26

state 51

    (38) comp_expr -> expression LT . expression
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (24) expression -> . LENGTH OF expression
    (25) expression -> . FIND OCCURENCES OF expression IN expression
    (28) expression -> . expression PLUS expression
    (29) expression -> . expression MINUS expression
    (30) expression -> . expression TIMES expression
    (31) expression -> . expression DIVIDE expression
    (32) expression -> . expression POWER expression
    (33) expression -> . LPAREN expression RPAREN
    (34) expression -> . YES
    (35) expression -> . NO
    (46) expression -> . comp_expr
    (47) expression -> . NUMBER
    (48) expression -> . IDENTIFIER
    (49) expression -> . random_statement
    (50) expression -> . TEXT
    (51) expression -> . INPUT
    (36) comp_expr -> . expression EQ expression
    (37) comp_expr -> . expression GT expression
    (38) comp_expr -> . expression LT expression
    (39) comp_expr -> . expression GE expression
    (40) comp_expr -> . expression LE expression
    (41) comp_expr -> . expression NE expression
    (42) comp_expr -> . comp_expr AND comp_expr
    (43) comp_expr -> . comp_expr OR comp_expr
    (44) comp_expr -> . NOT expression
    (45) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LENGTH          shift and go to state 18
    FIND            shift and go to state 19
    LPAREN          shift and go to state 20
    YES             shift and go to state 21
    NO              shift and go to state 22
    NUMBER          shift and go to state 24
    IDENTIFIER      shift and go to state 25
    TEXT            shift and go to state 37
    INPUT           shift and go to state 28
    NOT             shift and go to state 29
    RANDOM          shift and go to state 30

    expression                     shift and go to state 81
    comp_expr                      shift and go to state 23
    random_statement               shift and go to state 26

state 52

    (39) comp_expr -> expression GE . expression
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (24) expression -> . LENGTH OF expression
    (25) expression -> . FIND OCCURENCES OF expression IN expression
    (28) expression -> . expression PLUS expression
    (29) expression -> . expression MINUS expression
    (30) expression -> . expression TIMES expression
    (31) expression -> . expression DIVIDE expression
    (32) expression -> . expression POWER expression
    (33) expression -> . LPAREN expression RPAREN
    (34) expression -> . YES
    (35) expression -> . NO
    (46) expression -> . comp_expr
    (47) expression -> . NUMBER
    (48) expression -> . IDENTIFIER
    (49) expression -> . random_statement
    (50) expression -> . TEXT
    (51) expression -> . INPUT
    (36) comp_expr -> . expression EQ expression
    (37) comp_expr -> . expression GT expression
    (38) comp_expr -> . expression LT expression
    (39) comp_expr -> . expression GE expression
    (40) comp_expr -> . expression LE expression
    (41) comp_expr -> . expression NE expression
    (42) comp_expr -> . comp_expr AND comp_expr
    (43) comp_expr -> . comp_expr OR comp_expr
    (44) comp_expr -> . NOT expression
    (45) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LENGTH          shift and go to state 18
    FIND            shift and go to state 19
    LPAREN          shift and go to state 20
    YES             shift and go to state 21
    NO              shift and go to state 22
    NUMBER          shift and go to state 24
    IDENTIFIER      shift and go to state 25
    TEXT            shift and go to state 37
    INPUT           shift and go to state 28
    NOT             shift and go to state 29
    RANDOM          shift and go to state 30

    expression                     shift and go to state 82
    comp_expr                      shift and go to state 23
    random_statement               shift and go to state 26

state 53

    (40) comp_expr -> expression LE . expression
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (24) expression -> . LENGTH OF expression
    (25) expression -> . FIND OCCURENCES OF expression IN expression
    (28) expression -> . expression PLUS expression
    (29) expression -> . expression MINUS expression
    (30) expression -> . expression TIMES expression
    (31) expression -> . expression DIVIDE expression
    (32) expression -> . expression POWER expression
    (33) expression -> . LPAREN expression RPAREN
    (34) expression -> . YES
    (35) expression -> . NO
    (46) expression -> . comp_expr
    (47) expression -> . NUMBER
    (48) expression -> . IDENTIFIER
    (49) expression -> . random_statement
    (50) expression -> . TEXT
    (51) expression -> . INPUT
    (36) comp_expr -> . expression EQ expression
    (37) comp_expr -> . expression GT expression
    (38) comp_expr -> . expression LT expression
    (39) comp_expr -> . expression GE expression
    (40) comp_expr -> . expression LE expression
    (41) comp_expr -> . expression NE expression
    (42) comp_expr -> . comp_expr AND comp_expr
    (43) comp_expr -> . comp_expr OR comp_expr
    (44) comp_expr -> . NOT expression
    (45) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LENGTH          shift and go to state 18
    FIND            shift and go to state 19
    LPAREN          shift and go to state 20
    YES             shift and go to state 21
    NO              shift and go to state 22
    NUMBER          shift and go to state 24
    IDENTIFIER      shift and go to state 25
    TEXT            shift and go to state 37
    INPUT           shift and go to state 28
    NOT             shift and go to state 29
    RANDOM          shift and go to state 30

    expression                     shift and go to state 83
    comp_expr                      shift and go to state 23
    random_statement               shift and go to state 26

state 54

    (41) comp_expr -> expression NE . expression
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (24) expression -> . LENGTH OF expression
    (25) expression -> . FIND OCCURENCES OF expression IN expression
    (28) expression -> . expression PLUS expression
    (29) expression -> . expression MINUS expression
    (30) expression -> . expression TIMES expression
    (31) expression -> . expression DIVIDE expression
    (32) expression -> . expression POWER expression
    (33) expression -> . LPAREN expression RPAREN
    (34) expression -> . YES
    (35) expression -> . NO
    (46) expression -> . comp_expr
    (47) expression -> . NUMBER
    (48) expression -> . IDENTIFIER
    (49) expression -> . random_statement
    (50) expression -> . TEXT
    (51) expression -> . INPUT
    (36) comp_expr -> . expression EQ expression
    (37) comp_expr -> . expression GT expression
    (38) comp_expr -> . expression LT expression
    (39) comp_expr -> . expression GE expression
    (40) comp_expr -> . expression LE expression
    (41) comp_expr -> . expression NE expression
    (42) comp_expr -> . comp_expr AND comp_expr
    (43) comp_expr -> . comp_expr OR comp_expr
    (44) comp_expr -> . NOT expression
    (45) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LENGTH          shift and go to state 18
    FIND            shift and go to state 19
    LPAREN          shift and go to state 20
    YES             shift and go to state 21
    NO              shift and go to state 22
    NUMBER          shift and go to state 24
    IDENTIFIER      shift and go to state 25
    TEXT            shift and go to state 37
    INPUT           shift and go to state 28
    NOT             shift and go to state 29
    RANDOM          shift and go to state 30

    expression                     shift and go to state 84
    comp_expr                      shift and go to state 23
    random_statement               shift and go to state 26

state 55

    (45) comp_expr -> expression IN . expression
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (24) expression -> . LENGTH OF expression
    (25) expression -> . FIND OCCURENCES OF expression IN expression
    (28) expression -> . expression PLUS expression
    (29) expression -> . expression MINUS expression
    (30) expression -> . expression TIMES expression
    (31) expression -> . expression DIVIDE expression
    (32) expression -> . expression POWER expression
    (33) expression -> . LPAREN expression RPAREN
    (34) expression -> . YES
    (35) expression -> . NO
    (46) expression -> . comp_expr
    (47) expression -> . NUMBER
    (48) expression -> . IDENTIFIER
    (49) expression -> . random_statement
    (50) expression -> . TEXT
    (51) expression -> . INPUT
    (36) comp_expr -> . expression EQ expression
    (37) comp_expr -> . expression GT expression
    (38) comp_expr -> . expression LT expression
    (39) comp_expr -> . expression GE expression
    (40) comp_expr -> . expression LE expression
    (41) comp_expr -> . expression NE expression
    (42) comp_expr -> . comp_expr AND comp_expr
    (43) comp_expr -> . comp_expr OR comp_expr
    (44) comp_expr -> . NOT expression
    (45) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LENGTH          shift and go to state 18
    FIND            shift and go to state 19
    LPAREN          shift and go to state 20
    YES             shift and go to state 21
    NO              shift and go to state 22
    NUMBER          shift and go to state 24
    IDENTIFIER      shift and go to state 25
    TEXT            shift and go to state 37
    INPUT           shift and go to state 28
    NOT             shift and go to state 29
    RANDOM          shift and go to state 30

    expression                     shift and go to state 85
    comp_expr                      shift and go to state 23
    random_statement               shift and go to state 26

state 56

    (23) expression -> DATATYPE FROM . expression TO expression FROM expression
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (24) expression -> . LENGTH OF expression
    (25) expression -> . FIND OCCURENCES OF expression IN expression
    (28) expression -> . expression PLUS expression
    (29) expression -> . expression MINUS expression
    (30) expression -> . expression TIMES expression
    (31) expression -> . expression DIVIDE expression
    (32) expression -> . expression POWER expression
    (33) expression -> . LPAREN expression RPAREN
    (34) expression -> . YES
    (35) expression -> . NO
    (46) expression -> . comp_expr
    (47) expression -> . NUMBER
    (48) expression -> . IDENTIFIER
    (49) expression -> . random_statement
    (50) expression -> . TEXT
    (51) expression -> . INPUT
    (36) comp_expr -> . expression EQ expression
    (37) comp_expr -> . expression GT expression
    (38) comp_expr -> . expression LT expression
    (39) comp_expr -> . expression GE expression
    (40) comp_expr -> . expression LE expression
    (41) comp_expr -> . expression NE expression
    (42) comp_expr -> . comp_expr AND comp_expr
    (43) comp_expr -> . comp_expr OR comp_expr
    (44) comp_expr -> . NOT expression
    (45) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LENGTH          shift and go to state 18
    FIND            shift and go to state 19
    LPAREN          shift and go to state 20
    YES             shift and go to state 21
    NO              shift and go to state 22
    NUMBER          shift and go to state 24
    IDENTIFIER      shift and go to state 25
    TEXT            shift and go to state 37
    INPUT           shift and go to state 28
    NOT             shift and go to state 29
    RANDOM          shift and go to state 30

    expression                     shift and go to state 86
    comp_expr                      shift and go to state 23
    random_statement               shift and go to state 26

state 57

    (24) expression -> LENGTH OF . expression
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (24) expression -> . LENGTH OF expression
    (25) expression -> . FIND OCCURENCES OF expression IN expression
    (28) expression -> . expression PLUS expression
    (29) expression -> . expression MINUS expression
    (30) expression -> . expression TIMES expression
    (31) expression -> . expression DIVIDE expression
    (32) expression -> . expression POWER expression
    (33) expression -> . LPAREN expression RPAREN
    (34) expression -> . YES
    (35) expression -> . NO
    (46) expression -> . comp_expr
    (47) expression -> . NUMBER
    (48) expression -> . IDENTIFIER
    (49) expression -> . random_statement
    (50) expression -> . TEXT
    (51) expression -> . INPUT
    (36) comp_expr -> . expression EQ expression
    (37) comp_expr -> . expression GT expression
    (38) comp_expr -> . expression LT expression
    (39) comp_expr -> . expression GE expression
    (40) comp_expr -> . expression LE expression
    (41) comp_expr -> . expression NE expression
    (42) comp_expr -> . comp_expr AND comp_expr
    (43) comp_expr -> . comp_expr OR comp_expr
    (44) comp_expr -> . NOT expression
    (45) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LENGTH          shift and go to state 18
    FIND            shift and go to state 19
    LPAREN          shift and go to state 20
    YES             shift and go to state 21
    NO              shift and go to state 22
    NUMBER          shift and go to state 24
    IDENTIFIER      shift and go to state 25
    TEXT            shift and go to state 37
    INPUT           shift and go to state 28
    NOT             shift and go to state 29
    RANDOM          shift and go to state 30

    expression                     shift and go to state 87
    comp_expr                      shift and go to state 23
    random_statement               shift and go to state 26

state 58

    (25) expression -> FIND OCCURENCES . OF expression IN expression

    OF              shift and go to state 88


state 59

    (33) expression -> LPAREN expression . RPAREN
    (28) expression -> expression . PLUS expression
    (29) expression -> expression . MINUS expression
    (30) expression -> expression . TIMES expression
    (31) expression -> expression . DIVIDE expression
    (32) expression -> expression . POWER expression
    (36) comp_expr -> expression . EQ expression
    (37) comp_expr -> expression . GT expression
    (38) comp_expr -> expression . LT expression
    (39) comp_expr -> expression . GE expression
    (40) comp_expr -> expression . LE expression
    (41) comp_expr -> expression . NE expression
    (45) comp_expr -> expression . IN expression

    RPAREN          shift and go to state 89
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    TIMES           shift and go to state 46
    DIVIDE          shift and go to state 47
    POWER           shift and go to state 48
    EQ              shift and go to state 49
    GT              shift and go to state 50
    LT              shift and go to state 51
    GE              shift and go to state 52
    LE              shift and go to state 53
    NE              shift and go to state 54
    IN              shift and go to state 55


state 60

    (42) comp_expr -> comp_expr AND . comp_expr
    (36) comp_expr -> . expression EQ expression
    (37) comp_expr -> . expression GT expression
    (38) comp_expr -> . expression LT expression
    (39) comp_expr -> . expression GE expression
    (40) comp_expr -> . expression LE expression
    (41) comp_expr -> . expression NE expression
    (42) comp_expr -> . comp_expr AND comp_expr
    (43) comp_expr -> . comp_expr OR comp_expr
    (44) comp_expr -> . NOT expression
    (45) comp_expr -> . expression IN expression
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (24) expression -> . LENGTH OF expression
    (25) expression -> . FIND OCCURENCES OF expression IN expression
    (28) expression -> . expression PLUS expression
    (29) expression -> . expression MINUS expression
    (30) expression -> . expression TIMES expression
    (31) expression -> . expression DIVIDE expression
    (32) expression -> . expression POWER expression
    (33) expression -> . LPAREN expression RPAREN
    (34) expression -> . YES
    (35) expression -> . NO
    (46) expression -> . comp_expr
    (47) expression -> . NUMBER
    (48) expression -> . IDENTIFIER
    (49) expression -> . random_statement
    (50) expression -> . TEXT
    (51) expression -> . INPUT
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    NOT             shift and go to state 29
    DATATYPE        shift and go to state 17
    LENGTH          shift and go to state 18
    FIND            shift and go to state 19
    LPAREN          shift and go to state 20
    YES             shift and go to state 21
    NO              shift and go to state 22
    NUMBER          shift and go to state 24
    IDENTIFIER      shift and go to state 25
    TEXT            shift and go to state 37
    INPUT           shift and go to state 28
    RANDOM          shift and go to state 30

    comp_expr                      shift and go to state 90
    expression                     shift and go to state 91
    random_statement               shift and go to state 26

state 61

    (43) comp_expr -> comp_expr OR . comp_expr
    (36) comp_expr -> . expression EQ expression
    (37) comp_expr -> . expression GT expression
    (38) comp_expr -> . expression LT expression
    (39) comp_expr -> . expression GE expression
    (40) comp_expr -> . expression LE expression
    (41) comp_expr -> . expression NE expression
    (42) comp_expr -> . comp_expr AND comp_expr
    (43) comp_expr -> . comp_expr OR comp_expr
    (44) comp_expr -> . NOT expression
    (45) comp_expr -> . expression IN expression
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (24) expression -> . LENGTH OF expression
    (25) expression -> . FIND OCCURENCES OF expression IN expression
    (28) expression -> . expression PLUS expression
    (29) expression -> . expression MINUS expression
    (30) expression -> . expression TIMES expression
    (31) expression -> . expression DIVIDE expression
    (32) expression -> . expression POWER expression
    (33) expression -> . LPAREN expression RPAREN
    (34) expression -> . YES
    (35) expression -> . NO
    (46) expression -> . comp_expr
    (47) expression -> . NUMBER
    (48) expression -> . IDENTIFIER
    (49) expression -> . random_statement
    (50) expression -> . TEXT
    (51) expression -> . INPUT
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    NOT             shift and go to state 29
    DATATYPE        shift and go to state 17
    LENGTH          shift and go to state 18
    FIND            shift and go to state 19
    LPAREN          shift and go to state 20
    YES             shift and go to state 21
    NO              shift and go to state 22
    NUMBER          shift and go to state 24
    IDENTIFIER      shift and go to state 25
    TEXT            shift and go to state 37
    INPUT           shift and go to state 28
    RANDOM          shift and go to state 30

    comp_expr                      shift and go to state 92
    expression                     shift and go to state 91
    random_statement               shift and go to state 26

state 62

    (6) ask -> TEXT EXPECTING . INPUT AND DATATYPE

    INPUT           shift and go to state 93


state 63

    (44) comp_expr -> NOT expression .
    (28) expression -> expression . PLUS expression
    (29) expression -> expression . MINUS expression
    (30) expression -> expression . TIMES expression
    (31) expression -> expression . DIVIDE expression
    (32) expression -> expression . POWER expression
    (36) comp_expr -> expression . EQ expression
    (37) comp_expr -> expression . GT expression
    (38) comp_expr -> expression . LT expression
    (39) comp_expr -> expression . GE expression
    (40) comp_expr -> expression . LE expression
    (41) comp_expr -> expression . NE expression
    (45) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    AND             reduce using rule 44 (comp_expr -> NOT expression .)
    OR              reduce using rule 44 (comp_expr -> NOT expression .)
    OUTPUT          reduce using rule 44 (comp_expr -> NOT expression .)
    REPEAT          reduce using rule 44 (comp_expr -> NOT expression .)
    PAUSE           reduce using rule 44 (comp_expr -> NOT expression .)
    FUNCTION        reduce using rule 44 (comp_expr -> NOT expression .)
    WHILE           reduce using rule 44 (comp_expr -> NOT expression .)
    FOREVER         reduce using rule 44 (comp_expr -> NOT expression .)
    EXIT            reduce using rule 44 (comp_expr -> NOT expression .)
    SET             reduce using rule 44 (comp_expr -> NOT expression .)
    IF              reduce using rule 44 (comp_expr -> NOT expression .)
    $end            reduce using rule 44 (comp_expr -> NOT expression .)
    UNTIL           reduce using rule 44 (comp_expr -> NOT expression .)
    END             reduce using rule 44 (comp_expr -> NOT expression .)
    ELSE            reduce using rule 44 (comp_expr -> NOT expression .)
    DO              reduce using rule 44 (comp_expr -> NOT expression .)
    THEN            reduce using rule 44 (comp_expr -> NOT expression .)
    RPAREN          reduce using rule 44 (comp_expr -> NOT expression .)
    TYPE            reduce using rule 44 (comp_expr -> NOT expression .)
    DATATYPE        reduce using rule 44 (comp_expr -> NOT expression .)
    LENGTH          reduce using rule 44 (comp_expr -> NOT expression .)
    FIND            reduce using rule 44 (comp_expr -> NOT expression .)
    LPAREN          reduce using rule 44 (comp_expr -> NOT expression .)
    YES             reduce using rule 44 (comp_expr -> NOT expression .)
    NO              reduce using rule 44 (comp_expr -> NOT expression .)
    NUMBER          reduce using rule 44 (comp_expr -> NOT expression .)
    IDENTIFIER      reduce using rule 44 (comp_expr -> NOT expression .)
    TEXT            reduce using rule 44 (comp_expr -> NOT expression .)
    INPUT           reduce using rule 44 (comp_expr -> NOT expression .)
    NOT             reduce using rule 44 (comp_expr -> NOT expression .)
    RANDOM          reduce using rule 44 (comp_expr -> NOT expression .)
    TO              reduce using rule 44 (comp_expr -> NOT expression .)
    FROM            reduce using rule 44 (comp_expr -> NOT expression .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    TIMES           shift and go to state 46
    DIVIDE          shift and go to state 47
    POWER           shift and go to state 48
    EQ              shift and go to state 49
    GT              shift and go to state 50
    LT              shift and go to state 51
    GE              shift and go to state 52
    LE              shift and go to state 53
    NE              shift and go to state 54
    IN              shift and go to state 55

  ! PLUS            [ reduce using rule 44 (comp_expr -> NOT expression .) ]
  ! MINUS           [ reduce using rule 44 (comp_expr -> NOT expression .) ]
  ! TIMES           [ reduce using rule 44 (comp_expr -> NOT expression .) ]
  ! DIVIDE          [ reduce using rule 44 (comp_expr -> NOT expression .) ]
  ! POWER           [ reduce using rule 44 (comp_expr -> NOT expression .) ]
  ! EQ              [ reduce using rule 44 (comp_expr -> NOT expression .) ]
  ! GT              [ reduce using rule 44 (comp_expr -> NOT expression .) ]
  ! LT              [ reduce using rule 44 (comp_expr -> NOT expression .) ]
  ! GE              [ reduce using rule 44 (comp_expr -> NOT expression .) ]
  ! LE              [ reduce using rule 44 (comp_expr -> NOT expression .) ]
  ! NE              [ reduce using rule 44 (comp_expr -> NOT expression .) ]
  ! IN              [ reduce using rule 44 (comp_expr -> NOT expression .) ]


state 64

    (7) random_statement -> RANDOM DATATYPE . FROM expression TO expression

    FROM            shift and go to state 94


state 65

    (9) statement -> var_assignment TO expression .
    (28) expression -> expression . PLUS expression
    (29) expression -> expression . MINUS expression
    (30) expression -> expression . TIMES expression
    (31) expression -> expression . DIVIDE expression
    (32) expression -> expression . POWER expression
    (26) items -> expression .
    (36) comp_expr -> expression . EQ expression
    (37) comp_expr -> expression . GT expression
    (38) comp_expr -> expression . LT expression
    (39) comp_expr -> expression . GE expression
    (40) comp_expr -> expression . LE expression
    (41) comp_expr -> expression . NE expression
    (45) comp_expr -> expression . IN expression

    OUTPUT          reduce using rule 9 (statement -> var_assignment TO expression .)
    REPEAT          reduce using rule 9 (statement -> var_assignment TO expression .)
    PAUSE           reduce using rule 9 (statement -> var_assignment TO expression .)
    FUNCTION        reduce using rule 9 (statement -> var_assignment TO expression .)
    WHILE           reduce using rule 9 (statement -> var_assignment TO expression .)
    FOREVER         reduce using rule 9 (statement -> var_assignment TO expression .)
    EXIT            reduce using rule 9 (statement -> var_assignment TO expression .)
    SET             reduce using rule 9 (statement -> var_assignment TO expression .)
    IF              reduce using rule 9 (statement -> var_assignment TO expression .)
    $end            reduce using rule 9 (statement -> var_assignment TO expression .)
    UNTIL           reduce using rule 9 (statement -> var_assignment TO expression .)
    END             reduce using rule 9 (statement -> var_assignment TO expression .)
    ELSE            reduce using rule 9 (statement -> var_assignment TO expression .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    TIMES           shift and go to state 46
    DIVIDE          shift and go to state 47
    POWER           shift and go to state 48
    TYPE            reduce using rule 26 (items -> expression .)
    DATATYPE        reduce using rule 26 (items -> expression .)
    LENGTH          reduce using rule 26 (items -> expression .)
    FIND            reduce using rule 26 (items -> expression .)
    LPAREN          reduce using rule 26 (items -> expression .)
    YES             reduce using rule 26 (items -> expression .)
    NO              reduce using rule 26 (items -> expression .)
    NUMBER          reduce using rule 26 (items -> expression .)
    IDENTIFIER      reduce using rule 26 (items -> expression .)
    TEXT            reduce using rule 26 (items -> expression .)
    INPUT           reduce using rule 26 (items -> expression .)
    NOT             reduce using rule 26 (items -> expression .)
    RANDOM          reduce using rule 26 (items -> expression .)
    EQ              shift and go to state 49
    GT              shift and go to state 50
    LT              shift and go to state 51
    GE              shift and go to state 52
    LE              shift and go to state 53
    NE              shift and go to state 54
    IN              shift and go to state 55


state 66

    (11) statement -> var_assignment TO ask .

    OUTPUT          reduce using rule 11 (statement -> var_assignment TO ask .)
    REPEAT          reduce using rule 11 (statement -> var_assignment TO ask .)
    PAUSE           reduce using rule 11 (statement -> var_assignment TO ask .)
    FUNCTION        reduce using rule 11 (statement -> var_assignment TO ask .)
    WHILE           reduce using rule 11 (statement -> var_assignment TO ask .)
    FOREVER         reduce using rule 11 (statement -> var_assignment TO ask .)
    EXIT            reduce using rule 11 (statement -> var_assignment TO ask .)
    SET             reduce using rule 11 (statement -> var_assignment TO ask .)
    IF              reduce using rule 11 (statement -> var_assignment TO ask .)
    $end            reduce using rule 11 (statement -> var_assignment TO ask .)
    UNTIL           reduce using rule 11 (statement -> var_assignment TO ask .)
    END             reduce using rule 11 (statement -> var_assignment TO ask .)
    ELSE            reduce using rule 11 (statement -> var_assignment TO ask .)


state 67

    (12) statement -> var_assignment TO items . type_stmt
    (27) items -> items . expression
    (18) type_stmt -> . TYPE DATATYPE
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (24) expression -> . LENGTH OF expression
    (25) expression -> . FIND OCCURENCES OF expression IN expression
    (28) expression -> . expression PLUS expression
    (29) expression -> . expression MINUS expression
    (30) expression -> . expression TIMES expression
    (31) expression -> . expression DIVIDE expression
    (32) expression -> . expression POWER expression
    (33) expression -> . LPAREN expression RPAREN
    (34) expression -> . YES
    (35) expression -> . NO
    (46) expression -> . comp_expr
    (47) expression -> . NUMBER
    (48) expression -> . IDENTIFIER
    (49) expression -> . random_statement
    (50) expression -> . TEXT
    (51) expression -> . INPUT
    (36) comp_expr -> . expression EQ expression
    (37) comp_expr -> . expression GT expression
    (38) comp_expr -> . expression LT expression
    (39) comp_expr -> . expression GE expression
    (40) comp_expr -> . expression LE expression
    (41) comp_expr -> . expression NE expression
    (42) comp_expr -> . comp_expr AND comp_expr
    (43) comp_expr -> . comp_expr OR comp_expr
    (44) comp_expr -> . NOT expression
    (45) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    TYPE            shift and go to state 97
    DATATYPE        shift and go to state 17
    LENGTH          shift and go to state 18
    FIND            shift and go to state 19
    LPAREN          shift and go to state 20
    YES             shift and go to state 21
    NO              shift and go to state 22
    NUMBER          shift and go to state 24
    IDENTIFIER      shift and go to state 25
    TEXT            shift and go to state 37
    INPUT           shift and go to state 28
    NOT             shift and go to state 29
    RANDOM          shift and go to state 30

    type_stmt                      shift and go to state 95
    expression                     shift and go to state 96
    comp_expr                      shift and go to state 23
    random_statement               shift and go to state 26

state 68

    (15) statement -> if_then ELSE THEN . statements end_statement
    (1) statements -> . statement
    (2) statements -> . statements statement
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . WHILE expression DO statements end_statement
    (21) statement -> . FOREVER DO statements end_statement
    (22) statement -> . EXIT LOOP
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    FOREVER         shift and go to state 10
    EXIT            shift and go to state 11
    SET             shift and go to state 12
    IF              shift and go to state 13

    if_then                        shift and go to state 5
    statements                     shift and go to state 98
    statement                      shift and go to state 2
    var_assignment                 shift and go to state 4

state 69

    (16) statement -> REPEAT statements UNTIL . expression
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (24) expression -> . LENGTH OF expression
    (25) expression -> . FIND OCCURENCES OF expression IN expression
    (28) expression -> . expression PLUS expression
    (29) expression -> . expression MINUS expression
    (30) expression -> . expression TIMES expression
    (31) expression -> . expression DIVIDE expression
    (32) expression -> . expression POWER expression
    (33) expression -> . LPAREN expression RPAREN
    (34) expression -> . YES
    (35) expression -> . NO
    (46) expression -> . comp_expr
    (47) expression -> . NUMBER
    (48) expression -> . IDENTIFIER
    (49) expression -> . random_statement
    (50) expression -> . TEXT
    (51) expression -> . INPUT
    (36) comp_expr -> . expression EQ expression
    (37) comp_expr -> . expression GT expression
    (38) comp_expr -> . expression LT expression
    (39) comp_expr -> . expression GE expression
    (40) comp_expr -> . expression LE expression
    (41) comp_expr -> . expression NE expression
    (42) comp_expr -> . comp_expr AND comp_expr
    (43) comp_expr -> . comp_expr OR comp_expr
    (44) comp_expr -> . NOT expression
    (45) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LENGTH          shift and go to state 18
    FIND            shift and go to state 19
    LPAREN          shift and go to state 20
    YES             shift and go to state 21
    NO              shift and go to state 22
    NUMBER          shift and go to state 24
    IDENTIFIER      shift and go to state 25
    TEXT            shift and go to state 37
    INPUT           shift and go to state 28
    NOT             shift and go to state 29
    RANDOM          shift and go to state 30

    expression                     shift and go to state 99
    comp_expr                      shift and go to state 23
    random_statement               shift and go to state 26

state 70

    (19) statement -> FUNCTION IDENTIFIER MEANS . statements end_statement
    (1) statements -> . statement
    (2) statements -> . statements statement
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . WHILE expression DO statements end_statement
    (21) statement -> . FOREVER DO statements end_statement
    (22) statement -> . EXIT LOOP
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    FOREVER         shift and go to state 10
    EXIT            shift and go to state 11
    SET             shift and go to state 12
    IF              shift and go to state 13

    statements                     shift and go to state 100
    statement                      shift and go to state 2
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 71

    (20) statement -> WHILE expression DO . statements end_statement
    (1) statements -> . statement
    (2) statements -> . statements statement
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . WHILE expression DO statements end_statement
    (21) statement -> . FOREVER DO statements end_statement
    (22) statement -> . EXIT LOOP
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    FOREVER         shift and go to state 10
    EXIT            shift and go to state 11
    SET             shift and go to state 12
    IF              shift and go to state 13

    statements                     shift and go to state 101
    statement                      shift and go to state 2
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 72

    (21) statement -> FOREVER DO statements . end_statement
    (2) statements -> statements . statement
    (3) end_statement -> . END
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . WHILE expression DO statements end_statement
    (21) statement -> . FOREVER DO statements end_statement
    (22) statement -> . EXIT LOOP
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    END             shift and go to state 34
    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    FOREVER         shift and go to state 10
    EXIT            shift and go to state 11
    SET             shift and go to state 12
    IF              shift and go to state 13

    end_statement                  shift and go to state 102
    statement                      shift and go to state 14
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 73

    (13) if_then -> IF expression THEN . statements
    (1) statements -> . statement
    (2) statements -> . statements statement
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . WHILE expression DO statements end_statement
    (21) statement -> . FOREVER DO statements end_statement
    (22) statement -> . EXIT LOOP
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    FOREVER         shift and go to state 10
    EXIT            shift and go to state 11
    SET             shift and go to state 12
    IF              shift and go to state 13

    statements                     shift and go to state 103
    statement                      shift and go to state 2
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 74

    (28) expression -> expression PLUS expression .
    (28) expression -> expression . PLUS expression
    (29) expression -> expression . MINUS expression
    (30) expression -> expression . TIMES expression
    (31) expression -> expression . DIVIDE expression
    (32) expression -> expression . POWER expression
    (36) comp_expr -> expression . EQ expression
    (37) comp_expr -> expression . GT expression
    (38) comp_expr -> expression . LT expression
    (39) comp_expr -> expression . GE expression
    (40) comp_expr -> expression . LE expression
    (41) comp_expr -> expression . NE expression
    (45) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    OUTPUT          reduce using rule 28 (expression -> expression PLUS expression .)
    REPEAT          reduce using rule 28 (expression -> expression PLUS expression .)
    PAUSE           reduce using rule 28 (expression -> expression PLUS expression .)
    FUNCTION        reduce using rule 28 (expression -> expression PLUS expression .)
    WHILE           reduce using rule 28 (expression -> expression PLUS expression .)
    FOREVER         reduce using rule 28 (expression -> expression PLUS expression .)
    EXIT            reduce using rule 28 (expression -> expression PLUS expression .)
    SET             reduce using rule 28 (expression -> expression PLUS expression .)
    IF              reduce using rule 28 (expression -> expression PLUS expression .)
    $end            reduce using rule 28 (expression -> expression PLUS expression .)
    UNTIL           reduce using rule 28 (expression -> expression PLUS expression .)
    END             reduce using rule 28 (expression -> expression PLUS expression .)
    ELSE            reduce using rule 28 (expression -> expression PLUS expression .)
    DO              reduce using rule 28 (expression -> expression PLUS expression .)
    THEN            reduce using rule 28 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 28 (expression -> expression PLUS expression .)
    AND             reduce using rule 28 (expression -> expression PLUS expression .)
    OR              reduce using rule 28 (expression -> expression PLUS expression .)
    TYPE            reduce using rule 28 (expression -> expression PLUS expression .)
    DATATYPE        reduce using rule 28 (expression -> expression PLUS expression .)
    LENGTH          reduce using rule 28 (expression -> expression PLUS expression .)
    FIND            reduce using rule 28 (expression -> expression PLUS expression .)
    LPAREN          reduce using rule 28 (expression -> expression PLUS expression .)
    YES             reduce using rule 28 (expression -> expression PLUS expression .)
    NO              reduce using rule 28 (expression -> expression PLUS expression .)
    NUMBER          reduce using rule 28 (expression -> expression PLUS expression .)
    IDENTIFIER      reduce using rule 28 (expression -> expression PLUS expression .)
    TEXT            reduce using rule 28 (expression -> expression PLUS expression .)
    INPUT           reduce using rule 28 (expression -> expression PLUS expression .)
    NOT             reduce using rule 28 (expression -> expression PLUS expression .)
    RANDOM          reduce using rule 28 (expression -> expression PLUS expression .)
    TO              reduce using rule 28 (expression -> expression PLUS expression .)
    FROM            reduce using rule 28 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    TIMES           shift and go to state 46
    DIVIDE          shift and go to state 47
    POWER           shift and go to state 48
    EQ              shift and go to state 49
    GT              shift and go to state 50
    LT              shift and go to state 51
    GE              shift and go to state 52
    LE              shift and go to state 53
    NE              shift and go to state 54
    IN              shift and go to state 55

  ! PLUS            [ reduce using rule 28 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 28 (expression -> expression PLUS expression .) ]
  ! TIMES           [ reduce using rule 28 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 28 (expression -> expression PLUS expression .) ]
  ! POWER           [ reduce using rule 28 (expression -> expression PLUS expression .) ]
  ! EQ              [ reduce using rule 28 (expression -> expression PLUS expression .) ]
  ! GT              [ reduce using rule 28 (expression -> expression PLUS expression .) ]
  ! LT              [ reduce using rule 28 (expression -> expression PLUS expression .) ]
  ! GE              [ reduce using rule 28 (expression -> expression PLUS expression .) ]
  ! LE              [ reduce using rule 28 (expression -> expression PLUS expression .) ]
  ! NE              [ reduce using rule 28 (expression -> expression PLUS expression .) ]
  ! IN              [ reduce using rule 28 (expression -> expression PLUS expression .) ]


state 75

    (29) expression -> expression MINUS expression .
    (28) expression -> expression . PLUS expression
    (29) expression -> expression . MINUS expression
    (30) expression -> expression . TIMES expression
    (31) expression -> expression . DIVIDE expression
    (32) expression -> expression . POWER expression
    (36) comp_expr -> expression . EQ expression
    (37) comp_expr -> expression . GT expression
    (38) comp_expr -> expression . LT expression
    (39) comp_expr -> expression . GE expression
    (40) comp_expr -> expression . LE expression
    (41) comp_expr -> expression . NE expression
    (45) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    OUTPUT          reduce using rule 29 (expression -> expression MINUS expression .)
    REPEAT          reduce using rule 29 (expression -> expression MINUS expression .)
    PAUSE           reduce using rule 29 (expression -> expression MINUS expression .)
    FUNCTION        reduce using rule 29 (expression -> expression MINUS expression .)
    WHILE           reduce using rule 29 (expression -> expression MINUS expression .)
    FOREVER         reduce using rule 29 (expression -> expression MINUS expression .)
    EXIT            reduce using rule 29 (expression -> expression MINUS expression .)
    SET             reduce using rule 29 (expression -> expression MINUS expression .)
    IF              reduce using rule 29 (expression -> expression MINUS expression .)
    $end            reduce using rule 29 (expression -> expression MINUS expression .)
    UNTIL           reduce using rule 29 (expression -> expression MINUS expression .)
    END             reduce using rule 29 (expression -> expression MINUS expression .)
    ELSE            reduce using rule 29 (expression -> expression MINUS expression .)
    DO              reduce using rule 29 (expression -> expression MINUS expression .)
    THEN            reduce using rule 29 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 29 (expression -> expression MINUS expression .)
    AND             reduce using rule 29 (expression -> expression MINUS expression .)
    OR              reduce using rule 29 (expression -> expression MINUS expression .)
    TYPE            reduce using rule 29 (expression -> expression MINUS expression .)
    DATATYPE        reduce using rule 29 (expression -> expression MINUS expression .)
    LENGTH          reduce using rule 29 (expression -> expression MINUS expression .)
    FIND            reduce using rule 29 (expression -> expression MINUS expression .)
    LPAREN          reduce using rule 29 (expression -> expression MINUS expression .)
    YES             reduce using rule 29 (expression -> expression MINUS expression .)
    NO              reduce using rule 29 (expression -> expression MINUS expression .)
    NUMBER          reduce using rule 29 (expression -> expression MINUS expression .)
    IDENTIFIER      reduce using rule 29 (expression -> expression MINUS expression .)
    TEXT            reduce using rule 29 (expression -> expression MINUS expression .)
    INPUT           reduce using rule 29 (expression -> expression MINUS expression .)
    NOT             reduce using rule 29 (expression -> expression MINUS expression .)
    RANDOM          reduce using rule 29 (expression -> expression MINUS expression .)
    TO              reduce using rule 29 (expression -> expression MINUS expression .)
    FROM            reduce using rule 29 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    TIMES           shift and go to state 46
    DIVIDE          shift and go to state 47
    POWER           shift and go to state 48
    EQ              shift and go to state 49
    GT              shift and go to state 50
    LT              shift and go to state 51
    GE              shift and go to state 52
    LE              shift and go to state 53
    NE              shift and go to state 54
    IN              shift and go to state 55

  ! PLUS            [ reduce using rule 29 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 29 (expression -> expression MINUS expression .) ]
  ! TIMES           [ reduce using rule 29 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 29 (expression -> expression MINUS expression .) ]
  ! POWER           [ reduce using rule 29 (expression -> expression MINUS expression .) ]
  ! EQ              [ reduce using rule 29 (expression -> expression MINUS expression .) ]
  ! GT              [ reduce using rule 29 (expression -> expression MINUS expression .) ]
  ! LT              [ reduce using rule 29 (expression -> expression MINUS expression .) ]
  ! GE              [ reduce using rule 29 (expression -> expression MINUS expression .) ]
  ! LE              [ reduce using rule 29 (expression -> expression MINUS expression .) ]
  ! NE              [ reduce using rule 29 (expression -> expression MINUS expression .) ]
  ! IN              [ reduce using rule 29 (expression -> expression MINUS expression .) ]


state 76

    (30) expression -> expression TIMES expression .
    (28) expression -> expression . PLUS expression
    (29) expression -> expression . MINUS expression
    (30) expression -> expression . TIMES expression
    (31) expression -> expression . DIVIDE expression
    (32) expression -> expression . POWER expression
    (36) comp_expr -> expression . EQ expression
    (37) comp_expr -> expression . GT expression
    (38) comp_expr -> expression . LT expression
    (39) comp_expr -> expression . GE expression
    (40) comp_expr -> expression . LE expression
    (41) comp_expr -> expression . NE expression
    (45) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    OUTPUT          reduce using rule 30 (expression -> expression TIMES expression .)
    REPEAT          reduce using rule 30 (expression -> expression TIMES expression .)
    PAUSE           reduce using rule 30 (expression -> expression TIMES expression .)
    FUNCTION        reduce using rule 30 (expression -> expression TIMES expression .)
    WHILE           reduce using rule 30 (expression -> expression TIMES expression .)
    FOREVER         reduce using rule 30 (expression -> expression TIMES expression .)
    EXIT            reduce using rule 30 (expression -> expression TIMES expression .)
    SET             reduce using rule 30 (expression -> expression TIMES expression .)
    IF              reduce using rule 30 (expression -> expression TIMES expression .)
    $end            reduce using rule 30 (expression -> expression TIMES expression .)
    UNTIL           reduce using rule 30 (expression -> expression TIMES expression .)
    END             reduce using rule 30 (expression -> expression TIMES expression .)
    ELSE            reduce using rule 30 (expression -> expression TIMES expression .)
    DO              reduce using rule 30 (expression -> expression TIMES expression .)
    THEN            reduce using rule 30 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 30 (expression -> expression TIMES expression .)
    AND             reduce using rule 30 (expression -> expression TIMES expression .)
    OR              reduce using rule 30 (expression -> expression TIMES expression .)
    TYPE            reduce using rule 30 (expression -> expression TIMES expression .)
    DATATYPE        reduce using rule 30 (expression -> expression TIMES expression .)
    LENGTH          reduce using rule 30 (expression -> expression TIMES expression .)
    FIND            reduce using rule 30 (expression -> expression TIMES expression .)
    LPAREN          reduce using rule 30 (expression -> expression TIMES expression .)
    YES             reduce using rule 30 (expression -> expression TIMES expression .)
    NO              reduce using rule 30 (expression -> expression TIMES expression .)
    NUMBER          reduce using rule 30 (expression -> expression TIMES expression .)
    IDENTIFIER      reduce using rule 30 (expression -> expression TIMES expression .)
    TEXT            reduce using rule 30 (expression -> expression TIMES expression .)
    INPUT           reduce using rule 30 (expression -> expression TIMES expression .)
    NOT             reduce using rule 30 (expression -> expression TIMES expression .)
    RANDOM          reduce using rule 30 (expression -> expression TIMES expression .)
    TO              reduce using rule 30 (expression -> expression TIMES expression .)
    FROM            reduce using rule 30 (expression -> expression TIMES expression .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    TIMES           shift and go to state 46
    DIVIDE          shift and go to state 47
    POWER           shift and go to state 48
    EQ              shift and go to state 49
    GT              shift and go to state 50
    LT              shift and go to state 51
    GE              shift and go to state 52
    LE              shift and go to state 53
    NE              shift and go to state 54
    IN              shift and go to state 55

  ! PLUS            [ reduce using rule 30 (expression -> expression TIMES expression .) ]
  ! MINUS           [ reduce using rule 30 (expression -> expression TIMES expression .) ]
  ! TIMES           [ reduce using rule 30 (expression -> expression TIMES expression .) ]
  ! DIVIDE          [ reduce using rule 30 (expression -> expression TIMES expression .) ]
  ! POWER           [ reduce using rule 30 (expression -> expression TIMES expression .) ]
  ! EQ              [ reduce using rule 30 (expression -> expression TIMES expression .) ]
  ! GT              [ reduce using rule 30 (expression -> expression TIMES expression .) ]
  ! LT              [ reduce using rule 30 (expression -> expression TIMES expression .) ]
  ! GE              [ reduce using rule 30 (expression -> expression TIMES expression .) ]
  ! LE              [ reduce using rule 30 (expression -> expression TIMES expression .) ]
  ! NE              [ reduce using rule 30 (expression -> expression TIMES expression .) ]
  ! IN              [ reduce using rule 30 (expression -> expression TIMES expression .) ]


state 77

    (31) expression -> expression DIVIDE expression .
    (28) expression -> expression . PLUS expression
    (29) expression -> expression . MINUS expression
    (30) expression -> expression . TIMES expression
    (31) expression -> expression . DIVIDE expression
    (32) expression -> expression . POWER expression
    (36) comp_expr -> expression . EQ expression
    (37) comp_expr -> expression . GT expression
    (38) comp_expr -> expression . LT expression
    (39) comp_expr -> expression . GE expression
    (40) comp_expr -> expression . LE expression
    (41) comp_expr -> expression . NE expression
    (45) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    OUTPUT          reduce using rule 31 (expression -> expression DIVIDE expression .)
    REPEAT          reduce using rule 31 (expression -> expression DIVIDE expression .)
    PAUSE           reduce using rule 31 (expression -> expression DIVIDE expression .)
    FUNCTION        reduce using rule 31 (expression -> expression DIVIDE expression .)
    WHILE           reduce using rule 31 (expression -> expression DIVIDE expression .)
    FOREVER         reduce using rule 31 (expression -> expression DIVIDE expression .)
    EXIT            reduce using rule 31 (expression -> expression DIVIDE expression .)
    SET             reduce using rule 31 (expression -> expression DIVIDE expression .)
    IF              reduce using rule 31 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 31 (expression -> expression DIVIDE expression .)
    UNTIL           reduce using rule 31 (expression -> expression DIVIDE expression .)
    END             reduce using rule 31 (expression -> expression DIVIDE expression .)
    ELSE            reduce using rule 31 (expression -> expression DIVIDE expression .)
    DO              reduce using rule 31 (expression -> expression DIVIDE expression .)
    THEN            reduce using rule 31 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 31 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 31 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 31 (expression -> expression DIVIDE expression .)
    TYPE            reduce using rule 31 (expression -> expression DIVIDE expression .)
    DATATYPE        reduce using rule 31 (expression -> expression DIVIDE expression .)
    LENGTH          reduce using rule 31 (expression -> expression DIVIDE expression .)
    FIND            reduce using rule 31 (expression -> expression DIVIDE expression .)
    LPAREN          reduce using rule 31 (expression -> expression DIVIDE expression .)
    YES             reduce using rule 31 (expression -> expression DIVIDE expression .)
    NO              reduce using rule 31 (expression -> expression DIVIDE expression .)
    NUMBER          reduce using rule 31 (expression -> expression DIVIDE expression .)
    IDENTIFIER      reduce using rule 31 (expression -> expression DIVIDE expression .)
    TEXT            reduce using rule 31 (expression -> expression DIVIDE expression .)
    INPUT           reduce using rule 31 (expression -> expression DIVIDE expression .)
    NOT             reduce using rule 31 (expression -> expression DIVIDE expression .)
    RANDOM          reduce using rule 31 (expression -> expression DIVIDE expression .)
    TO              reduce using rule 31 (expression -> expression DIVIDE expression .)
    FROM            reduce using rule 31 (expression -> expression DIVIDE expression .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    TIMES           shift and go to state 46
    DIVIDE          shift and go to state 47
    POWER           shift and go to state 48
    EQ              shift and go to state 49
    GT              shift and go to state 50
    LT              shift and go to state 51
    GE              shift and go to state 52
    LE              shift and go to state 53
    NE              shift and go to state 54
    IN              shift and go to state 55

  ! PLUS            [ reduce using rule 31 (expression -> expression DIVIDE expression .) ]
  ! MINUS           [ reduce using rule 31 (expression -> expression DIVIDE expression .) ]
  ! TIMES           [ reduce using rule 31 (expression -> expression DIVIDE expression .) ]
  ! DIVIDE          [ reduce using rule 31 (expression -> expression DIVIDE expression .) ]
  ! POWER           [ reduce using rule 31 (expression -> expression DIVIDE expression .) ]
  ! EQ              [ reduce using rule 31 (expression -> expression DIVIDE expression .) ]
  ! GT              [ reduce using rule 31 (expression -> expression DIVIDE expression .) ]
  ! LT              [ reduce using rule 31 (expression -> expression DIVIDE expression .) ]
  ! GE              [ reduce using rule 31 (expression -> expression DIVIDE expression .) ]
  ! LE              [ reduce using rule 31 (expression -> expression DIVIDE expression .) ]
  ! NE              [ reduce using rule 31 (expression -> expression DIVIDE expression .) ]
  ! IN              [ reduce using rule 31 (expression -> expression DIVIDE expression .) ]


state 78

    (32) expression -> expression POWER expression .
    (28) expression -> expression . PLUS expression
    (29) expression -> expression . MINUS expression
    (30) expression -> expression . TIMES expression
    (31) expression -> expression . DIVIDE expression
    (32) expression -> expression . POWER expression
    (36) comp_expr -> expression . EQ expression
    (37) comp_expr -> expression . GT expression
    (38) comp_expr -> expression . LT expression
    (39) comp_expr -> expression . GE expression
    (40) comp_expr -> expression . LE expression
    (41) comp_expr -> expression . NE expression
    (45) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    OUTPUT          reduce using rule 32 (expression -> expression POWER expression .)
    REPEAT          reduce using rule 32 (expression -> expression POWER expression .)
    PAUSE           reduce using rule 32 (expression -> expression POWER expression .)
    FUNCTION        reduce using rule 32 (expression -> expression POWER expression .)
    WHILE           reduce using rule 32 (expression -> expression POWER expression .)
    FOREVER         reduce using rule 32 (expression -> expression POWER expression .)
    EXIT            reduce using rule 32 (expression -> expression POWER expression .)
    SET             reduce using rule 32 (expression -> expression POWER expression .)
    IF              reduce using rule 32 (expression -> expression POWER expression .)
    $end            reduce using rule 32 (expression -> expression POWER expression .)
    UNTIL           reduce using rule 32 (expression -> expression POWER expression .)
    END             reduce using rule 32 (expression -> expression POWER expression .)
    ELSE            reduce using rule 32 (expression -> expression POWER expression .)
    DO              reduce using rule 32 (expression -> expression POWER expression .)
    THEN            reduce using rule 32 (expression -> expression POWER expression .)
    RPAREN          reduce using rule 32 (expression -> expression POWER expression .)
    AND             reduce using rule 32 (expression -> expression POWER expression .)
    OR              reduce using rule 32 (expression -> expression POWER expression .)
    TYPE            reduce using rule 32 (expression -> expression POWER expression .)
    DATATYPE        reduce using rule 32 (expression -> expression POWER expression .)
    LENGTH          reduce using rule 32 (expression -> expression POWER expression .)
    FIND            reduce using rule 32 (expression -> expression POWER expression .)
    LPAREN          reduce using rule 32 (expression -> expression POWER expression .)
    YES             reduce using rule 32 (expression -> expression POWER expression .)
    NO              reduce using rule 32 (expression -> expression POWER expression .)
    NUMBER          reduce using rule 32 (expression -> expression POWER expression .)
    IDENTIFIER      reduce using rule 32 (expression -> expression POWER expression .)
    TEXT            reduce using rule 32 (expression -> expression POWER expression .)
    INPUT           reduce using rule 32 (expression -> expression POWER expression .)
    NOT             reduce using rule 32 (expression -> expression POWER expression .)
    RANDOM          reduce using rule 32 (expression -> expression POWER expression .)
    TO              reduce using rule 32 (expression -> expression POWER expression .)
    FROM            reduce using rule 32 (expression -> expression POWER expression .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    TIMES           shift and go to state 46
    DIVIDE          shift and go to state 47
    POWER           shift and go to state 48
    EQ              shift and go to state 49
    GT              shift and go to state 50
    LT              shift and go to state 51
    GE              shift and go to state 52
    LE              shift and go to state 53
    NE              shift and go to state 54
    IN              shift and go to state 55

  ! PLUS            [ reduce using rule 32 (expression -> expression POWER expression .) ]
  ! MINUS           [ reduce using rule 32 (expression -> expression POWER expression .) ]
  ! TIMES           [ reduce using rule 32 (expression -> expression POWER expression .) ]
  ! DIVIDE          [ reduce using rule 32 (expression -> expression POWER expression .) ]
  ! POWER           [ reduce using rule 32 (expression -> expression POWER expression .) ]
  ! EQ              [ reduce using rule 32 (expression -> expression POWER expression .) ]
  ! GT              [ reduce using rule 32 (expression -> expression POWER expression .) ]
  ! LT              [ reduce using rule 32 (expression -> expression POWER expression .) ]
  ! GE              [ reduce using rule 32 (expression -> expression POWER expression .) ]
  ! LE              [ reduce using rule 32 (expression -> expression POWER expression .) ]
  ! NE              [ reduce using rule 32 (expression -> expression POWER expression .) ]
  ! IN              [ reduce using rule 32 (expression -> expression POWER expression .) ]


state 79

    (36) comp_expr -> expression EQ expression .
    (28) expression -> expression . PLUS expression
    (29) expression -> expression . MINUS expression
    (30) expression -> expression . TIMES expression
    (31) expression -> expression . DIVIDE expression
    (32) expression -> expression . POWER expression
    (36) comp_expr -> expression . EQ expression
    (37) comp_expr -> expression . GT expression
    (38) comp_expr -> expression . LT expression
    (39) comp_expr -> expression . GE expression
    (40) comp_expr -> expression . LE expression
    (41) comp_expr -> expression . NE expression
    (45) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    AND             reduce using rule 36 (comp_expr -> expression EQ expression .)
    OR              reduce using rule 36 (comp_expr -> expression EQ expression .)
    OUTPUT          reduce using rule 36 (comp_expr -> expression EQ expression .)
    REPEAT          reduce using rule 36 (comp_expr -> expression EQ expression .)
    PAUSE           reduce using rule 36 (comp_expr -> expression EQ expression .)
    FUNCTION        reduce using rule 36 (comp_expr -> expression EQ expression .)
    WHILE           reduce using rule 36 (comp_expr -> expression EQ expression .)
    FOREVER         reduce using rule 36 (comp_expr -> expression EQ expression .)
    EXIT            reduce using rule 36 (comp_expr -> expression EQ expression .)
    SET             reduce using rule 36 (comp_expr -> expression EQ expression .)
    IF              reduce using rule 36 (comp_expr -> expression EQ expression .)
    $end            reduce using rule 36 (comp_expr -> expression EQ expression .)
    UNTIL           reduce using rule 36 (comp_expr -> expression EQ expression .)
    END             reduce using rule 36 (comp_expr -> expression EQ expression .)
    ELSE            reduce using rule 36 (comp_expr -> expression EQ expression .)
    DO              reduce using rule 36 (comp_expr -> expression EQ expression .)
    THEN            reduce using rule 36 (comp_expr -> expression EQ expression .)
    RPAREN          reduce using rule 36 (comp_expr -> expression EQ expression .)
    TYPE            reduce using rule 36 (comp_expr -> expression EQ expression .)
    DATATYPE        reduce using rule 36 (comp_expr -> expression EQ expression .)
    LENGTH          reduce using rule 36 (comp_expr -> expression EQ expression .)
    FIND            reduce using rule 36 (comp_expr -> expression EQ expression .)
    LPAREN          reduce using rule 36 (comp_expr -> expression EQ expression .)
    YES             reduce using rule 36 (comp_expr -> expression EQ expression .)
    NO              reduce using rule 36 (comp_expr -> expression EQ expression .)
    NUMBER          reduce using rule 36 (comp_expr -> expression EQ expression .)
    IDENTIFIER      reduce using rule 36 (comp_expr -> expression EQ expression .)
    TEXT            reduce using rule 36 (comp_expr -> expression EQ expression .)
    INPUT           reduce using rule 36 (comp_expr -> expression EQ expression .)
    NOT             reduce using rule 36 (comp_expr -> expression EQ expression .)
    RANDOM          reduce using rule 36 (comp_expr -> expression EQ expression .)
    TO              reduce using rule 36 (comp_expr -> expression EQ expression .)
    FROM            reduce using rule 36 (comp_expr -> expression EQ expression .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    TIMES           shift and go to state 46
    DIVIDE          shift and go to state 47
    POWER           shift and go to state 48
    EQ              shift and go to state 49
    GT              shift and go to state 50
    LT              shift and go to state 51
    GE              shift and go to state 52
    LE              shift and go to state 53
    NE              shift and go to state 54
    IN              shift and go to state 55

  ! PLUS            [ reduce using rule 36 (comp_expr -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 36 (comp_expr -> expression EQ expression .) ]
  ! TIMES           [ reduce using rule 36 (comp_expr -> expression EQ expression .) ]
  ! DIVIDE          [ reduce using rule 36 (comp_expr -> expression EQ expression .) ]
  ! POWER           [ reduce using rule 36 (comp_expr -> expression EQ expression .) ]
  ! EQ              [ reduce using rule 36 (comp_expr -> expression EQ expression .) ]
  ! GT              [ reduce using rule 36 (comp_expr -> expression EQ expression .) ]
  ! LT              [ reduce using rule 36 (comp_expr -> expression EQ expression .) ]
  ! GE              [ reduce using rule 36 (comp_expr -> expression EQ expression .) ]
  ! LE              [ reduce using rule 36 (comp_expr -> expression EQ expression .) ]
  ! NE              [ reduce using rule 36 (comp_expr -> expression EQ expression .) ]
  ! IN              [ reduce using rule 36 (comp_expr -> expression EQ expression .) ]


state 80

    (37) comp_expr -> expression GT expression .
    (28) expression -> expression . PLUS expression
    (29) expression -> expression . MINUS expression
    (30) expression -> expression . TIMES expression
    (31) expression -> expression . DIVIDE expression
    (32) expression -> expression . POWER expression
    (36) comp_expr -> expression . EQ expression
    (37) comp_expr -> expression . GT expression
    (38) comp_expr -> expression . LT expression
    (39) comp_expr -> expression . GE expression
    (40) comp_expr -> expression . LE expression
    (41) comp_expr -> expression . NE expression
    (45) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    AND             reduce using rule 37 (comp_expr -> expression GT expression .)
    OR              reduce using rule 37 (comp_expr -> expression GT expression .)
    OUTPUT          reduce using rule 37 (comp_expr -> expression GT expression .)
    REPEAT          reduce using rule 37 (comp_expr -> expression GT expression .)
    PAUSE           reduce using rule 37 (comp_expr -> expression GT expression .)
    FUNCTION        reduce using rule 37 (comp_expr -> expression GT expression .)
    WHILE           reduce using rule 37 (comp_expr -> expression GT expression .)
    FOREVER         reduce using rule 37 (comp_expr -> expression GT expression .)
    EXIT            reduce using rule 37 (comp_expr -> expression GT expression .)
    SET             reduce using rule 37 (comp_expr -> expression GT expression .)
    IF              reduce using rule 37 (comp_expr -> expression GT expression .)
    $end            reduce using rule 37 (comp_expr -> expression GT expression .)
    UNTIL           reduce using rule 37 (comp_expr -> expression GT expression .)
    END             reduce using rule 37 (comp_expr -> expression GT expression .)
    ELSE            reduce using rule 37 (comp_expr -> expression GT expression .)
    DO              reduce using rule 37 (comp_expr -> expression GT expression .)
    THEN            reduce using rule 37 (comp_expr -> expression GT expression .)
    RPAREN          reduce using rule 37 (comp_expr -> expression GT expression .)
    TYPE            reduce using rule 37 (comp_expr -> expression GT expression .)
    DATATYPE        reduce using rule 37 (comp_expr -> expression GT expression .)
    LENGTH          reduce using rule 37 (comp_expr -> expression GT expression .)
    FIND            reduce using rule 37 (comp_expr -> expression GT expression .)
    LPAREN          reduce using rule 37 (comp_expr -> expression GT expression .)
    YES             reduce using rule 37 (comp_expr -> expression GT expression .)
    NO              reduce using rule 37 (comp_expr -> expression GT expression .)
    NUMBER          reduce using rule 37 (comp_expr -> expression GT expression .)
    IDENTIFIER      reduce using rule 37 (comp_expr -> expression GT expression .)
    TEXT            reduce using rule 37 (comp_expr -> expression GT expression .)
    INPUT           reduce using rule 37 (comp_expr -> expression GT expression .)
    NOT             reduce using rule 37 (comp_expr -> expression GT expression .)
    RANDOM          reduce using rule 37 (comp_expr -> expression GT expression .)
    TO              reduce using rule 37 (comp_expr -> expression GT expression .)
    FROM            reduce using rule 37 (comp_expr -> expression GT expression .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    TIMES           shift and go to state 46
    DIVIDE          shift and go to state 47
    POWER           shift and go to state 48
    EQ              shift and go to state 49
    GT              shift and go to state 50
    LT              shift and go to state 51
    GE              shift and go to state 52
    LE              shift and go to state 53
    NE              shift and go to state 54
    IN              shift and go to state 55

  ! PLUS            [ reduce using rule 37 (comp_expr -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 37 (comp_expr -> expression GT expression .) ]
  ! TIMES           [ reduce using rule 37 (comp_expr -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 37 (comp_expr -> expression GT expression .) ]
  ! POWER           [ reduce using rule 37 (comp_expr -> expression GT expression .) ]
  ! EQ              [ reduce using rule 37 (comp_expr -> expression GT expression .) ]
  ! GT              [ reduce using rule 37 (comp_expr -> expression GT expression .) ]
  ! LT              [ reduce using rule 37 (comp_expr -> expression GT expression .) ]
  ! GE              [ reduce using rule 37 (comp_expr -> expression GT expression .) ]
  ! LE              [ reduce using rule 37 (comp_expr -> expression GT expression .) ]
  ! NE              [ reduce using rule 37 (comp_expr -> expression GT expression .) ]
  ! IN              [ reduce using rule 37 (comp_expr -> expression GT expression .) ]


state 81

    (38) comp_expr -> expression LT expression .
    (28) expression -> expression . PLUS expression
    (29) expression -> expression . MINUS expression
    (30) expression -> expression . TIMES expression
    (31) expression -> expression . DIVIDE expression
    (32) expression -> expression . POWER expression
    (36) comp_expr -> expression . EQ expression
    (37) comp_expr -> expression . GT expression
    (38) comp_expr -> expression . LT expression
    (39) comp_expr -> expression . GE expression
    (40) comp_expr -> expression . LE expression
    (41) comp_expr -> expression . NE expression
    (45) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    AND             reduce using rule 38 (comp_expr -> expression LT expression .)
    OR              reduce using rule 38 (comp_expr -> expression LT expression .)
    OUTPUT          reduce using rule 38 (comp_expr -> expression LT expression .)
    REPEAT          reduce using rule 38 (comp_expr -> expression LT expression .)
    PAUSE           reduce using rule 38 (comp_expr -> expression LT expression .)
    FUNCTION        reduce using rule 38 (comp_expr -> expression LT expression .)
    WHILE           reduce using rule 38 (comp_expr -> expression LT expression .)
    FOREVER         reduce using rule 38 (comp_expr -> expression LT expression .)
    EXIT            reduce using rule 38 (comp_expr -> expression LT expression .)
    SET             reduce using rule 38 (comp_expr -> expression LT expression .)
    IF              reduce using rule 38 (comp_expr -> expression LT expression .)
    $end            reduce using rule 38 (comp_expr -> expression LT expression .)
    UNTIL           reduce using rule 38 (comp_expr -> expression LT expression .)
    END             reduce using rule 38 (comp_expr -> expression LT expression .)
    ELSE            reduce using rule 38 (comp_expr -> expression LT expression .)
    DO              reduce using rule 38 (comp_expr -> expression LT expression .)
    THEN            reduce using rule 38 (comp_expr -> expression LT expression .)
    RPAREN          reduce using rule 38 (comp_expr -> expression LT expression .)
    TYPE            reduce using rule 38 (comp_expr -> expression LT expression .)
    DATATYPE        reduce using rule 38 (comp_expr -> expression LT expression .)
    LENGTH          reduce using rule 38 (comp_expr -> expression LT expression .)
    FIND            reduce using rule 38 (comp_expr -> expression LT expression .)
    LPAREN          reduce using rule 38 (comp_expr -> expression LT expression .)
    YES             reduce using rule 38 (comp_expr -> expression LT expression .)
    NO              reduce using rule 38 (comp_expr -> expression LT expression .)
    NUMBER          reduce using rule 38 (comp_expr -> expression LT expression .)
    IDENTIFIER      reduce using rule 38 (comp_expr -> expression LT expression .)
    TEXT            reduce using rule 38 (comp_expr -> expression LT expression .)
    INPUT           reduce using rule 38 (comp_expr -> expression LT expression .)
    NOT             reduce using rule 38 (comp_expr -> expression LT expression .)
    RANDOM          reduce using rule 38 (comp_expr -> expression LT expression .)
    TO              reduce using rule 38 (comp_expr -> expression LT expression .)
    FROM            reduce using rule 38 (comp_expr -> expression LT expression .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    TIMES           shift and go to state 46
    DIVIDE          shift and go to state 47
    POWER           shift and go to state 48
    EQ              shift and go to state 49
    GT              shift and go to state 50
    LT              shift and go to state 51
    GE              shift and go to state 52
    LE              shift and go to state 53
    NE              shift and go to state 54
    IN              shift and go to state 55

  ! PLUS            [ reduce using rule 38 (comp_expr -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 38 (comp_expr -> expression LT expression .) ]
  ! TIMES           [ reduce using rule 38 (comp_expr -> expression LT expression .) ]
  ! DIVIDE          [ reduce using rule 38 (comp_expr -> expression LT expression .) ]
  ! POWER           [ reduce using rule 38 (comp_expr -> expression LT expression .) ]
  ! EQ              [ reduce using rule 38 (comp_expr -> expression LT expression .) ]
  ! GT              [ reduce using rule 38 (comp_expr -> expression LT expression .) ]
  ! LT              [ reduce using rule 38 (comp_expr -> expression LT expression .) ]
  ! GE              [ reduce using rule 38 (comp_expr -> expression LT expression .) ]
  ! LE              [ reduce using rule 38 (comp_expr -> expression LT expression .) ]
  ! NE              [ reduce using rule 38 (comp_expr -> expression LT expression .) ]
  ! IN              [ reduce using rule 38 (comp_expr -> expression LT expression .) ]


state 82

    (39) comp_expr -> expression GE expression .
    (28) expression -> expression . PLUS expression
    (29) expression -> expression . MINUS expression
    (30) expression -> expression . TIMES expression
    (31) expression -> expression . DIVIDE expression
    (32) expression -> expression . POWER expression
    (36) comp_expr -> expression . EQ expression
    (37) comp_expr -> expression . GT expression
    (38) comp_expr -> expression . LT expression
    (39) comp_expr -> expression . GE expression
    (40) comp_expr -> expression . LE expression
    (41) comp_expr -> expression . NE expression
    (45) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    AND             reduce using rule 39 (comp_expr -> expression GE expression .)
    OR              reduce using rule 39 (comp_expr -> expression GE expression .)
    OUTPUT          reduce using rule 39 (comp_expr -> expression GE expression .)
    REPEAT          reduce using rule 39 (comp_expr -> expression GE expression .)
    PAUSE           reduce using rule 39 (comp_expr -> expression GE expression .)
    FUNCTION        reduce using rule 39 (comp_expr -> expression GE expression .)
    WHILE           reduce using rule 39 (comp_expr -> expression GE expression .)
    FOREVER         reduce using rule 39 (comp_expr -> expression GE expression .)
    EXIT            reduce using rule 39 (comp_expr -> expression GE expression .)
    SET             reduce using rule 39 (comp_expr -> expression GE expression .)
    IF              reduce using rule 39 (comp_expr -> expression GE expression .)
    $end            reduce using rule 39 (comp_expr -> expression GE expression .)
    UNTIL           reduce using rule 39 (comp_expr -> expression GE expression .)
    END             reduce using rule 39 (comp_expr -> expression GE expression .)
    ELSE            reduce using rule 39 (comp_expr -> expression GE expression .)
    DO              reduce using rule 39 (comp_expr -> expression GE expression .)
    THEN            reduce using rule 39 (comp_expr -> expression GE expression .)
    RPAREN          reduce using rule 39 (comp_expr -> expression GE expression .)
    TYPE            reduce using rule 39 (comp_expr -> expression GE expression .)
    DATATYPE        reduce using rule 39 (comp_expr -> expression GE expression .)
    LENGTH          reduce using rule 39 (comp_expr -> expression GE expression .)
    FIND            reduce using rule 39 (comp_expr -> expression GE expression .)
    LPAREN          reduce using rule 39 (comp_expr -> expression GE expression .)
    YES             reduce using rule 39 (comp_expr -> expression GE expression .)
    NO              reduce using rule 39 (comp_expr -> expression GE expression .)
    NUMBER          reduce using rule 39 (comp_expr -> expression GE expression .)
    IDENTIFIER      reduce using rule 39 (comp_expr -> expression GE expression .)
    TEXT            reduce using rule 39 (comp_expr -> expression GE expression .)
    INPUT           reduce using rule 39 (comp_expr -> expression GE expression .)
    NOT             reduce using rule 39 (comp_expr -> expression GE expression .)
    RANDOM          reduce using rule 39 (comp_expr -> expression GE expression .)
    TO              reduce using rule 39 (comp_expr -> expression GE expression .)
    FROM            reduce using rule 39 (comp_expr -> expression GE expression .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    TIMES           shift and go to state 46
    DIVIDE          shift and go to state 47
    POWER           shift and go to state 48
    EQ              shift and go to state 49
    GT              shift and go to state 50
    LT              shift and go to state 51
    GE              shift and go to state 52
    LE              shift and go to state 53
    NE              shift and go to state 54
    IN              shift and go to state 55

  ! PLUS            [ reduce using rule 39 (comp_expr -> expression GE expression .) ]
  ! MINUS           [ reduce using rule 39 (comp_expr -> expression GE expression .) ]
  ! TIMES           [ reduce using rule 39 (comp_expr -> expression GE expression .) ]
  ! DIVIDE          [ reduce using rule 39 (comp_expr -> expression GE expression .) ]
  ! POWER           [ reduce using rule 39 (comp_expr -> expression GE expression .) ]
  ! EQ              [ reduce using rule 39 (comp_expr -> expression GE expression .) ]
  ! GT              [ reduce using rule 39 (comp_expr -> expression GE expression .) ]
  ! LT              [ reduce using rule 39 (comp_expr -> expression GE expression .) ]
  ! GE              [ reduce using rule 39 (comp_expr -> expression GE expression .) ]
  ! LE              [ reduce using rule 39 (comp_expr -> expression GE expression .) ]
  ! NE              [ reduce using rule 39 (comp_expr -> expression GE expression .) ]
  ! IN              [ reduce using rule 39 (comp_expr -> expression GE expression .) ]


state 83

    (40) comp_expr -> expression LE expression .
    (28) expression -> expression . PLUS expression
    (29) expression -> expression . MINUS expression
    (30) expression -> expression . TIMES expression
    (31) expression -> expression . DIVIDE expression
    (32) expression -> expression . POWER expression
    (36) comp_expr -> expression . EQ expression
    (37) comp_expr -> expression . GT expression
    (38) comp_expr -> expression . LT expression
    (39) comp_expr -> expression . GE expression
    (40) comp_expr -> expression . LE expression
    (41) comp_expr -> expression . NE expression
    (45) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    AND             reduce using rule 40 (comp_expr -> expression LE expression .)
    OR              reduce using rule 40 (comp_expr -> expression LE expression .)
    OUTPUT          reduce using rule 40 (comp_expr -> expression LE expression .)
    REPEAT          reduce using rule 40 (comp_expr -> expression LE expression .)
    PAUSE           reduce using rule 40 (comp_expr -> expression LE expression .)
    FUNCTION        reduce using rule 40 (comp_expr -> expression LE expression .)
    WHILE           reduce using rule 40 (comp_expr -> expression LE expression .)
    FOREVER         reduce using rule 40 (comp_expr -> expression LE expression .)
    EXIT            reduce using rule 40 (comp_expr -> expression LE expression .)
    SET             reduce using rule 40 (comp_expr -> expression LE expression .)
    IF              reduce using rule 40 (comp_expr -> expression LE expression .)
    $end            reduce using rule 40 (comp_expr -> expression LE expression .)
    UNTIL           reduce using rule 40 (comp_expr -> expression LE expression .)
    END             reduce using rule 40 (comp_expr -> expression LE expression .)
    ELSE            reduce using rule 40 (comp_expr -> expression LE expression .)
    DO              reduce using rule 40 (comp_expr -> expression LE expression .)
    THEN            reduce using rule 40 (comp_expr -> expression LE expression .)
    RPAREN          reduce using rule 40 (comp_expr -> expression LE expression .)
    TYPE            reduce using rule 40 (comp_expr -> expression LE expression .)
    DATATYPE        reduce using rule 40 (comp_expr -> expression LE expression .)
    LENGTH          reduce using rule 40 (comp_expr -> expression LE expression .)
    FIND            reduce using rule 40 (comp_expr -> expression LE expression .)
    LPAREN          reduce using rule 40 (comp_expr -> expression LE expression .)
    YES             reduce using rule 40 (comp_expr -> expression LE expression .)
    NO              reduce using rule 40 (comp_expr -> expression LE expression .)
    NUMBER          reduce using rule 40 (comp_expr -> expression LE expression .)
    IDENTIFIER      reduce using rule 40 (comp_expr -> expression LE expression .)
    TEXT            reduce using rule 40 (comp_expr -> expression LE expression .)
    INPUT           reduce using rule 40 (comp_expr -> expression LE expression .)
    NOT             reduce using rule 40 (comp_expr -> expression LE expression .)
    RANDOM          reduce using rule 40 (comp_expr -> expression LE expression .)
    TO              reduce using rule 40 (comp_expr -> expression LE expression .)
    FROM            reduce using rule 40 (comp_expr -> expression LE expression .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    TIMES           shift and go to state 46
    DIVIDE          shift and go to state 47
    POWER           shift and go to state 48
    EQ              shift and go to state 49
    GT              shift and go to state 50
    LT              shift and go to state 51
    GE              shift and go to state 52
    LE              shift and go to state 53
    NE              shift and go to state 54
    IN              shift and go to state 55

  ! PLUS            [ reduce using rule 40 (comp_expr -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 40 (comp_expr -> expression LE expression .) ]
  ! TIMES           [ reduce using rule 40 (comp_expr -> expression LE expression .) ]
  ! DIVIDE          [ reduce using rule 40 (comp_expr -> expression LE expression .) ]
  ! POWER           [ reduce using rule 40 (comp_expr -> expression LE expression .) ]
  ! EQ              [ reduce using rule 40 (comp_expr -> expression LE expression .) ]
  ! GT              [ reduce using rule 40 (comp_expr -> expression LE expression .) ]
  ! LT              [ reduce using rule 40 (comp_expr -> expression LE expression .) ]
  ! GE              [ reduce using rule 40 (comp_expr -> expression LE expression .) ]
  ! LE              [ reduce using rule 40 (comp_expr -> expression LE expression .) ]
  ! NE              [ reduce using rule 40 (comp_expr -> expression LE expression .) ]
  ! IN              [ reduce using rule 40 (comp_expr -> expression LE expression .) ]


state 84

    (41) comp_expr -> expression NE expression .
    (28) expression -> expression . PLUS expression
    (29) expression -> expression . MINUS expression
    (30) expression -> expression . TIMES expression
    (31) expression -> expression . DIVIDE expression
    (32) expression -> expression . POWER expression
    (36) comp_expr -> expression . EQ expression
    (37) comp_expr -> expression . GT expression
    (38) comp_expr -> expression . LT expression
    (39) comp_expr -> expression . GE expression
    (40) comp_expr -> expression . LE expression
    (41) comp_expr -> expression . NE expression
    (45) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    AND             reduce using rule 41 (comp_expr -> expression NE expression .)
    OR              reduce using rule 41 (comp_expr -> expression NE expression .)
    OUTPUT          reduce using rule 41 (comp_expr -> expression NE expression .)
    REPEAT          reduce using rule 41 (comp_expr -> expression NE expression .)
    PAUSE           reduce using rule 41 (comp_expr -> expression NE expression .)
    FUNCTION        reduce using rule 41 (comp_expr -> expression NE expression .)
    WHILE           reduce using rule 41 (comp_expr -> expression NE expression .)
    FOREVER         reduce using rule 41 (comp_expr -> expression NE expression .)
    EXIT            reduce using rule 41 (comp_expr -> expression NE expression .)
    SET             reduce using rule 41 (comp_expr -> expression NE expression .)
    IF              reduce using rule 41 (comp_expr -> expression NE expression .)
    $end            reduce using rule 41 (comp_expr -> expression NE expression .)
    UNTIL           reduce using rule 41 (comp_expr -> expression NE expression .)
    END             reduce using rule 41 (comp_expr -> expression NE expression .)
    ELSE            reduce using rule 41 (comp_expr -> expression NE expression .)
    DO              reduce using rule 41 (comp_expr -> expression NE expression .)
    THEN            reduce using rule 41 (comp_expr -> expression NE expression .)
    RPAREN          reduce using rule 41 (comp_expr -> expression NE expression .)
    TYPE            reduce using rule 41 (comp_expr -> expression NE expression .)
    DATATYPE        reduce using rule 41 (comp_expr -> expression NE expression .)
    LENGTH          reduce using rule 41 (comp_expr -> expression NE expression .)
    FIND            reduce using rule 41 (comp_expr -> expression NE expression .)
    LPAREN          reduce using rule 41 (comp_expr -> expression NE expression .)
    YES             reduce using rule 41 (comp_expr -> expression NE expression .)
    NO              reduce using rule 41 (comp_expr -> expression NE expression .)
    NUMBER          reduce using rule 41 (comp_expr -> expression NE expression .)
    IDENTIFIER      reduce using rule 41 (comp_expr -> expression NE expression .)
    TEXT            reduce using rule 41 (comp_expr -> expression NE expression .)
    INPUT           reduce using rule 41 (comp_expr -> expression NE expression .)
    NOT             reduce using rule 41 (comp_expr -> expression NE expression .)
    RANDOM          reduce using rule 41 (comp_expr -> expression NE expression .)
    TO              reduce using rule 41 (comp_expr -> expression NE expression .)
    FROM            reduce using rule 41 (comp_expr -> expression NE expression .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    TIMES           shift and go to state 46
    DIVIDE          shift and go to state 47
    POWER           shift and go to state 48
    EQ              shift and go to state 49
    GT              shift and go to state 50
    LT              shift and go to state 51
    GE              shift and go to state 52
    LE              shift and go to state 53
    NE              shift and go to state 54
    IN              shift and go to state 55

  ! PLUS            [ reduce using rule 41 (comp_expr -> expression NE expression .) ]
  ! MINUS           [ reduce using rule 41 (comp_expr -> expression NE expression .) ]
  ! TIMES           [ reduce using rule 41 (comp_expr -> expression NE expression .) ]
  ! DIVIDE          [ reduce using rule 41 (comp_expr -> expression NE expression .) ]
  ! POWER           [ reduce using rule 41 (comp_expr -> expression NE expression .) ]
  ! EQ              [ reduce using rule 41 (comp_expr -> expression NE expression .) ]
  ! GT              [ reduce using rule 41 (comp_expr -> expression NE expression .) ]
  ! LT              [ reduce using rule 41 (comp_expr -> expression NE expression .) ]
  ! GE              [ reduce using rule 41 (comp_expr -> expression NE expression .) ]
  ! LE              [ reduce using rule 41 (comp_expr -> expression NE expression .) ]
  ! NE              [ reduce using rule 41 (comp_expr -> expression NE expression .) ]
  ! IN              [ reduce using rule 41 (comp_expr -> expression NE expression .) ]


state 85

    (45) comp_expr -> expression IN expression .
    (28) expression -> expression . PLUS expression
    (29) expression -> expression . MINUS expression
    (30) expression -> expression . TIMES expression
    (31) expression -> expression . DIVIDE expression
    (32) expression -> expression . POWER expression
    (36) comp_expr -> expression . EQ expression
    (37) comp_expr -> expression . GT expression
    (38) comp_expr -> expression . LT expression
    (39) comp_expr -> expression . GE expression
    (40) comp_expr -> expression . LE expression
    (41) comp_expr -> expression . NE expression
    (45) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    AND             reduce using rule 45 (comp_expr -> expression IN expression .)
    OR              reduce using rule 45 (comp_expr -> expression IN expression .)
    OUTPUT          reduce using rule 45 (comp_expr -> expression IN expression .)
    REPEAT          reduce using rule 45 (comp_expr -> expression IN expression .)
    PAUSE           reduce using rule 45 (comp_expr -> expression IN expression .)
    FUNCTION        reduce using rule 45 (comp_expr -> expression IN expression .)
    WHILE           reduce using rule 45 (comp_expr -> expression IN expression .)
    FOREVER         reduce using rule 45 (comp_expr -> expression IN expression .)
    EXIT            reduce using rule 45 (comp_expr -> expression IN expression .)
    SET             reduce using rule 45 (comp_expr -> expression IN expression .)
    IF              reduce using rule 45 (comp_expr -> expression IN expression .)
    $end            reduce using rule 45 (comp_expr -> expression IN expression .)
    UNTIL           reduce using rule 45 (comp_expr -> expression IN expression .)
    END             reduce using rule 45 (comp_expr -> expression IN expression .)
    ELSE            reduce using rule 45 (comp_expr -> expression IN expression .)
    DO              reduce using rule 45 (comp_expr -> expression IN expression .)
    THEN            reduce using rule 45 (comp_expr -> expression IN expression .)
    RPAREN          reduce using rule 45 (comp_expr -> expression IN expression .)
    TYPE            reduce using rule 45 (comp_expr -> expression IN expression .)
    DATATYPE        reduce using rule 45 (comp_expr -> expression IN expression .)
    LENGTH          reduce using rule 45 (comp_expr -> expression IN expression .)
    FIND            reduce using rule 45 (comp_expr -> expression IN expression .)
    LPAREN          reduce using rule 45 (comp_expr -> expression IN expression .)
    YES             reduce using rule 45 (comp_expr -> expression IN expression .)
    NO              reduce using rule 45 (comp_expr -> expression IN expression .)
    NUMBER          reduce using rule 45 (comp_expr -> expression IN expression .)
    IDENTIFIER      reduce using rule 45 (comp_expr -> expression IN expression .)
    TEXT            reduce using rule 45 (comp_expr -> expression IN expression .)
    INPUT           reduce using rule 45 (comp_expr -> expression IN expression .)
    NOT             reduce using rule 45 (comp_expr -> expression IN expression .)
    RANDOM          reduce using rule 45 (comp_expr -> expression IN expression .)
    TO              reduce using rule 45 (comp_expr -> expression IN expression .)
    FROM            reduce using rule 45 (comp_expr -> expression IN expression .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    TIMES           shift and go to state 46
    DIVIDE          shift and go to state 47
    POWER           shift and go to state 48
    EQ              shift and go to state 49
    GT              shift and go to state 50
    LT              shift and go to state 51
    GE              shift and go to state 52
    LE              shift and go to state 53
    NE              shift and go to state 54
    IN              shift and go to state 55

  ! PLUS            [ reduce using rule 45 (comp_expr -> expression IN expression .) ]
  ! MINUS           [ reduce using rule 45 (comp_expr -> expression IN expression .) ]
  ! TIMES           [ reduce using rule 45 (comp_expr -> expression IN expression .) ]
  ! DIVIDE          [ reduce using rule 45 (comp_expr -> expression IN expression .) ]
  ! POWER           [ reduce using rule 45 (comp_expr -> expression IN expression .) ]
  ! EQ              [ reduce using rule 45 (comp_expr -> expression IN expression .) ]
  ! GT              [ reduce using rule 45 (comp_expr -> expression IN expression .) ]
  ! LT              [ reduce using rule 45 (comp_expr -> expression IN expression .) ]
  ! GE              [ reduce using rule 45 (comp_expr -> expression IN expression .) ]
  ! LE              [ reduce using rule 45 (comp_expr -> expression IN expression .) ]
  ! NE              [ reduce using rule 45 (comp_expr -> expression IN expression .) ]
  ! IN              [ reduce using rule 45 (comp_expr -> expression IN expression .) ]


state 86

    (23) expression -> DATATYPE FROM expression . TO expression FROM expression
    (28) expression -> expression . PLUS expression
    (29) expression -> expression . MINUS expression
    (30) expression -> expression . TIMES expression
    (31) expression -> expression . DIVIDE expression
    (32) expression -> expression . POWER expression
    (36) comp_expr -> expression . EQ expression
    (37) comp_expr -> expression . GT expression
    (38) comp_expr -> expression . LT expression
    (39) comp_expr -> expression . GE expression
    (40) comp_expr -> expression . LE expression
    (41) comp_expr -> expression . NE expression
    (45) comp_expr -> expression . IN expression

    TO              shift and go to state 104
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    TIMES           shift and go to state 46
    DIVIDE          shift and go to state 47
    POWER           shift and go to state 48
    EQ              shift and go to state 49
    GT              shift and go to state 50
    LT              shift and go to state 51
    GE              shift and go to state 52
    LE              shift and go to state 53
    NE              shift and go to state 54
    IN              shift and go to state 55


state 87

    (24) expression -> LENGTH OF expression .
    (28) expression -> expression . PLUS expression
    (29) expression -> expression . MINUS expression
    (30) expression -> expression . TIMES expression
    (31) expression -> expression . DIVIDE expression
    (32) expression -> expression . POWER expression
    (36) comp_expr -> expression . EQ expression
    (37) comp_expr -> expression . GT expression
    (38) comp_expr -> expression . LT expression
    (39) comp_expr -> expression . GE expression
    (40) comp_expr -> expression . LE expression
    (41) comp_expr -> expression . NE expression
    (45) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    OUTPUT          reduce using rule 24 (expression -> LENGTH OF expression .)
    REPEAT          reduce using rule 24 (expression -> LENGTH OF expression .)
    PAUSE           reduce using rule 24 (expression -> LENGTH OF expression .)
    FUNCTION        reduce using rule 24 (expression -> LENGTH OF expression .)
    WHILE           reduce using rule 24 (expression -> LENGTH OF expression .)
    FOREVER         reduce using rule 24 (expression -> LENGTH OF expression .)
    EXIT            reduce using rule 24 (expression -> LENGTH OF expression .)
    SET             reduce using rule 24 (expression -> LENGTH OF expression .)
    IF              reduce using rule 24 (expression -> LENGTH OF expression .)
    $end            reduce using rule 24 (expression -> LENGTH OF expression .)
    UNTIL           reduce using rule 24 (expression -> LENGTH OF expression .)
    END             reduce using rule 24 (expression -> LENGTH OF expression .)
    ELSE            reduce using rule 24 (expression -> LENGTH OF expression .)
    DO              reduce using rule 24 (expression -> LENGTH OF expression .)
    THEN            reduce using rule 24 (expression -> LENGTH OF expression .)
    RPAREN          reduce using rule 24 (expression -> LENGTH OF expression .)
    AND             reduce using rule 24 (expression -> LENGTH OF expression .)
    OR              reduce using rule 24 (expression -> LENGTH OF expression .)
    TYPE            reduce using rule 24 (expression -> LENGTH OF expression .)
    DATATYPE        reduce using rule 24 (expression -> LENGTH OF expression .)
    LENGTH          reduce using rule 24 (expression -> LENGTH OF expression .)
    FIND            reduce using rule 24 (expression -> LENGTH OF expression .)
    LPAREN          reduce using rule 24 (expression -> LENGTH OF expression .)
    YES             reduce using rule 24 (expression -> LENGTH OF expression .)
    NO              reduce using rule 24 (expression -> LENGTH OF expression .)
    NUMBER          reduce using rule 24 (expression -> LENGTH OF expression .)
    IDENTIFIER      reduce using rule 24 (expression -> LENGTH OF expression .)
    TEXT            reduce using rule 24 (expression -> LENGTH OF expression .)
    INPUT           reduce using rule 24 (expression -> LENGTH OF expression .)
    NOT             reduce using rule 24 (expression -> LENGTH OF expression .)
    RANDOM          reduce using rule 24 (expression -> LENGTH OF expression .)
    TO              reduce using rule 24 (expression -> LENGTH OF expression .)
    FROM            reduce using rule 24 (expression -> LENGTH OF expression .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    TIMES           shift and go to state 46
    DIVIDE          shift and go to state 47
    POWER           shift and go to state 48
    EQ              shift and go to state 49
    GT              shift and go to state 50
    LT              shift and go to state 51
    GE              shift and go to state 52
    LE              shift and go to state 53
    NE              shift and go to state 54
    IN              shift and go to state 55

  ! PLUS            [ reduce using rule 24 (expression -> LENGTH OF expression .) ]
  ! MINUS           [ reduce using rule 24 (expression -> LENGTH OF expression .) ]
  ! TIMES           [ reduce using rule 24 (expression -> LENGTH OF expression .) ]
  ! DIVIDE          [ reduce using rule 24 (expression -> LENGTH OF expression .) ]
  ! POWER           [ reduce using rule 24 (expression -> LENGTH OF expression .) ]
  ! EQ              [ reduce using rule 24 (expression -> LENGTH OF expression .) ]
  ! GT              [ reduce using rule 24 (expression -> LENGTH OF expression .) ]
  ! LT              [ reduce using rule 24 (expression -> LENGTH OF expression .) ]
  ! GE              [ reduce using rule 24 (expression -> LENGTH OF expression .) ]
  ! LE              [ reduce using rule 24 (expression -> LENGTH OF expression .) ]
  ! NE              [ reduce using rule 24 (expression -> LENGTH OF expression .) ]
  ! IN              [ reduce using rule 24 (expression -> LENGTH OF expression .) ]


state 88

    (25) expression -> FIND OCCURENCES OF . expression IN expression
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (24) expression -> . LENGTH OF expression
    (25) expression -> . FIND OCCURENCES OF expression IN expression
    (28) expression -> . expression PLUS expression
    (29) expression -> . expression MINUS expression
    (30) expression -> . expression TIMES expression
    (31) expression -> . expression DIVIDE expression
    (32) expression -> . expression POWER expression
    (33) expression -> . LPAREN expression RPAREN
    (34) expression -> . YES
    (35) expression -> . NO
    (46) expression -> . comp_expr
    (47) expression -> . NUMBER
    (48) expression -> . IDENTIFIER
    (49) expression -> . random_statement
    (50) expression -> . TEXT
    (51) expression -> . INPUT
    (36) comp_expr -> . expression EQ expression
    (37) comp_expr -> . expression GT expression
    (38) comp_expr -> . expression LT expression
    (39) comp_expr -> . expression GE expression
    (40) comp_expr -> . expression LE expression
    (41) comp_expr -> . expression NE expression
    (42) comp_expr -> . comp_expr AND comp_expr
    (43) comp_expr -> . comp_expr OR comp_expr
    (44) comp_expr -> . NOT expression
    (45) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LENGTH          shift and go to state 18
    FIND            shift and go to state 19
    LPAREN          shift and go to state 20
    YES             shift and go to state 21
    NO              shift and go to state 22
    NUMBER          shift and go to state 24
    IDENTIFIER      shift and go to state 25
    TEXT            shift and go to state 37
    INPUT           shift and go to state 28
    NOT             shift and go to state 29
    RANDOM          shift and go to state 30

    expression                     shift and go to state 105
    comp_expr                      shift and go to state 23
    random_statement               shift and go to state 26

state 89

    (33) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    POWER           reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    IN              reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    OUTPUT          reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    REPEAT          reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    PAUSE           reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    FUNCTION        reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    FOREVER         reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    EXIT            reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    SET             reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    UNTIL           reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    END             reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    DO              reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    THEN            reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    TYPE            reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    DATATYPE        reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    LENGTH          reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    FIND            reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    YES             reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    NO              reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    NUMBER          reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    TEXT            reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    INPUT           reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    NOT             reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    RANDOM          reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    TO              reduce using rule 33 (expression -> LPAREN expression RPAREN .)
    FROM            reduce using rule 33 (expression -> LPAREN expression RPAREN .)


state 90

    (42) comp_expr -> comp_expr AND comp_expr .
    (42) comp_expr -> comp_expr . AND comp_expr
    (43) comp_expr -> comp_expr . OR comp_expr
    (46) expression -> comp_expr .

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! reduce/reduce conflict for EQ resolved using rule 42 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for GT resolved using rule 42 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for LT resolved using rule 42 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for GE resolved using rule 42 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for LE resolved using rule 42 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for NE resolved using rule 42 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for IN resolved using rule 42 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for PLUS resolved using rule 42 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for MINUS resolved using rule 42 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for TIMES resolved using rule 42 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 42 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for POWER resolved using rule 42 (comp_expr -> comp_expr AND comp_expr .)
    PLUS            reduce using rule 42 (comp_expr -> comp_expr AND comp_expr .)
    MINUS           reduce using rule 42 (comp_expr -> comp_expr AND comp_expr .)
    TIMES           reduce using rule 42 (comp_expr -> comp_expr AND comp_expr .)
    DIVIDE          reduce using rule 42 (comp_expr -> comp_expr AND comp_expr .)
    POWER           reduce using rule 42 (comp_expr -> comp_expr AND comp_expr .)
    EQ              reduce using rule 42 (comp_expr -> comp_expr AND comp_expr .)
    GT              reduce using rule 42 (comp_expr -> comp_expr AND comp_expr .)
    LT              reduce using rule 42 (comp_expr -> comp_expr AND comp_expr .)
    GE              reduce using rule 42 (comp_expr -> comp_expr AND comp_expr .)
    LE              reduce using rule 42 (comp_expr -> comp_expr AND comp_expr .)
    NE              reduce using rule 42 (comp_expr -> comp_expr AND comp_expr .)
    IN              reduce using rule 42 (comp_expr -> comp_expr AND comp_expr .)
    OUTPUT          reduce using rule 42 (comp_expr -> comp_expr AND comp_expr .)
    REPEAT          reduce using rule 42 (comp_expr -> comp_expr AND comp_expr .)
    PAUSE           reduce using rule 42 (comp_expr -> comp_expr AND comp_expr .)
    FUNCTION        reduce using rule 42 (comp_expr -> comp_expr AND comp_expr .)
    WHILE           reduce using rule 42 (comp_expr -> comp_expr AND comp_expr .)
    FOREVER         reduce using rule 42 (comp_expr -> comp_expr AND comp_expr .)
    EXIT            reduce using rule 42 (comp_expr -> comp_expr AND comp_expr .)
    SET             reduce using rule 42 (comp_expr -> comp_expr AND comp_expr .)
    IF              reduce using rule 42 (comp_expr -> comp_expr AND comp_expr .)
    $end            reduce using rule 42 (comp_expr -> comp_expr AND comp_expr .)
    UNTIL           reduce using rule 42 (comp_expr -> comp_expr AND comp_expr .)
    END             reduce using rule 42 (comp_expr -> comp_expr AND comp_expr .)
    ELSE            reduce using rule 42 (comp_expr -> comp_expr AND comp_expr .)
    DO              reduce using rule 42 (comp_expr -> comp_expr AND comp_expr .)
    THEN            reduce using rule 42 (comp_expr -> comp_expr AND comp_expr .)
    RPAREN          reduce using rule 42 (comp_expr -> comp_expr AND comp_expr .)
    TYPE            reduce using rule 42 (comp_expr -> comp_expr AND comp_expr .)
    DATATYPE        reduce using rule 42 (comp_expr -> comp_expr AND comp_expr .)
    LENGTH          reduce using rule 42 (comp_expr -> comp_expr AND comp_expr .)
    FIND            reduce using rule 42 (comp_expr -> comp_expr AND comp_expr .)
    LPAREN          reduce using rule 42 (comp_expr -> comp_expr AND comp_expr .)
    YES             reduce using rule 42 (comp_expr -> comp_expr AND comp_expr .)
    NO              reduce using rule 42 (comp_expr -> comp_expr AND comp_expr .)
    NUMBER          reduce using rule 42 (comp_expr -> comp_expr AND comp_expr .)
    IDENTIFIER      reduce using rule 42 (comp_expr -> comp_expr AND comp_expr .)
    TEXT            reduce using rule 42 (comp_expr -> comp_expr AND comp_expr .)
    INPUT           reduce using rule 42 (comp_expr -> comp_expr AND comp_expr .)
    NOT             reduce using rule 42 (comp_expr -> comp_expr AND comp_expr .)
    RANDOM          reduce using rule 42 (comp_expr -> comp_expr AND comp_expr .)
    TO              reduce using rule 42 (comp_expr -> comp_expr AND comp_expr .)
    FROM            reduce using rule 42 (comp_expr -> comp_expr AND comp_expr .)
    AND             shift and go to state 60
    OR              shift and go to state 61

  ! AND             [ reduce using rule 42 (comp_expr -> comp_expr AND comp_expr .) ]
  ! OR              [ reduce using rule 42 (comp_expr -> comp_expr AND comp_expr .) ]
  ! EQ              [ reduce using rule 46 (expression -> comp_expr .) ]
  ! GT              [ reduce using rule 46 (expression -> comp_expr .) ]
  ! LT              [ reduce using rule 46 (expression -> comp_expr .) ]
  ! GE              [ reduce using rule 46 (expression -> comp_expr .) ]
  ! LE              [ reduce using rule 46 (expression -> comp_expr .) ]
  ! NE              [ reduce using rule 46 (expression -> comp_expr .) ]
  ! IN              [ reduce using rule 46 (expression -> comp_expr .) ]
  ! PLUS            [ reduce using rule 46 (expression -> comp_expr .) ]
  ! MINUS           [ reduce using rule 46 (expression -> comp_expr .) ]
  ! TIMES           [ reduce using rule 46 (expression -> comp_expr .) ]
  ! DIVIDE          [ reduce using rule 46 (expression -> comp_expr .) ]
  ! POWER           [ reduce using rule 46 (expression -> comp_expr .) ]


state 91

    (36) comp_expr -> expression . EQ expression
    (37) comp_expr -> expression . GT expression
    (38) comp_expr -> expression . LT expression
    (39) comp_expr -> expression . GE expression
    (40) comp_expr -> expression . LE expression
    (41) comp_expr -> expression . NE expression
    (45) comp_expr -> expression . IN expression
    (28) expression -> expression . PLUS expression
    (29) expression -> expression . MINUS expression
    (30) expression -> expression . TIMES expression
    (31) expression -> expression . DIVIDE expression
    (32) expression -> expression . POWER expression

    EQ              shift and go to state 49
    GT              shift and go to state 50
    LT              shift and go to state 51
    GE              shift and go to state 52
    LE              shift and go to state 53
    NE              shift and go to state 54
    IN              shift and go to state 55
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    TIMES           shift and go to state 46
    DIVIDE          shift and go to state 47
    POWER           shift and go to state 48


state 92

    (43) comp_expr -> comp_expr OR comp_expr .
    (42) comp_expr -> comp_expr . AND comp_expr
    (43) comp_expr -> comp_expr . OR comp_expr
    (46) expression -> comp_expr .

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! reduce/reduce conflict for EQ resolved using rule 43 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for GT resolved using rule 43 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for LT resolved using rule 43 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for GE resolved using rule 43 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for LE resolved using rule 43 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for NE resolved using rule 43 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for IN resolved using rule 43 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for PLUS resolved using rule 43 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for MINUS resolved using rule 43 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for TIMES resolved using rule 43 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 43 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for POWER resolved using rule 43 (comp_expr -> comp_expr OR comp_expr .)
    PLUS            reduce using rule 43 (comp_expr -> comp_expr OR comp_expr .)
    MINUS           reduce using rule 43 (comp_expr -> comp_expr OR comp_expr .)
    TIMES           reduce using rule 43 (comp_expr -> comp_expr OR comp_expr .)
    DIVIDE          reduce using rule 43 (comp_expr -> comp_expr OR comp_expr .)
    POWER           reduce using rule 43 (comp_expr -> comp_expr OR comp_expr .)
    EQ              reduce using rule 43 (comp_expr -> comp_expr OR comp_expr .)
    GT              reduce using rule 43 (comp_expr -> comp_expr OR comp_expr .)
    LT              reduce using rule 43 (comp_expr -> comp_expr OR comp_expr .)
    GE              reduce using rule 43 (comp_expr -> comp_expr OR comp_expr .)
    LE              reduce using rule 43 (comp_expr -> comp_expr OR comp_expr .)
    NE              reduce using rule 43 (comp_expr -> comp_expr OR comp_expr .)
    IN              reduce using rule 43 (comp_expr -> comp_expr OR comp_expr .)
    OUTPUT          reduce using rule 43 (comp_expr -> comp_expr OR comp_expr .)
    REPEAT          reduce using rule 43 (comp_expr -> comp_expr OR comp_expr .)
    PAUSE           reduce using rule 43 (comp_expr -> comp_expr OR comp_expr .)
    FUNCTION        reduce using rule 43 (comp_expr -> comp_expr OR comp_expr .)
    WHILE           reduce using rule 43 (comp_expr -> comp_expr OR comp_expr .)
    FOREVER         reduce using rule 43 (comp_expr -> comp_expr OR comp_expr .)
    EXIT            reduce using rule 43 (comp_expr -> comp_expr OR comp_expr .)
    SET             reduce using rule 43 (comp_expr -> comp_expr OR comp_expr .)
    IF              reduce using rule 43 (comp_expr -> comp_expr OR comp_expr .)
    $end            reduce using rule 43 (comp_expr -> comp_expr OR comp_expr .)
    UNTIL           reduce using rule 43 (comp_expr -> comp_expr OR comp_expr .)
    END             reduce using rule 43 (comp_expr -> comp_expr OR comp_expr .)
    ELSE            reduce using rule 43 (comp_expr -> comp_expr OR comp_expr .)
    DO              reduce using rule 43 (comp_expr -> comp_expr OR comp_expr .)
    THEN            reduce using rule 43 (comp_expr -> comp_expr OR comp_expr .)
    RPAREN          reduce using rule 43 (comp_expr -> comp_expr OR comp_expr .)
    TYPE            reduce using rule 43 (comp_expr -> comp_expr OR comp_expr .)
    DATATYPE        reduce using rule 43 (comp_expr -> comp_expr OR comp_expr .)
    LENGTH          reduce using rule 43 (comp_expr -> comp_expr OR comp_expr .)
    FIND            reduce using rule 43 (comp_expr -> comp_expr OR comp_expr .)
    LPAREN          reduce using rule 43 (comp_expr -> comp_expr OR comp_expr .)
    YES             reduce using rule 43 (comp_expr -> comp_expr OR comp_expr .)
    NO              reduce using rule 43 (comp_expr -> comp_expr OR comp_expr .)
    NUMBER          reduce using rule 43 (comp_expr -> comp_expr OR comp_expr .)
    IDENTIFIER      reduce using rule 43 (comp_expr -> comp_expr OR comp_expr .)
    TEXT            reduce using rule 43 (comp_expr -> comp_expr OR comp_expr .)
    INPUT           reduce using rule 43 (comp_expr -> comp_expr OR comp_expr .)
    NOT             reduce using rule 43 (comp_expr -> comp_expr OR comp_expr .)
    RANDOM          reduce using rule 43 (comp_expr -> comp_expr OR comp_expr .)
    TO              reduce using rule 43 (comp_expr -> comp_expr OR comp_expr .)
    FROM            reduce using rule 43 (comp_expr -> comp_expr OR comp_expr .)
    AND             shift and go to state 60
    OR              shift and go to state 61

  ! AND             [ reduce using rule 43 (comp_expr -> comp_expr OR comp_expr .) ]
  ! OR              [ reduce using rule 43 (comp_expr -> comp_expr OR comp_expr .) ]
  ! EQ              [ reduce using rule 46 (expression -> comp_expr .) ]
  ! GT              [ reduce using rule 46 (expression -> comp_expr .) ]
  ! LT              [ reduce using rule 46 (expression -> comp_expr .) ]
  ! GE              [ reduce using rule 46 (expression -> comp_expr .) ]
  ! LE              [ reduce using rule 46 (expression -> comp_expr .) ]
  ! NE              [ reduce using rule 46 (expression -> comp_expr .) ]
  ! IN              [ reduce using rule 46 (expression -> comp_expr .) ]
  ! PLUS            [ reduce using rule 46 (expression -> comp_expr .) ]
  ! MINUS           [ reduce using rule 46 (expression -> comp_expr .) ]
  ! TIMES           [ reduce using rule 46 (expression -> comp_expr .) ]
  ! DIVIDE          [ reduce using rule 46 (expression -> comp_expr .) ]
  ! POWER           [ reduce using rule 46 (expression -> comp_expr .) ]


state 93

    (6) ask -> TEXT EXPECTING INPUT . AND DATATYPE

    AND             shift and go to state 106


state 94

    (7) random_statement -> RANDOM DATATYPE FROM . expression TO expression
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (24) expression -> . LENGTH OF expression
    (25) expression -> . FIND OCCURENCES OF expression IN expression
    (28) expression -> . expression PLUS expression
    (29) expression -> . expression MINUS expression
    (30) expression -> . expression TIMES expression
    (31) expression -> . expression DIVIDE expression
    (32) expression -> . expression POWER expression
    (33) expression -> . LPAREN expression RPAREN
    (34) expression -> . YES
    (35) expression -> . NO
    (46) expression -> . comp_expr
    (47) expression -> . NUMBER
    (48) expression -> . IDENTIFIER
    (49) expression -> . random_statement
    (50) expression -> . TEXT
    (51) expression -> . INPUT
    (36) comp_expr -> . expression EQ expression
    (37) comp_expr -> . expression GT expression
    (38) comp_expr -> . expression LT expression
    (39) comp_expr -> . expression GE expression
    (40) comp_expr -> . expression LE expression
    (41) comp_expr -> . expression NE expression
    (42) comp_expr -> . comp_expr AND comp_expr
    (43) comp_expr -> . comp_expr OR comp_expr
    (44) comp_expr -> . NOT expression
    (45) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LENGTH          shift and go to state 18
    FIND            shift and go to state 19
    LPAREN          shift and go to state 20
    YES             shift and go to state 21
    NO              shift and go to state 22
    NUMBER          shift and go to state 24
    IDENTIFIER      shift and go to state 25
    TEXT            shift and go to state 37
    INPUT           shift and go to state 28
    NOT             shift and go to state 29
    RANDOM          shift and go to state 30

    expression                     shift and go to state 107
    comp_expr                      shift and go to state 23
    random_statement               shift and go to state 26

state 95

    (12) statement -> var_assignment TO items type_stmt .

    OUTPUT          reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    REPEAT          reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    PAUSE           reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    FUNCTION        reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    WHILE           reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    FOREVER         reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    EXIT            reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    SET             reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    IF              reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    $end            reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    UNTIL           reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    END             reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    ELSE            reduce using rule 12 (statement -> var_assignment TO items type_stmt .)


state 96

    (27) items -> items expression .
    (28) expression -> expression . PLUS expression
    (29) expression -> expression . MINUS expression
    (30) expression -> expression . TIMES expression
    (31) expression -> expression . DIVIDE expression
    (32) expression -> expression . POWER expression
    (36) comp_expr -> expression . EQ expression
    (37) comp_expr -> expression . GT expression
    (38) comp_expr -> expression . LT expression
    (39) comp_expr -> expression . GE expression
    (40) comp_expr -> expression . LE expression
    (41) comp_expr -> expression . NE expression
    (45) comp_expr -> expression . IN expression

    TYPE            reduce using rule 27 (items -> items expression .)
    DATATYPE        reduce using rule 27 (items -> items expression .)
    LENGTH          reduce using rule 27 (items -> items expression .)
    FIND            reduce using rule 27 (items -> items expression .)
    LPAREN          reduce using rule 27 (items -> items expression .)
    YES             reduce using rule 27 (items -> items expression .)
    NO              reduce using rule 27 (items -> items expression .)
    NUMBER          reduce using rule 27 (items -> items expression .)
    IDENTIFIER      reduce using rule 27 (items -> items expression .)
    TEXT            reduce using rule 27 (items -> items expression .)
    INPUT           reduce using rule 27 (items -> items expression .)
    NOT             reduce using rule 27 (items -> items expression .)
    RANDOM          reduce using rule 27 (items -> items expression .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    TIMES           shift and go to state 46
    DIVIDE          shift and go to state 47
    POWER           shift and go to state 48
    EQ              shift and go to state 49
    GT              shift and go to state 50
    LT              shift and go to state 51
    GE              shift and go to state 52
    LE              shift and go to state 53
    NE              shift and go to state 54
    IN              shift and go to state 55


state 97

    (18) type_stmt -> TYPE . DATATYPE

    DATATYPE        shift and go to state 108


state 98

    (15) statement -> if_then ELSE THEN statements . end_statement
    (2) statements -> statements . statement
    (3) end_statement -> . END
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . WHILE expression DO statements end_statement
    (21) statement -> . FOREVER DO statements end_statement
    (22) statement -> . EXIT LOOP
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    END             shift and go to state 34
    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    FOREVER         shift and go to state 10
    EXIT            shift and go to state 11
    SET             shift and go to state 12
    IF              shift and go to state 13

    if_then                        shift and go to state 5
    end_statement                  shift and go to state 109
    statement                      shift and go to state 14
    var_assignment                 shift and go to state 4

state 99

    (16) statement -> REPEAT statements UNTIL expression .
    (28) expression -> expression . PLUS expression
    (29) expression -> expression . MINUS expression
    (30) expression -> expression . TIMES expression
    (31) expression -> expression . DIVIDE expression
    (32) expression -> expression . POWER expression
    (36) comp_expr -> expression . EQ expression
    (37) comp_expr -> expression . GT expression
    (38) comp_expr -> expression . LT expression
    (39) comp_expr -> expression . GE expression
    (40) comp_expr -> expression . LE expression
    (41) comp_expr -> expression . NE expression
    (45) comp_expr -> expression . IN expression

    OUTPUT          reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    REPEAT          reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    PAUSE           reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    FUNCTION        reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    WHILE           reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    FOREVER         reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    EXIT            reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    SET             reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    IF              reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    $end            reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    UNTIL           reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    END             reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    ELSE            reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    TIMES           shift and go to state 46
    DIVIDE          shift and go to state 47
    POWER           shift and go to state 48
    EQ              shift and go to state 49
    GT              shift and go to state 50
    LT              shift and go to state 51
    GE              shift and go to state 52
    LE              shift and go to state 53
    NE              shift and go to state 54
    IN              shift and go to state 55


state 100

    (19) statement -> FUNCTION IDENTIFIER MEANS statements . end_statement
    (2) statements -> statements . statement
    (3) end_statement -> . END
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . WHILE expression DO statements end_statement
    (21) statement -> . FOREVER DO statements end_statement
    (22) statement -> . EXIT LOOP
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    END             shift and go to state 34
    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    FOREVER         shift and go to state 10
    EXIT            shift and go to state 11
    SET             shift and go to state 12
    IF              shift and go to state 13

    end_statement                  shift and go to state 110
    statement                      shift and go to state 14
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 101

    (20) statement -> WHILE expression DO statements . end_statement
    (2) statements -> statements . statement
    (3) end_statement -> . END
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . WHILE expression DO statements end_statement
    (21) statement -> . FOREVER DO statements end_statement
    (22) statement -> . EXIT LOOP
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    END             shift and go to state 34
    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    FOREVER         shift and go to state 10
    EXIT            shift and go to state 11
    SET             shift and go to state 12
    IF              shift and go to state 13

    end_statement                  shift and go to state 111
    statement                      shift and go to state 14
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 102

    (21) statement -> FOREVER DO statements end_statement .

    OUTPUT          reduce using rule 21 (statement -> FOREVER DO statements end_statement .)
    REPEAT          reduce using rule 21 (statement -> FOREVER DO statements end_statement .)
    PAUSE           reduce using rule 21 (statement -> FOREVER DO statements end_statement .)
    FUNCTION        reduce using rule 21 (statement -> FOREVER DO statements end_statement .)
    WHILE           reduce using rule 21 (statement -> FOREVER DO statements end_statement .)
    FOREVER         reduce using rule 21 (statement -> FOREVER DO statements end_statement .)
    EXIT            reduce using rule 21 (statement -> FOREVER DO statements end_statement .)
    SET             reduce using rule 21 (statement -> FOREVER DO statements end_statement .)
    IF              reduce using rule 21 (statement -> FOREVER DO statements end_statement .)
    $end            reduce using rule 21 (statement -> FOREVER DO statements end_statement .)
    UNTIL           reduce using rule 21 (statement -> FOREVER DO statements end_statement .)
    END             reduce using rule 21 (statement -> FOREVER DO statements end_statement .)
    ELSE            reduce using rule 21 (statement -> FOREVER DO statements end_statement .)


state 103

    (13) if_then -> IF expression THEN statements .
    (2) statements -> statements . statement
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . WHILE expression DO statements end_statement
    (21) statement -> . FOREVER DO statements end_statement
    (22) statement -> . EXIT LOOP
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    ELSE            reduce using rule 13 (if_then -> IF expression THEN statements .)
    END             reduce using rule 13 (if_then -> IF expression THEN statements .)
    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    FOREVER         shift and go to state 10
    EXIT            shift and go to state 11
    SET             shift and go to state 12
    IF              shift and go to state 13

    statement                      shift and go to state 14
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 104

    (23) expression -> DATATYPE FROM expression TO . expression FROM expression
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (24) expression -> . LENGTH OF expression
    (25) expression -> . FIND OCCURENCES OF expression IN expression
    (28) expression -> . expression PLUS expression
    (29) expression -> . expression MINUS expression
    (30) expression -> . expression TIMES expression
    (31) expression -> . expression DIVIDE expression
    (32) expression -> . expression POWER expression
    (33) expression -> . LPAREN expression RPAREN
    (34) expression -> . YES
    (35) expression -> . NO
    (46) expression -> . comp_expr
    (47) expression -> . NUMBER
    (48) expression -> . IDENTIFIER
    (49) expression -> . random_statement
    (50) expression -> . TEXT
    (51) expression -> . INPUT
    (36) comp_expr -> . expression EQ expression
    (37) comp_expr -> . expression GT expression
    (38) comp_expr -> . expression LT expression
    (39) comp_expr -> . expression GE expression
    (40) comp_expr -> . expression LE expression
    (41) comp_expr -> . expression NE expression
    (42) comp_expr -> . comp_expr AND comp_expr
    (43) comp_expr -> . comp_expr OR comp_expr
    (44) comp_expr -> . NOT expression
    (45) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LENGTH          shift and go to state 18
    FIND            shift and go to state 19
    LPAREN          shift and go to state 20
    YES             shift and go to state 21
    NO              shift and go to state 22
    NUMBER          shift and go to state 24
    IDENTIFIER      shift and go to state 25
    TEXT            shift and go to state 37
    INPUT           shift and go to state 28
    NOT             shift and go to state 29
    RANDOM          shift and go to state 30

    expression                     shift and go to state 112
    comp_expr                      shift and go to state 23
    random_statement               shift and go to state 26

state 105

    (25) expression -> FIND OCCURENCES OF expression . IN expression
    (28) expression -> expression . PLUS expression
    (29) expression -> expression . MINUS expression
    (30) expression -> expression . TIMES expression
    (31) expression -> expression . DIVIDE expression
    (32) expression -> expression . POWER expression
    (36) comp_expr -> expression . EQ expression
    (37) comp_expr -> expression . GT expression
    (38) comp_expr -> expression . LT expression
    (39) comp_expr -> expression . GE expression
    (40) comp_expr -> expression . LE expression
    (41) comp_expr -> expression . NE expression
    (45) comp_expr -> expression . IN expression

    IN              shift and go to state 113
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    TIMES           shift and go to state 46
    DIVIDE          shift and go to state 47
    POWER           shift and go to state 48
    EQ              shift and go to state 49
    GT              shift and go to state 50
    LT              shift and go to state 51
    GE              shift and go to state 52
    LE              shift and go to state 53
    NE              shift and go to state 54


state 106

    (6) ask -> TEXT EXPECTING INPUT AND . DATATYPE

    DATATYPE        shift and go to state 114


state 107

    (7) random_statement -> RANDOM DATATYPE FROM expression . TO expression
    (28) expression -> expression . PLUS expression
    (29) expression -> expression . MINUS expression
    (30) expression -> expression . TIMES expression
    (31) expression -> expression . DIVIDE expression
    (32) expression -> expression . POWER expression
    (36) comp_expr -> expression . EQ expression
    (37) comp_expr -> expression . GT expression
    (38) comp_expr -> expression . LT expression
    (39) comp_expr -> expression . GE expression
    (40) comp_expr -> expression . LE expression
    (41) comp_expr -> expression . NE expression
    (45) comp_expr -> expression . IN expression

    TO              shift and go to state 115
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    TIMES           shift and go to state 46
    DIVIDE          shift and go to state 47
    POWER           shift and go to state 48
    EQ              shift and go to state 49
    GT              shift and go to state 50
    LT              shift and go to state 51
    GE              shift and go to state 52
    LE              shift and go to state 53
    NE              shift and go to state 54
    IN              shift and go to state 55


state 108

    (18) type_stmt -> TYPE DATATYPE .

    OUTPUT          reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    REPEAT          reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    PAUSE           reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    FUNCTION        reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    WHILE           reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    FOREVER         reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    EXIT            reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    SET             reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    IF              reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    $end            reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    UNTIL           reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    END             reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    ELSE            reduce using rule 18 (type_stmt -> TYPE DATATYPE .)


state 109

    (15) statement -> if_then ELSE THEN statements end_statement .

    OUTPUT          reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    REPEAT          reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    PAUSE           reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    FUNCTION        reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    WHILE           reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    FOREVER         reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    EXIT            reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    SET             reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    IF              reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    $end            reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    UNTIL           reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    END             reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    ELSE            reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)


state 110

    (19) statement -> FUNCTION IDENTIFIER MEANS statements end_statement .

    OUTPUT          reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    REPEAT          reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    PAUSE           reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    FUNCTION        reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    WHILE           reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    FOREVER         reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    EXIT            reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    SET             reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    IF              reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    $end            reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    UNTIL           reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    END             reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    ELSE            reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)


state 111

    (20) statement -> WHILE expression DO statements end_statement .

    OUTPUT          reduce using rule 20 (statement -> WHILE expression DO statements end_statement .)
    REPEAT          reduce using rule 20 (statement -> WHILE expression DO statements end_statement .)
    PAUSE           reduce using rule 20 (statement -> WHILE expression DO statements end_statement .)
    FUNCTION        reduce using rule 20 (statement -> WHILE expression DO statements end_statement .)
    WHILE           reduce using rule 20 (statement -> WHILE expression DO statements end_statement .)
    FOREVER         reduce using rule 20 (statement -> WHILE expression DO statements end_statement .)
    EXIT            reduce using rule 20 (statement -> WHILE expression DO statements end_statement .)
    SET             reduce using rule 20 (statement -> WHILE expression DO statements end_statement .)
    IF              reduce using rule 20 (statement -> WHILE expression DO statements end_statement .)
    $end            reduce using rule 20 (statement -> WHILE expression DO statements end_statement .)
    UNTIL           reduce using rule 20 (statement -> WHILE expression DO statements end_statement .)
    END             reduce using rule 20 (statement -> WHILE expression DO statements end_statement .)
    ELSE            reduce using rule 20 (statement -> WHILE expression DO statements end_statement .)


state 112

    (23) expression -> DATATYPE FROM expression TO expression . FROM expression
    (28) expression -> expression . PLUS expression
    (29) expression -> expression . MINUS expression
    (30) expression -> expression . TIMES expression
    (31) expression -> expression . DIVIDE expression
    (32) expression -> expression . POWER expression
    (36) comp_expr -> expression . EQ expression
    (37) comp_expr -> expression . GT expression
    (38) comp_expr -> expression . LT expression
    (39) comp_expr -> expression . GE expression
    (40) comp_expr -> expression . LE expression
    (41) comp_expr -> expression . NE expression
    (45) comp_expr -> expression . IN expression

    FROM            shift and go to state 116
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    TIMES           shift and go to state 46
    DIVIDE          shift and go to state 47
    POWER           shift and go to state 48
    EQ              shift and go to state 49
    GT              shift and go to state 50
    LT              shift and go to state 51
    GE              shift and go to state 52
    LE              shift and go to state 53
    NE              shift and go to state 54
    IN              shift and go to state 55


state 113

    (25) expression -> FIND OCCURENCES OF expression IN . expression
    (45) comp_expr -> expression IN . expression
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (24) expression -> . LENGTH OF expression
    (25) expression -> . FIND OCCURENCES OF expression IN expression
    (28) expression -> . expression PLUS expression
    (29) expression -> . expression MINUS expression
    (30) expression -> . expression TIMES expression
    (31) expression -> . expression DIVIDE expression
    (32) expression -> . expression POWER expression
    (33) expression -> . LPAREN expression RPAREN
    (34) expression -> . YES
    (35) expression -> . NO
    (46) expression -> . comp_expr
    (47) expression -> . NUMBER
    (48) expression -> . IDENTIFIER
    (49) expression -> . random_statement
    (50) expression -> . TEXT
    (51) expression -> . INPUT
    (36) comp_expr -> . expression EQ expression
    (37) comp_expr -> . expression GT expression
    (38) comp_expr -> . expression LT expression
    (39) comp_expr -> . expression GE expression
    (40) comp_expr -> . expression LE expression
    (41) comp_expr -> . expression NE expression
    (42) comp_expr -> . comp_expr AND comp_expr
    (43) comp_expr -> . comp_expr OR comp_expr
    (44) comp_expr -> . NOT expression
    (45) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LENGTH          shift and go to state 18
    FIND            shift and go to state 19
    LPAREN          shift and go to state 20
    YES             shift and go to state 21
    NO              shift and go to state 22
    NUMBER          shift and go to state 24
    IDENTIFIER      shift and go to state 25
    TEXT            shift and go to state 37
    INPUT           shift and go to state 28
    NOT             shift and go to state 29
    RANDOM          shift and go to state 30

    expression                     shift and go to state 117
    comp_expr                      shift and go to state 23
    random_statement               shift and go to state 26

state 114

    (6) ask -> TEXT EXPECTING INPUT AND DATATYPE .

    OUTPUT          reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    REPEAT          reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    PAUSE           reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    FUNCTION        reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    WHILE           reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    FOREVER         reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    EXIT            reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    SET             reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    IF              reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    $end            reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    UNTIL           reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    END             reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    ELSE            reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)


state 115

    (7) random_statement -> RANDOM DATATYPE FROM expression TO . expression
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (24) expression -> . LENGTH OF expression
    (25) expression -> . FIND OCCURENCES OF expression IN expression
    (28) expression -> . expression PLUS expression
    (29) expression -> . expression MINUS expression
    (30) expression -> . expression TIMES expression
    (31) expression -> . expression DIVIDE expression
    (32) expression -> . expression POWER expression
    (33) expression -> . LPAREN expression RPAREN
    (34) expression -> . YES
    (35) expression -> . NO
    (46) expression -> . comp_expr
    (47) expression -> . NUMBER
    (48) expression -> . IDENTIFIER
    (49) expression -> . random_statement
    (50) expression -> . TEXT
    (51) expression -> . INPUT
    (36) comp_expr -> . expression EQ expression
    (37) comp_expr -> . expression GT expression
    (38) comp_expr -> . expression LT expression
    (39) comp_expr -> . expression GE expression
    (40) comp_expr -> . expression LE expression
    (41) comp_expr -> . expression NE expression
    (42) comp_expr -> . comp_expr AND comp_expr
    (43) comp_expr -> . comp_expr OR comp_expr
    (44) comp_expr -> . NOT expression
    (45) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LENGTH          shift and go to state 18
    FIND            shift and go to state 19
    LPAREN          shift and go to state 20
    YES             shift and go to state 21
    NO              shift and go to state 22
    NUMBER          shift and go to state 24
    IDENTIFIER      shift and go to state 25
    TEXT            shift and go to state 37
    INPUT           shift and go to state 28
    NOT             shift and go to state 29
    RANDOM          shift and go to state 30

    expression                     shift and go to state 118
    comp_expr                      shift and go to state 23
    random_statement               shift and go to state 26

state 116

    (23) expression -> DATATYPE FROM expression TO expression FROM . expression
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (24) expression -> . LENGTH OF expression
    (25) expression -> . FIND OCCURENCES OF expression IN expression
    (28) expression -> . expression PLUS expression
    (29) expression -> . expression MINUS expression
    (30) expression -> . expression TIMES expression
    (31) expression -> . expression DIVIDE expression
    (32) expression -> . expression POWER expression
    (33) expression -> . LPAREN expression RPAREN
    (34) expression -> . YES
    (35) expression -> . NO
    (46) expression -> . comp_expr
    (47) expression -> . NUMBER
    (48) expression -> . IDENTIFIER
    (49) expression -> . random_statement
    (50) expression -> . TEXT
    (51) expression -> . INPUT
    (36) comp_expr -> . expression EQ expression
    (37) comp_expr -> . expression GT expression
    (38) comp_expr -> . expression LT expression
    (39) comp_expr -> . expression GE expression
    (40) comp_expr -> . expression LE expression
    (41) comp_expr -> . expression NE expression
    (42) comp_expr -> . comp_expr AND comp_expr
    (43) comp_expr -> . comp_expr OR comp_expr
    (44) comp_expr -> . NOT expression
    (45) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LENGTH          shift and go to state 18
    FIND            shift and go to state 19
    LPAREN          shift and go to state 20
    YES             shift and go to state 21
    NO              shift and go to state 22
    NUMBER          shift and go to state 24
    IDENTIFIER      shift and go to state 25
    TEXT            shift and go to state 37
    INPUT           shift and go to state 28
    NOT             shift and go to state 29
    RANDOM          shift and go to state 30

    expression                     shift and go to state 119
    comp_expr                      shift and go to state 23
    random_statement               shift and go to state 26

state 117

    (25) expression -> FIND OCCURENCES OF expression IN expression .
    (45) comp_expr -> expression IN expression .
    (28) expression -> expression . PLUS expression
    (29) expression -> expression . MINUS expression
    (30) expression -> expression . TIMES expression
    (31) expression -> expression . DIVIDE expression
    (32) expression -> expression . POWER expression
    (36) comp_expr -> expression . EQ expression
    (37) comp_expr -> expression . GT expression
    (38) comp_expr -> expression . LT expression
    (39) comp_expr -> expression . GE expression
    (40) comp_expr -> expression . LE expression
    (41) comp_expr -> expression . NE expression
    (45) comp_expr -> expression . IN expression

  ! reduce/reduce conflict for AND resolved using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .)
  ! reduce/reduce conflict for OR resolved using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .)
  ! reduce/reduce conflict for IN resolved using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .)
  ! reduce/reduce conflict for TIMES resolved using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .)
  ! reduce/reduce conflict for POWER resolved using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .)
  ! reduce/reduce conflict for EQ resolved using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .)
  ! reduce/reduce conflict for GT resolved using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .)
  ! reduce/reduce conflict for LT resolved using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .)
  ! reduce/reduce conflict for GE resolved using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .)
  ! reduce/reduce conflict for LE resolved using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .)
  ! reduce/reduce conflict for NE resolved using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    OUTPUT          reduce using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .)
    REPEAT          reduce using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .)
    PAUSE           reduce using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .)
    FUNCTION        reduce using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .)
    WHILE           reduce using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .)
    FOREVER         reduce using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .)
    EXIT            reduce using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .)
    SET             reduce using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .)
    IF              reduce using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .)
    $end            reduce using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .)
    UNTIL           reduce using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .)
    END             reduce using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .)
    ELSE            reduce using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .)
    DO              reduce using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .)
    THEN            reduce using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .)
    RPAREN          reduce using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .)
    AND             reduce using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .)
    OR              reduce using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .)
    TYPE            reduce using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .)
    DATATYPE        reduce using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .)
    LENGTH          reduce using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .)
    FIND            reduce using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .)
    LPAREN          reduce using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .)
    YES             reduce using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .)
    NO              reduce using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .)
    NUMBER          reduce using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .)
    IDENTIFIER      reduce using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .)
    TEXT            reduce using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .)
    INPUT           reduce using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .)
    NOT             reduce using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .)
    RANDOM          reduce using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .)
    TO              reduce using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .)
    FROM            reduce using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    TIMES           shift and go to state 46
    DIVIDE          shift and go to state 47
    POWER           shift and go to state 48
    EQ              shift and go to state 49
    GT              shift and go to state 50
    LT              shift and go to state 51
    GE              shift and go to state 52
    LE              shift and go to state 53
    NE              shift and go to state 54
    IN              shift and go to state 55

  ! PLUS            [ reduce using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .) ]
  ! MINUS           [ reduce using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .) ]
  ! TIMES           [ reduce using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .) ]
  ! DIVIDE          [ reduce using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .) ]
  ! POWER           [ reduce using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .) ]
  ! EQ              [ reduce using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .) ]
  ! GT              [ reduce using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .) ]
  ! LT              [ reduce using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .) ]
  ! GE              [ reduce using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .) ]
  ! LE              [ reduce using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .) ]
  ! NE              [ reduce using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .) ]
  ! IN              [ reduce using rule 25 (expression -> FIND OCCURENCES OF expression IN expression .) ]
  ! AND             [ reduce using rule 45 (comp_expr -> expression IN expression .) ]
  ! OR              [ reduce using rule 45 (comp_expr -> expression IN expression .) ]
  ! IN              [ reduce using rule 45 (comp_expr -> expression IN expression .) ]
  ! PLUS            [ reduce using rule 45 (comp_expr -> expression IN expression .) ]
  ! MINUS           [ reduce using rule 45 (comp_expr -> expression IN expression .) ]
  ! TIMES           [ reduce using rule 45 (comp_expr -> expression IN expression .) ]
  ! DIVIDE          [ reduce using rule 45 (comp_expr -> expression IN expression .) ]
  ! POWER           [ reduce using rule 45 (comp_expr -> expression IN expression .) ]
  ! EQ              [ reduce using rule 45 (comp_expr -> expression IN expression .) ]
  ! GT              [ reduce using rule 45 (comp_expr -> expression IN expression .) ]
  ! LT              [ reduce using rule 45 (comp_expr -> expression IN expression .) ]
  ! GE              [ reduce using rule 45 (comp_expr -> expression IN expression .) ]
  ! LE              [ reduce using rule 45 (comp_expr -> expression IN expression .) ]
  ! NE              [ reduce using rule 45 (comp_expr -> expression IN expression .) ]


state 118

    (7) random_statement -> RANDOM DATATYPE FROM expression TO expression .
    (28) expression -> expression . PLUS expression
    (29) expression -> expression . MINUS expression
    (30) expression -> expression . TIMES expression
    (31) expression -> expression . DIVIDE expression
    (32) expression -> expression . POWER expression
    (36) comp_expr -> expression . EQ expression
    (37) comp_expr -> expression . GT expression
    (38) comp_expr -> expression . LT expression
    (39) comp_expr -> expression . GE expression
    (40) comp_expr -> expression . LE expression
    (41) comp_expr -> expression . NE expression
    (45) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    OUTPUT          reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    REPEAT          reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    PAUSE           reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    FUNCTION        reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    WHILE           reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    FOREVER         reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    EXIT            reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    SET             reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    IF              reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    $end            reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    UNTIL           reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    END             reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    ELSE            reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    DO              reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    THEN            reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    RPAREN          reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    AND             reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    OR              reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    TYPE            reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    DATATYPE        reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    LENGTH          reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    FIND            reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    LPAREN          reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    YES             reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    NO              reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    NUMBER          reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    IDENTIFIER      reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    TEXT            reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    INPUT           reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    NOT             reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    RANDOM          reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    TO              reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    FROM            reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    TIMES           shift and go to state 46
    DIVIDE          shift and go to state 47
    POWER           shift and go to state 48
    EQ              shift and go to state 49
    GT              shift and go to state 50
    LT              shift and go to state 51
    GE              shift and go to state 52
    LE              shift and go to state 53
    NE              shift and go to state 54
    IN              shift and go to state 55

  ! PLUS            [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! MINUS           [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! TIMES           [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! DIVIDE          [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! POWER           [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! EQ              [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! GT              [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! LT              [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! GE              [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! LE              [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! NE              [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! IN              [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]


state 119

    (23) expression -> DATATYPE FROM expression TO expression FROM expression .
    (28) expression -> expression . PLUS expression
    (29) expression -> expression . MINUS expression
    (30) expression -> expression . TIMES expression
    (31) expression -> expression . DIVIDE expression
    (32) expression -> expression . POWER expression
    (36) comp_expr -> expression . EQ expression
    (37) comp_expr -> expression . GT expression
    (38) comp_expr -> expression . LT expression
    (39) comp_expr -> expression . GE expression
    (40) comp_expr -> expression . LE expression
    (41) comp_expr -> expression . NE expression
    (45) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    OUTPUT          reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    REPEAT          reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    PAUSE           reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    FUNCTION        reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    WHILE           reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    FOREVER         reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    EXIT            reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    SET             reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    IF              reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    $end            reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    UNTIL           reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    END             reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    ELSE            reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    DO              reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    THEN            reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    RPAREN          reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    AND             reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    OR              reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    TYPE            reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    DATATYPE        reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    LENGTH          reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    FIND            reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    LPAREN          reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    YES             reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    NO              reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    NUMBER          reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    IDENTIFIER      reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    TEXT            reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    INPUT           reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    NOT             reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    RANDOM          reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    TO              reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    FROM            reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    TIMES           shift and go to state 46
    DIVIDE          shift and go to state 47
    POWER           shift and go to state 48
    EQ              shift and go to state 49
    GT              shift and go to state 50
    LT              shift and go to state 51
    GE              shift and go to state 52
    LE              shift and go to state 53
    NE              shift and go to state 54
    IN              shift and go to state 55

  ! PLUS            [ reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .) ]
  ! MINUS           [ reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .) ]
  ! TIMES           [ reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .) ]
  ! DIVIDE          [ reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .) ]
  ! POWER           [ reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .) ]
  ! EQ              [ reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .) ]
  ! GT              [ reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .) ]
  ! LT              [ reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .) ]
  ! GE              [ reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .) ]
  ! LE              [ reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .) ]
  ! NE              [ reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .) ]
  ! IN              [ reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for AND in state 23 resolved as shift
WARNING: shift/reduce conflict for OR in state 23 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 63 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 63 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 63 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 63 resolved as shift
WARNING: shift/reduce conflict for POWER in state 63 resolved as shift
WARNING: shift/reduce conflict for EQ in state 63 resolved as shift
WARNING: shift/reduce conflict for GT in state 63 resolved as shift
WARNING: shift/reduce conflict for LT in state 63 resolved as shift
WARNING: shift/reduce conflict for GE in state 63 resolved as shift
WARNING: shift/reduce conflict for LE in state 63 resolved as shift
WARNING: shift/reduce conflict for NE in state 63 resolved as shift
WARNING: shift/reduce conflict for IN in state 63 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 74 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 74 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 74 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 74 resolved as shift
WARNING: shift/reduce conflict for POWER in state 74 resolved as shift
WARNING: shift/reduce conflict for EQ in state 74 resolved as shift
WARNING: shift/reduce conflict for GT in state 74 resolved as shift
WARNING: shift/reduce conflict for LT in state 74 resolved as shift
WARNING: shift/reduce conflict for GE in state 74 resolved as shift
WARNING: shift/reduce conflict for LE in state 74 resolved as shift
WARNING: shift/reduce conflict for NE in state 74 resolved as shift
WARNING: shift/reduce conflict for IN in state 74 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 75 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 75 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 75 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 75 resolved as shift
WARNING: shift/reduce conflict for POWER in state 75 resolved as shift
WARNING: shift/reduce conflict for EQ in state 75 resolved as shift
WARNING: shift/reduce conflict for GT in state 75 resolved as shift
WARNING: shift/reduce conflict for LT in state 75 resolved as shift
WARNING: shift/reduce conflict for GE in state 75 resolved as shift
WARNING: shift/reduce conflict for LE in state 75 resolved as shift
WARNING: shift/reduce conflict for NE in state 75 resolved as shift
WARNING: shift/reduce conflict for IN in state 75 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 76 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 76 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 76 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 76 resolved as shift
WARNING: shift/reduce conflict for POWER in state 76 resolved as shift
WARNING: shift/reduce conflict for EQ in state 76 resolved as shift
WARNING: shift/reduce conflict for GT in state 76 resolved as shift
WARNING: shift/reduce conflict for LT in state 76 resolved as shift
WARNING: shift/reduce conflict for GE in state 76 resolved as shift
WARNING: shift/reduce conflict for LE in state 76 resolved as shift
WARNING: shift/reduce conflict for NE in state 76 resolved as shift
WARNING: shift/reduce conflict for IN in state 76 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 77 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 77 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 77 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 77 resolved as shift
WARNING: shift/reduce conflict for POWER in state 77 resolved as shift
WARNING: shift/reduce conflict for EQ in state 77 resolved as shift
WARNING: shift/reduce conflict for GT in state 77 resolved as shift
WARNING: shift/reduce conflict for LT in state 77 resolved as shift
WARNING: shift/reduce conflict for GE in state 77 resolved as shift
WARNING: shift/reduce conflict for LE in state 77 resolved as shift
WARNING: shift/reduce conflict for NE in state 77 resolved as shift
WARNING: shift/reduce conflict for IN in state 77 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 78 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 78 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 78 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 78 resolved as shift
WARNING: shift/reduce conflict for POWER in state 78 resolved as shift
WARNING: shift/reduce conflict for EQ in state 78 resolved as shift
WARNING: shift/reduce conflict for GT in state 78 resolved as shift
WARNING: shift/reduce conflict for LT in state 78 resolved as shift
WARNING: shift/reduce conflict for GE in state 78 resolved as shift
WARNING: shift/reduce conflict for LE in state 78 resolved as shift
WARNING: shift/reduce conflict for NE in state 78 resolved as shift
WARNING: shift/reduce conflict for IN in state 78 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 79 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 79 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 79 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 79 resolved as shift
WARNING: shift/reduce conflict for POWER in state 79 resolved as shift
WARNING: shift/reduce conflict for EQ in state 79 resolved as shift
WARNING: shift/reduce conflict for GT in state 79 resolved as shift
WARNING: shift/reduce conflict for LT in state 79 resolved as shift
WARNING: shift/reduce conflict for GE in state 79 resolved as shift
WARNING: shift/reduce conflict for LE in state 79 resolved as shift
WARNING: shift/reduce conflict for NE in state 79 resolved as shift
WARNING: shift/reduce conflict for IN in state 79 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 80 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 80 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 80 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 80 resolved as shift
WARNING: shift/reduce conflict for POWER in state 80 resolved as shift
WARNING: shift/reduce conflict for EQ in state 80 resolved as shift
WARNING: shift/reduce conflict for GT in state 80 resolved as shift
WARNING: shift/reduce conflict for LT in state 80 resolved as shift
WARNING: shift/reduce conflict for GE in state 80 resolved as shift
WARNING: shift/reduce conflict for LE in state 80 resolved as shift
WARNING: shift/reduce conflict for NE in state 80 resolved as shift
WARNING: shift/reduce conflict for IN in state 80 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 81 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 81 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 81 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 81 resolved as shift
WARNING: shift/reduce conflict for POWER in state 81 resolved as shift
WARNING: shift/reduce conflict for EQ in state 81 resolved as shift
WARNING: shift/reduce conflict for GT in state 81 resolved as shift
WARNING: shift/reduce conflict for LT in state 81 resolved as shift
WARNING: shift/reduce conflict for GE in state 81 resolved as shift
WARNING: shift/reduce conflict for LE in state 81 resolved as shift
WARNING: shift/reduce conflict for NE in state 81 resolved as shift
WARNING: shift/reduce conflict for IN in state 81 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 82 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 82 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 82 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 82 resolved as shift
WARNING: shift/reduce conflict for POWER in state 82 resolved as shift
WARNING: shift/reduce conflict for EQ in state 82 resolved as shift
WARNING: shift/reduce conflict for GT in state 82 resolved as shift
WARNING: shift/reduce conflict for LT in state 82 resolved as shift
WARNING: shift/reduce conflict for GE in state 82 resolved as shift
WARNING: shift/reduce conflict for LE in state 82 resolved as shift
WARNING: shift/reduce conflict for NE in state 82 resolved as shift
WARNING: shift/reduce conflict for IN in state 82 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 83 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 83 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 83 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 83 resolved as shift
WARNING: shift/reduce conflict for POWER in state 83 resolved as shift
WARNING: shift/reduce conflict for EQ in state 83 resolved as shift
WARNING: shift/reduce conflict for GT in state 83 resolved as shift
WARNING: shift/reduce conflict for LT in state 83 resolved as shift
WARNING: shift/reduce conflict for GE in state 83 resolved as shift
WARNING: shift/reduce conflict for LE in state 83 resolved as shift
WARNING: shift/reduce conflict for NE in state 83 resolved as shift
WARNING: shift/reduce conflict for IN in state 83 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 84 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 84 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 84 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 84 resolved as shift
WARNING: shift/reduce conflict for POWER in state 84 resolved as shift
WARNING: shift/reduce conflict for EQ in state 84 resolved as shift
WARNING: shift/reduce conflict for GT in state 84 resolved as shift
WARNING: shift/reduce conflict for LT in state 84 resolved as shift
WARNING: shift/reduce conflict for GE in state 84 resolved as shift
WARNING: shift/reduce conflict for LE in state 84 resolved as shift
WARNING: shift/reduce conflict for NE in state 84 resolved as shift
WARNING: shift/reduce conflict for IN in state 84 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 85 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 85 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 85 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 85 resolved as shift
WARNING: shift/reduce conflict for POWER in state 85 resolved as shift
WARNING: shift/reduce conflict for EQ in state 85 resolved as shift
WARNING: shift/reduce conflict for GT in state 85 resolved as shift
WARNING: shift/reduce conflict for LT in state 85 resolved as shift
WARNING: shift/reduce conflict for GE in state 85 resolved as shift
WARNING: shift/reduce conflict for LE in state 85 resolved as shift
WARNING: shift/reduce conflict for NE in state 85 resolved as shift
WARNING: shift/reduce conflict for IN in state 85 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 87 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 87 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 87 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 87 resolved as shift
WARNING: shift/reduce conflict for POWER in state 87 resolved as shift
WARNING: shift/reduce conflict for EQ in state 87 resolved as shift
WARNING: shift/reduce conflict for GT in state 87 resolved as shift
WARNING: shift/reduce conflict for LT in state 87 resolved as shift
WARNING: shift/reduce conflict for GE in state 87 resolved as shift
WARNING: shift/reduce conflict for LE in state 87 resolved as shift
WARNING: shift/reduce conflict for NE in state 87 resolved as shift
WARNING: shift/reduce conflict for IN in state 87 resolved as shift
WARNING: shift/reduce conflict for AND in state 90 resolved as shift
WARNING: shift/reduce conflict for OR in state 90 resolved as shift
WARNING: shift/reduce conflict for AND in state 92 resolved as shift
WARNING: shift/reduce conflict for OR in state 92 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 117 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 117 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 117 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 117 resolved as shift
WARNING: shift/reduce conflict for POWER in state 117 resolved as shift
WARNING: shift/reduce conflict for EQ in state 117 resolved as shift
WARNING: shift/reduce conflict for GT in state 117 resolved as shift
WARNING: shift/reduce conflict for LT in state 117 resolved as shift
WARNING: shift/reduce conflict for GE in state 117 resolved as shift
WARNING: shift/reduce conflict for LE in state 117 resolved as shift
WARNING: shift/reduce conflict for NE in state 117 resolved as shift
WARNING: shift/reduce conflict for IN in state 117 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 118 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 118 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 118 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 118 resolved as shift
WARNING: shift/reduce conflict for POWER in state 118 resolved as shift
WARNING: shift/reduce conflict for EQ in state 118 resolved as shift
WARNING: shift/reduce conflict for GT in state 118 resolved as shift
WARNING: shift/reduce conflict for LT in state 118 resolved as shift
WARNING: shift/reduce conflict for GE in state 118 resolved as shift
WARNING: shift/reduce conflict for LE in state 118 resolved as shift
WARNING: shift/reduce conflict for NE in state 118 resolved as shift
WARNING: shift/reduce conflict for IN in state 118 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 119 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 119 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 119 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 119 resolved as shift
WARNING: shift/reduce conflict for POWER in state 119 resolved as shift
WARNING: shift/reduce conflict for EQ in state 119 resolved as shift
WARNING: shift/reduce conflict for GT in state 119 resolved as shift
WARNING: shift/reduce conflict for LT in state 119 resolved as shift
WARNING: shift/reduce conflict for GE in state 119 resolved as shift
WARNING: shift/reduce conflict for LE in state 119 resolved as shift
WARNING: shift/reduce conflict for NE in state 119 resolved as shift
WARNING: shift/reduce conflict for IN in state 119 resolved as shift
WARNING: reduce/reduce conflict in state 90 resolved using rule (comp_expr -> comp_expr AND comp_expr)
WARNING: rejected rule (expression -> comp_expr) in state 90
WARNING: reduce/reduce conflict in state 92 resolved using rule (comp_expr -> comp_expr OR comp_expr)
WARNING: rejected rule (expression -> comp_expr) in state 92
WARNING: reduce/reduce conflict in state 117 resolved using rule (expression -> FIND OCCURENCES OF expression IN expression)
WARNING: rejected rule (comp_expr -> expression IN expression) in state 117
