Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ELSEIF
    RETURN

Grammar

Rule 0     S' -> statements
Rule 1     statements -> statement
Rule 2     statements -> statements statement
Rule 3     end_statement -> END
Rule 4     statement -> OUTPUT expression
Rule 5     statement -> OUTPUT ask
Rule 6     ask -> TEXT EXPECTING INPUT AND DATATYPE
Rule 7     random_statement -> RANDOM DATATYPE FROM expression TO expression
Rule 8     var_assignment -> SET IDENTIFIER
Rule 9     statement -> var_assignment TO expression
Rule 10    statement -> var_assignment
Rule 11    statement -> var_assignment TO ask
Rule 12    statement -> var_assignment TO items type_stmt
Rule 13    if_then -> IF expression THEN statements
Rule 14    statement -> if_then end_statement
Rule 15    statement -> if_then ELSE THEN statements end_statement
Rule 16    statement -> REPEAT statements UNTIL expression
Rule 17    statement -> PAUSE expression
Rule 18    type_stmt -> TYPE DATATYPE
Rule 19    statement -> FUNCTION IDENTIFIER MEANS statements end_statement
Rule 20    statement -> WHILE expression DO statements end_statement
Rule 21    items -> expression
Rule 22    items -> items expression
Rule 23    expression -> expression PLUS expression
Rule 24    expression -> expression MINUS expression
Rule 25    expression -> expression TIMES expression
Rule 26    expression -> expression DIVIDE expression
Rule 27    expression -> expression POWER expression
Rule 28    expression -> LPAREN expression RPAREN
Rule 29    expression -> YES
Rule 30    expression -> NO
Rule 31    comp_expr -> expression EQ expression
Rule 32    comp_expr -> expression GT expression
Rule 33    comp_expr -> expression LT expression
Rule 34    comp_expr -> expression GE expression
Rule 35    comp_expr -> expression LE expression
Rule 36    comp_expr -> expression NE expression
Rule 37    comp_expr -> comp_expr AND comp_expr
Rule 38    comp_expr -> comp_expr OR comp_expr
Rule 39    comp_expr -> NOT expression
Rule 40    comp_expr -> expression IN expression
Rule 41    expression -> comp_expr
Rule 42    expression -> NUMBER
Rule 43    expression -> IDENTIFIER
Rule 44    expression -> random_statement
Rule 45    expression -> TEXT
Rule 46    expression -> INPUT

Terminals, with rules where they appear

AND                  : 6 37
DATATYPE             : 6 7 18
DIVIDE               : 26
DO                   : 20
ELSE                 : 15
ELSEIF               : 
END                  : 3
EQ                   : 31
EXPECTING            : 6
FROM                 : 7
FUNCTION             : 19
GE                   : 34
GT                   : 32
IDENTIFIER           : 8 19 43
IF                   : 13
IN                   : 40
INPUT                : 6 46
LE                   : 35
LPAREN               : 28
LT                   : 33
MEANS                : 19
MINUS                : 24
NE                   : 36
NO                   : 30
NOT                  : 39
NUMBER               : 42
OR                   : 38
OUTPUT               : 4 5
PAUSE                : 17
PLUS                 : 23
POWER                : 27
RANDOM               : 7
REPEAT               : 16
RETURN               : 
RPAREN               : 28
SET                  : 8
TEXT                 : 6 45
THEN                 : 13 15
TIMES                : 25
TO                   : 7 9 11 12
TYPE                 : 18
UNTIL                : 16
WHILE                : 20
YES                  : 29
error                : 

Nonterminals, with rules where they appear

ask                  : 5 11
comp_expr            : 37 37 38 38 41
end_statement        : 14 15 19 20
expression           : 4 7 7 9 13 16 17 20 21 22 23 23 24 24 25 25 26 26 27 27 28 31 31 32 32 33 33 34 34 35 35 36 36 39 40 40
if_then              : 14 15
items                : 12 22
random_statement     : 44
statement            : 1 2
statements           : 2 13 15 16 19 20 0
type_stmt            : 12
var_assignment       : 9 10 11 12

Parsing method: LALR

state 0

    (0) S' -> . statements
    (1) statements -> . statement
    (2) statements -> . statements statement
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . WHILE expression DO statements end_statement
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    SET             shift and go to state 10
    IF              shift and go to state 11

    statements                     shift and go to state 1
    statement                      shift and go to state 2
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 1

    (0) S' -> statements .
    (2) statements -> statements . statement
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . WHILE expression DO statements end_statement
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    SET             shift and go to state 10
    IF              shift and go to state 11

    statement                      shift and go to state 12
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 2

    (1) statements -> statement .

    OUTPUT          reduce using rule 1 (statements -> statement .)
    REPEAT          reduce using rule 1 (statements -> statement .)
    PAUSE           reduce using rule 1 (statements -> statement .)
    FUNCTION        reduce using rule 1 (statements -> statement .)
    WHILE           reduce using rule 1 (statements -> statement .)
    SET             reduce using rule 1 (statements -> statement .)
    IF              reduce using rule 1 (statements -> statement .)
    $end            reduce using rule 1 (statements -> statement .)
    UNTIL           reduce using rule 1 (statements -> statement .)
    END             reduce using rule 1 (statements -> statement .)
    ELSE            reduce using rule 1 (statements -> statement .)


state 3

    (4) statement -> OUTPUT . expression
    (5) statement -> OUTPUT . ask
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . expression POWER expression
    (28) expression -> . LPAREN expression RPAREN
    (29) expression -> . YES
    (30) expression -> . NO
    (41) expression -> . comp_expr
    (42) expression -> . NUMBER
    (43) expression -> . IDENTIFIER
    (44) expression -> . random_statement
    (45) expression -> . TEXT
    (46) expression -> . INPUT
    (6) ask -> . TEXT EXPECTING INPUT AND DATATYPE
    (31) comp_expr -> . expression EQ expression
    (32) comp_expr -> . expression GT expression
    (33) comp_expr -> . expression LT expression
    (34) comp_expr -> . expression GE expression
    (35) comp_expr -> . expression LE expression
    (36) comp_expr -> . expression NE expression
    (37) comp_expr -> . comp_expr AND comp_expr
    (38) comp_expr -> . comp_expr OR comp_expr
    (39) comp_expr -> . NOT expression
    (40) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 15
    YES             shift and go to state 16
    NO              shift and go to state 17
    NUMBER          shift and go to state 19
    IDENTIFIER      shift and go to state 20
    TEXT            shift and go to state 22
    INPUT           shift and go to state 23
    NOT             shift and go to state 24
    RANDOM          shift and go to state 25

    expression                     shift and go to state 13
    ask                            shift and go to state 14
    comp_expr                      shift and go to state 18
    random_statement               shift and go to state 21

state 4

    (9) statement -> var_assignment . TO expression
    (10) statement -> var_assignment .
    (11) statement -> var_assignment . TO ask
    (12) statement -> var_assignment . TO items type_stmt

    TO              shift and go to state 26
    OUTPUT          reduce using rule 10 (statement -> var_assignment .)
    REPEAT          reduce using rule 10 (statement -> var_assignment .)
    PAUSE           reduce using rule 10 (statement -> var_assignment .)
    FUNCTION        reduce using rule 10 (statement -> var_assignment .)
    WHILE           reduce using rule 10 (statement -> var_assignment .)
    SET             reduce using rule 10 (statement -> var_assignment .)
    IF              reduce using rule 10 (statement -> var_assignment .)
    $end            reduce using rule 10 (statement -> var_assignment .)
    UNTIL           reduce using rule 10 (statement -> var_assignment .)
    END             reduce using rule 10 (statement -> var_assignment .)
    ELSE            reduce using rule 10 (statement -> var_assignment .)


state 5

    (14) statement -> if_then . end_statement
    (15) statement -> if_then . ELSE THEN statements end_statement
    (3) end_statement -> . END

    ELSE            shift and go to state 28
    END             shift and go to state 29

    end_statement                  shift and go to state 27

state 6

    (16) statement -> REPEAT . statements UNTIL expression
    (1) statements -> . statement
    (2) statements -> . statements statement
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . WHILE expression DO statements end_statement
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    SET             shift and go to state 10
    IF              shift and go to state 11

    statements                     shift and go to state 30
    statement                      shift and go to state 2
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 7

    (17) statement -> PAUSE . expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . expression POWER expression
    (28) expression -> . LPAREN expression RPAREN
    (29) expression -> . YES
    (30) expression -> . NO
    (41) expression -> . comp_expr
    (42) expression -> . NUMBER
    (43) expression -> . IDENTIFIER
    (44) expression -> . random_statement
    (45) expression -> . TEXT
    (46) expression -> . INPUT
    (31) comp_expr -> . expression EQ expression
    (32) comp_expr -> . expression GT expression
    (33) comp_expr -> . expression LT expression
    (34) comp_expr -> . expression GE expression
    (35) comp_expr -> . expression LE expression
    (36) comp_expr -> . expression NE expression
    (37) comp_expr -> . comp_expr AND comp_expr
    (38) comp_expr -> . comp_expr OR comp_expr
    (39) comp_expr -> . NOT expression
    (40) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 15
    YES             shift and go to state 16
    NO              shift and go to state 17
    NUMBER          shift and go to state 19
    IDENTIFIER      shift and go to state 20
    TEXT            shift and go to state 32
    INPUT           shift and go to state 23
    NOT             shift and go to state 24
    RANDOM          shift and go to state 25

    expression                     shift and go to state 31
    comp_expr                      shift and go to state 18
    random_statement               shift and go to state 21

state 8

    (19) statement -> FUNCTION . IDENTIFIER MEANS statements end_statement

    IDENTIFIER      shift and go to state 33


state 9

    (20) statement -> WHILE . expression DO statements end_statement
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . expression POWER expression
    (28) expression -> . LPAREN expression RPAREN
    (29) expression -> . YES
    (30) expression -> . NO
    (41) expression -> . comp_expr
    (42) expression -> . NUMBER
    (43) expression -> . IDENTIFIER
    (44) expression -> . random_statement
    (45) expression -> . TEXT
    (46) expression -> . INPUT
    (31) comp_expr -> . expression EQ expression
    (32) comp_expr -> . expression GT expression
    (33) comp_expr -> . expression LT expression
    (34) comp_expr -> . expression GE expression
    (35) comp_expr -> . expression LE expression
    (36) comp_expr -> . expression NE expression
    (37) comp_expr -> . comp_expr AND comp_expr
    (38) comp_expr -> . comp_expr OR comp_expr
    (39) comp_expr -> . NOT expression
    (40) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 15
    YES             shift and go to state 16
    NO              shift and go to state 17
    NUMBER          shift and go to state 19
    IDENTIFIER      shift and go to state 20
    TEXT            shift and go to state 32
    INPUT           shift and go to state 23
    NOT             shift and go to state 24
    RANDOM          shift and go to state 25

    expression                     shift and go to state 34
    comp_expr                      shift and go to state 18
    random_statement               shift and go to state 21

state 10

    (8) var_assignment -> SET . IDENTIFIER

    IDENTIFIER      shift and go to state 35


state 11

    (13) if_then -> IF . expression THEN statements
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . expression POWER expression
    (28) expression -> . LPAREN expression RPAREN
    (29) expression -> . YES
    (30) expression -> . NO
    (41) expression -> . comp_expr
    (42) expression -> . NUMBER
    (43) expression -> . IDENTIFIER
    (44) expression -> . random_statement
    (45) expression -> . TEXT
    (46) expression -> . INPUT
    (31) comp_expr -> . expression EQ expression
    (32) comp_expr -> . expression GT expression
    (33) comp_expr -> . expression LT expression
    (34) comp_expr -> . expression GE expression
    (35) comp_expr -> . expression LE expression
    (36) comp_expr -> . expression NE expression
    (37) comp_expr -> . comp_expr AND comp_expr
    (38) comp_expr -> . comp_expr OR comp_expr
    (39) comp_expr -> . NOT expression
    (40) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 15
    YES             shift and go to state 16
    NO              shift and go to state 17
    NUMBER          shift and go to state 19
    IDENTIFIER      shift and go to state 20
    TEXT            shift and go to state 32
    INPUT           shift and go to state 23
    NOT             shift and go to state 24
    RANDOM          shift and go to state 25

    expression                     shift and go to state 36
    comp_expr                      shift and go to state 18
    random_statement               shift and go to state 21

state 12

    (2) statements -> statements statement .

    OUTPUT          reduce using rule 2 (statements -> statements statement .)
    REPEAT          reduce using rule 2 (statements -> statements statement .)
    PAUSE           reduce using rule 2 (statements -> statements statement .)
    FUNCTION        reduce using rule 2 (statements -> statements statement .)
    WHILE           reduce using rule 2 (statements -> statements statement .)
    SET             reduce using rule 2 (statements -> statements statement .)
    IF              reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)
    UNTIL           reduce using rule 2 (statements -> statements statement .)
    END             reduce using rule 2 (statements -> statements statement .)
    ELSE            reduce using rule 2 (statements -> statements statement .)


state 13

    (4) statement -> OUTPUT expression .
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . TIMES expression
    (26) expression -> expression . DIVIDE expression
    (27) expression -> expression . POWER expression
    (31) comp_expr -> expression . EQ expression
    (32) comp_expr -> expression . GT expression
    (33) comp_expr -> expression . LT expression
    (34) comp_expr -> expression . GE expression
    (35) comp_expr -> expression . LE expression
    (36) comp_expr -> expression . NE expression
    (40) comp_expr -> expression . IN expression

    OUTPUT          reduce using rule 4 (statement -> OUTPUT expression .)
    REPEAT          reduce using rule 4 (statement -> OUTPUT expression .)
    PAUSE           reduce using rule 4 (statement -> OUTPUT expression .)
    FUNCTION        reduce using rule 4 (statement -> OUTPUT expression .)
    WHILE           reduce using rule 4 (statement -> OUTPUT expression .)
    SET             reduce using rule 4 (statement -> OUTPUT expression .)
    IF              reduce using rule 4 (statement -> OUTPUT expression .)
    $end            reduce using rule 4 (statement -> OUTPUT expression .)
    UNTIL           reduce using rule 4 (statement -> OUTPUT expression .)
    END             reduce using rule 4 (statement -> OUTPUT expression .)
    ELSE            reduce using rule 4 (statement -> OUTPUT expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    POWER           shift and go to state 41
    EQ              shift and go to state 42
    GT              shift and go to state 43
    LT              shift and go to state 44
    GE              shift and go to state 45
    LE              shift and go to state 46
    NE              shift and go to state 47
    IN              shift and go to state 48


state 14

    (5) statement -> OUTPUT ask .

    OUTPUT          reduce using rule 5 (statement -> OUTPUT ask .)
    REPEAT          reduce using rule 5 (statement -> OUTPUT ask .)
    PAUSE           reduce using rule 5 (statement -> OUTPUT ask .)
    FUNCTION        reduce using rule 5 (statement -> OUTPUT ask .)
    WHILE           reduce using rule 5 (statement -> OUTPUT ask .)
    SET             reduce using rule 5 (statement -> OUTPUT ask .)
    IF              reduce using rule 5 (statement -> OUTPUT ask .)
    $end            reduce using rule 5 (statement -> OUTPUT ask .)
    UNTIL           reduce using rule 5 (statement -> OUTPUT ask .)
    END             reduce using rule 5 (statement -> OUTPUT ask .)
    ELSE            reduce using rule 5 (statement -> OUTPUT ask .)


state 15

    (28) expression -> LPAREN . expression RPAREN
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . expression POWER expression
    (28) expression -> . LPAREN expression RPAREN
    (29) expression -> . YES
    (30) expression -> . NO
    (41) expression -> . comp_expr
    (42) expression -> . NUMBER
    (43) expression -> . IDENTIFIER
    (44) expression -> . random_statement
    (45) expression -> . TEXT
    (46) expression -> . INPUT
    (31) comp_expr -> . expression EQ expression
    (32) comp_expr -> . expression GT expression
    (33) comp_expr -> . expression LT expression
    (34) comp_expr -> . expression GE expression
    (35) comp_expr -> . expression LE expression
    (36) comp_expr -> . expression NE expression
    (37) comp_expr -> . comp_expr AND comp_expr
    (38) comp_expr -> . comp_expr OR comp_expr
    (39) comp_expr -> . NOT expression
    (40) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 15
    YES             shift and go to state 16
    NO              shift and go to state 17
    NUMBER          shift and go to state 19
    IDENTIFIER      shift and go to state 20
    TEXT            shift and go to state 32
    INPUT           shift and go to state 23
    NOT             shift and go to state 24
    RANDOM          shift and go to state 25

    expression                     shift and go to state 49
    comp_expr                      shift and go to state 18
    random_statement               shift and go to state 21

state 16

    (29) expression -> YES .

    PLUS            reduce using rule 29 (expression -> YES .)
    MINUS           reduce using rule 29 (expression -> YES .)
    TIMES           reduce using rule 29 (expression -> YES .)
    DIVIDE          reduce using rule 29 (expression -> YES .)
    POWER           reduce using rule 29 (expression -> YES .)
    EQ              reduce using rule 29 (expression -> YES .)
    GT              reduce using rule 29 (expression -> YES .)
    LT              reduce using rule 29 (expression -> YES .)
    GE              reduce using rule 29 (expression -> YES .)
    LE              reduce using rule 29 (expression -> YES .)
    NE              reduce using rule 29 (expression -> YES .)
    IN              reduce using rule 29 (expression -> YES .)
    OUTPUT          reduce using rule 29 (expression -> YES .)
    REPEAT          reduce using rule 29 (expression -> YES .)
    PAUSE           reduce using rule 29 (expression -> YES .)
    FUNCTION        reduce using rule 29 (expression -> YES .)
    WHILE           reduce using rule 29 (expression -> YES .)
    SET             reduce using rule 29 (expression -> YES .)
    IF              reduce using rule 29 (expression -> YES .)
    $end            reduce using rule 29 (expression -> YES .)
    UNTIL           reduce using rule 29 (expression -> YES .)
    END             reduce using rule 29 (expression -> YES .)
    ELSE            reduce using rule 29 (expression -> YES .)
    DO              reduce using rule 29 (expression -> YES .)
    THEN            reduce using rule 29 (expression -> YES .)
    RPAREN          reduce using rule 29 (expression -> YES .)
    AND             reduce using rule 29 (expression -> YES .)
    OR              reduce using rule 29 (expression -> YES .)
    TYPE            reduce using rule 29 (expression -> YES .)
    LPAREN          reduce using rule 29 (expression -> YES .)
    YES             reduce using rule 29 (expression -> YES .)
    NO              reduce using rule 29 (expression -> YES .)
    NUMBER          reduce using rule 29 (expression -> YES .)
    IDENTIFIER      reduce using rule 29 (expression -> YES .)
    TEXT            reduce using rule 29 (expression -> YES .)
    INPUT           reduce using rule 29 (expression -> YES .)
    NOT             reduce using rule 29 (expression -> YES .)
    RANDOM          reduce using rule 29 (expression -> YES .)
    TO              reduce using rule 29 (expression -> YES .)


state 17

    (30) expression -> NO .

    PLUS            reduce using rule 30 (expression -> NO .)
    MINUS           reduce using rule 30 (expression -> NO .)
    TIMES           reduce using rule 30 (expression -> NO .)
    DIVIDE          reduce using rule 30 (expression -> NO .)
    POWER           reduce using rule 30 (expression -> NO .)
    EQ              reduce using rule 30 (expression -> NO .)
    GT              reduce using rule 30 (expression -> NO .)
    LT              reduce using rule 30 (expression -> NO .)
    GE              reduce using rule 30 (expression -> NO .)
    LE              reduce using rule 30 (expression -> NO .)
    NE              reduce using rule 30 (expression -> NO .)
    IN              reduce using rule 30 (expression -> NO .)
    OUTPUT          reduce using rule 30 (expression -> NO .)
    REPEAT          reduce using rule 30 (expression -> NO .)
    PAUSE           reduce using rule 30 (expression -> NO .)
    FUNCTION        reduce using rule 30 (expression -> NO .)
    WHILE           reduce using rule 30 (expression -> NO .)
    SET             reduce using rule 30 (expression -> NO .)
    IF              reduce using rule 30 (expression -> NO .)
    $end            reduce using rule 30 (expression -> NO .)
    UNTIL           reduce using rule 30 (expression -> NO .)
    END             reduce using rule 30 (expression -> NO .)
    ELSE            reduce using rule 30 (expression -> NO .)
    DO              reduce using rule 30 (expression -> NO .)
    THEN            reduce using rule 30 (expression -> NO .)
    RPAREN          reduce using rule 30 (expression -> NO .)
    AND             reduce using rule 30 (expression -> NO .)
    OR              reduce using rule 30 (expression -> NO .)
    TYPE            reduce using rule 30 (expression -> NO .)
    LPAREN          reduce using rule 30 (expression -> NO .)
    YES             reduce using rule 30 (expression -> NO .)
    NO              reduce using rule 30 (expression -> NO .)
    NUMBER          reduce using rule 30 (expression -> NO .)
    IDENTIFIER      reduce using rule 30 (expression -> NO .)
    TEXT            reduce using rule 30 (expression -> NO .)
    INPUT           reduce using rule 30 (expression -> NO .)
    NOT             reduce using rule 30 (expression -> NO .)
    RANDOM          reduce using rule 30 (expression -> NO .)
    TO              reduce using rule 30 (expression -> NO .)


state 18

    (41) expression -> comp_expr .
    (37) comp_expr -> comp_expr . AND comp_expr
    (38) comp_expr -> comp_expr . OR comp_expr

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    PLUS            reduce using rule 41 (expression -> comp_expr .)
    MINUS           reduce using rule 41 (expression -> comp_expr .)
    TIMES           reduce using rule 41 (expression -> comp_expr .)
    DIVIDE          reduce using rule 41 (expression -> comp_expr .)
    POWER           reduce using rule 41 (expression -> comp_expr .)
    EQ              reduce using rule 41 (expression -> comp_expr .)
    GT              reduce using rule 41 (expression -> comp_expr .)
    LT              reduce using rule 41 (expression -> comp_expr .)
    GE              reduce using rule 41 (expression -> comp_expr .)
    LE              reduce using rule 41 (expression -> comp_expr .)
    NE              reduce using rule 41 (expression -> comp_expr .)
    IN              reduce using rule 41 (expression -> comp_expr .)
    OUTPUT          reduce using rule 41 (expression -> comp_expr .)
    REPEAT          reduce using rule 41 (expression -> comp_expr .)
    PAUSE           reduce using rule 41 (expression -> comp_expr .)
    FUNCTION        reduce using rule 41 (expression -> comp_expr .)
    WHILE           reduce using rule 41 (expression -> comp_expr .)
    SET             reduce using rule 41 (expression -> comp_expr .)
    IF              reduce using rule 41 (expression -> comp_expr .)
    $end            reduce using rule 41 (expression -> comp_expr .)
    UNTIL           reduce using rule 41 (expression -> comp_expr .)
    END             reduce using rule 41 (expression -> comp_expr .)
    ELSE            reduce using rule 41 (expression -> comp_expr .)
    DO              reduce using rule 41 (expression -> comp_expr .)
    THEN            reduce using rule 41 (expression -> comp_expr .)
    RPAREN          reduce using rule 41 (expression -> comp_expr .)
    TYPE            reduce using rule 41 (expression -> comp_expr .)
    LPAREN          reduce using rule 41 (expression -> comp_expr .)
    YES             reduce using rule 41 (expression -> comp_expr .)
    NO              reduce using rule 41 (expression -> comp_expr .)
    NUMBER          reduce using rule 41 (expression -> comp_expr .)
    IDENTIFIER      reduce using rule 41 (expression -> comp_expr .)
    TEXT            reduce using rule 41 (expression -> comp_expr .)
    INPUT           reduce using rule 41 (expression -> comp_expr .)
    NOT             reduce using rule 41 (expression -> comp_expr .)
    RANDOM          reduce using rule 41 (expression -> comp_expr .)
    TO              reduce using rule 41 (expression -> comp_expr .)
    AND             shift and go to state 50
    OR              shift and go to state 51

  ! AND             [ reduce using rule 41 (expression -> comp_expr .) ]
  ! OR              [ reduce using rule 41 (expression -> comp_expr .) ]


state 19

    (42) expression -> NUMBER .

    PLUS            reduce using rule 42 (expression -> NUMBER .)
    MINUS           reduce using rule 42 (expression -> NUMBER .)
    TIMES           reduce using rule 42 (expression -> NUMBER .)
    DIVIDE          reduce using rule 42 (expression -> NUMBER .)
    POWER           reduce using rule 42 (expression -> NUMBER .)
    EQ              reduce using rule 42 (expression -> NUMBER .)
    GT              reduce using rule 42 (expression -> NUMBER .)
    LT              reduce using rule 42 (expression -> NUMBER .)
    GE              reduce using rule 42 (expression -> NUMBER .)
    LE              reduce using rule 42 (expression -> NUMBER .)
    NE              reduce using rule 42 (expression -> NUMBER .)
    IN              reduce using rule 42 (expression -> NUMBER .)
    OUTPUT          reduce using rule 42 (expression -> NUMBER .)
    REPEAT          reduce using rule 42 (expression -> NUMBER .)
    PAUSE           reduce using rule 42 (expression -> NUMBER .)
    FUNCTION        reduce using rule 42 (expression -> NUMBER .)
    WHILE           reduce using rule 42 (expression -> NUMBER .)
    SET             reduce using rule 42 (expression -> NUMBER .)
    IF              reduce using rule 42 (expression -> NUMBER .)
    $end            reduce using rule 42 (expression -> NUMBER .)
    UNTIL           reduce using rule 42 (expression -> NUMBER .)
    END             reduce using rule 42 (expression -> NUMBER .)
    ELSE            reduce using rule 42 (expression -> NUMBER .)
    DO              reduce using rule 42 (expression -> NUMBER .)
    THEN            reduce using rule 42 (expression -> NUMBER .)
    RPAREN          reduce using rule 42 (expression -> NUMBER .)
    AND             reduce using rule 42 (expression -> NUMBER .)
    OR              reduce using rule 42 (expression -> NUMBER .)
    TYPE            reduce using rule 42 (expression -> NUMBER .)
    LPAREN          reduce using rule 42 (expression -> NUMBER .)
    YES             reduce using rule 42 (expression -> NUMBER .)
    NO              reduce using rule 42 (expression -> NUMBER .)
    NUMBER          reduce using rule 42 (expression -> NUMBER .)
    IDENTIFIER      reduce using rule 42 (expression -> NUMBER .)
    TEXT            reduce using rule 42 (expression -> NUMBER .)
    INPUT           reduce using rule 42 (expression -> NUMBER .)
    NOT             reduce using rule 42 (expression -> NUMBER .)
    RANDOM          reduce using rule 42 (expression -> NUMBER .)
    TO              reduce using rule 42 (expression -> NUMBER .)


state 20

    (43) expression -> IDENTIFIER .

    PLUS            reduce using rule 43 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 43 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 43 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 43 (expression -> IDENTIFIER .)
    POWER           reduce using rule 43 (expression -> IDENTIFIER .)
    EQ              reduce using rule 43 (expression -> IDENTIFIER .)
    GT              reduce using rule 43 (expression -> IDENTIFIER .)
    LT              reduce using rule 43 (expression -> IDENTIFIER .)
    GE              reduce using rule 43 (expression -> IDENTIFIER .)
    LE              reduce using rule 43 (expression -> IDENTIFIER .)
    NE              reduce using rule 43 (expression -> IDENTIFIER .)
    IN              reduce using rule 43 (expression -> IDENTIFIER .)
    OUTPUT          reduce using rule 43 (expression -> IDENTIFIER .)
    REPEAT          reduce using rule 43 (expression -> IDENTIFIER .)
    PAUSE           reduce using rule 43 (expression -> IDENTIFIER .)
    FUNCTION        reduce using rule 43 (expression -> IDENTIFIER .)
    WHILE           reduce using rule 43 (expression -> IDENTIFIER .)
    SET             reduce using rule 43 (expression -> IDENTIFIER .)
    IF              reduce using rule 43 (expression -> IDENTIFIER .)
    $end            reduce using rule 43 (expression -> IDENTIFIER .)
    UNTIL           reduce using rule 43 (expression -> IDENTIFIER .)
    END             reduce using rule 43 (expression -> IDENTIFIER .)
    ELSE            reduce using rule 43 (expression -> IDENTIFIER .)
    DO              reduce using rule 43 (expression -> IDENTIFIER .)
    THEN            reduce using rule 43 (expression -> IDENTIFIER .)
    RPAREN          reduce using rule 43 (expression -> IDENTIFIER .)
    AND             reduce using rule 43 (expression -> IDENTIFIER .)
    OR              reduce using rule 43 (expression -> IDENTIFIER .)
    TYPE            reduce using rule 43 (expression -> IDENTIFIER .)
    LPAREN          reduce using rule 43 (expression -> IDENTIFIER .)
    YES             reduce using rule 43 (expression -> IDENTIFIER .)
    NO              reduce using rule 43 (expression -> IDENTIFIER .)
    NUMBER          reduce using rule 43 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 43 (expression -> IDENTIFIER .)
    TEXT            reduce using rule 43 (expression -> IDENTIFIER .)
    INPUT           reduce using rule 43 (expression -> IDENTIFIER .)
    NOT             reduce using rule 43 (expression -> IDENTIFIER .)
    RANDOM          reduce using rule 43 (expression -> IDENTIFIER .)
    TO              reduce using rule 43 (expression -> IDENTIFIER .)


state 21

    (44) expression -> random_statement .

    PLUS            reduce using rule 44 (expression -> random_statement .)
    MINUS           reduce using rule 44 (expression -> random_statement .)
    TIMES           reduce using rule 44 (expression -> random_statement .)
    DIVIDE          reduce using rule 44 (expression -> random_statement .)
    POWER           reduce using rule 44 (expression -> random_statement .)
    EQ              reduce using rule 44 (expression -> random_statement .)
    GT              reduce using rule 44 (expression -> random_statement .)
    LT              reduce using rule 44 (expression -> random_statement .)
    GE              reduce using rule 44 (expression -> random_statement .)
    LE              reduce using rule 44 (expression -> random_statement .)
    NE              reduce using rule 44 (expression -> random_statement .)
    IN              reduce using rule 44 (expression -> random_statement .)
    OUTPUT          reduce using rule 44 (expression -> random_statement .)
    REPEAT          reduce using rule 44 (expression -> random_statement .)
    PAUSE           reduce using rule 44 (expression -> random_statement .)
    FUNCTION        reduce using rule 44 (expression -> random_statement .)
    WHILE           reduce using rule 44 (expression -> random_statement .)
    SET             reduce using rule 44 (expression -> random_statement .)
    IF              reduce using rule 44 (expression -> random_statement .)
    $end            reduce using rule 44 (expression -> random_statement .)
    UNTIL           reduce using rule 44 (expression -> random_statement .)
    END             reduce using rule 44 (expression -> random_statement .)
    ELSE            reduce using rule 44 (expression -> random_statement .)
    DO              reduce using rule 44 (expression -> random_statement .)
    THEN            reduce using rule 44 (expression -> random_statement .)
    RPAREN          reduce using rule 44 (expression -> random_statement .)
    AND             reduce using rule 44 (expression -> random_statement .)
    OR              reduce using rule 44 (expression -> random_statement .)
    TYPE            reduce using rule 44 (expression -> random_statement .)
    LPAREN          reduce using rule 44 (expression -> random_statement .)
    YES             reduce using rule 44 (expression -> random_statement .)
    NO              reduce using rule 44 (expression -> random_statement .)
    NUMBER          reduce using rule 44 (expression -> random_statement .)
    IDENTIFIER      reduce using rule 44 (expression -> random_statement .)
    TEXT            reduce using rule 44 (expression -> random_statement .)
    INPUT           reduce using rule 44 (expression -> random_statement .)
    NOT             reduce using rule 44 (expression -> random_statement .)
    RANDOM          reduce using rule 44 (expression -> random_statement .)
    TO              reduce using rule 44 (expression -> random_statement .)


state 22

    (45) expression -> TEXT .
    (6) ask -> TEXT . EXPECTING INPUT AND DATATYPE

    PLUS            reduce using rule 45 (expression -> TEXT .)
    MINUS           reduce using rule 45 (expression -> TEXT .)
    TIMES           reduce using rule 45 (expression -> TEXT .)
    DIVIDE          reduce using rule 45 (expression -> TEXT .)
    POWER           reduce using rule 45 (expression -> TEXT .)
    EQ              reduce using rule 45 (expression -> TEXT .)
    GT              reduce using rule 45 (expression -> TEXT .)
    LT              reduce using rule 45 (expression -> TEXT .)
    GE              reduce using rule 45 (expression -> TEXT .)
    LE              reduce using rule 45 (expression -> TEXT .)
    NE              reduce using rule 45 (expression -> TEXT .)
    IN              reduce using rule 45 (expression -> TEXT .)
    OUTPUT          reduce using rule 45 (expression -> TEXT .)
    REPEAT          reduce using rule 45 (expression -> TEXT .)
    PAUSE           reduce using rule 45 (expression -> TEXT .)
    FUNCTION        reduce using rule 45 (expression -> TEXT .)
    WHILE           reduce using rule 45 (expression -> TEXT .)
    SET             reduce using rule 45 (expression -> TEXT .)
    IF              reduce using rule 45 (expression -> TEXT .)
    $end            reduce using rule 45 (expression -> TEXT .)
    UNTIL           reduce using rule 45 (expression -> TEXT .)
    END             reduce using rule 45 (expression -> TEXT .)
    ELSE            reduce using rule 45 (expression -> TEXT .)
    TYPE            reduce using rule 45 (expression -> TEXT .)
    LPAREN          reduce using rule 45 (expression -> TEXT .)
    YES             reduce using rule 45 (expression -> TEXT .)
    NO              reduce using rule 45 (expression -> TEXT .)
    NUMBER          reduce using rule 45 (expression -> TEXT .)
    IDENTIFIER      reduce using rule 45 (expression -> TEXT .)
    TEXT            reduce using rule 45 (expression -> TEXT .)
    INPUT           reduce using rule 45 (expression -> TEXT .)
    NOT             reduce using rule 45 (expression -> TEXT .)
    RANDOM          reduce using rule 45 (expression -> TEXT .)
    EXPECTING       shift and go to state 52


state 23

    (46) expression -> INPUT .

    PLUS            reduce using rule 46 (expression -> INPUT .)
    MINUS           reduce using rule 46 (expression -> INPUT .)
    TIMES           reduce using rule 46 (expression -> INPUT .)
    DIVIDE          reduce using rule 46 (expression -> INPUT .)
    POWER           reduce using rule 46 (expression -> INPUT .)
    EQ              reduce using rule 46 (expression -> INPUT .)
    GT              reduce using rule 46 (expression -> INPUT .)
    LT              reduce using rule 46 (expression -> INPUT .)
    GE              reduce using rule 46 (expression -> INPUT .)
    LE              reduce using rule 46 (expression -> INPUT .)
    NE              reduce using rule 46 (expression -> INPUT .)
    IN              reduce using rule 46 (expression -> INPUT .)
    OUTPUT          reduce using rule 46 (expression -> INPUT .)
    REPEAT          reduce using rule 46 (expression -> INPUT .)
    PAUSE           reduce using rule 46 (expression -> INPUT .)
    FUNCTION        reduce using rule 46 (expression -> INPUT .)
    WHILE           reduce using rule 46 (expression -> INPUT .)
    SET             reduce using rule 46 (expression -> INPUT .)
    IF              reduce using rule 46 (expression -> INPUT .)
    $end            reduce using rule 46 (expression -> INPUT .)
    UNTIL           reduce using rule 46 (expression -> INPUT .)
    END             reduce using rule 46 (expression -> INPUT .)
    ELSE            reduce using rule 46 (expression -> INPUT .)
    DO              reduce using rule 46 (expression -> INPUT .)
    THEN            reduce using rule 46 (expression -> INPUT .)
    RPAREN          reduce using rule 46 (expression -> INPUT .)
    AND             reduce using rule 46 (expression -> INPUT .)
    OR              reduce using rule 46 (expression -> INPUT .)
    TYPE            reduce using rule 46 (expression -> INPUT .)
    LPAREN          reduce using rule 46 (expression -> INPUT .)
    YES             reduce using rule 46 (expression -> INPUT .)
    NO              reduce using rule 46 (expression -> INPUT .)
    NUMBER          reduce using rule 46 (expression -> INPUT .)
    IDENTIFIER      reduce using rule 46 (expression -> INPUT .)
    TEXT            reduce using rule 46 (expression -> INPUT .)
    INPUT           reduce using rule 46 (expression -> INPUT .)
    NOT             reduce using rule 46 (expression -> INPUT .)
    RANDOM          reduce using rule 46 (expression -> INPUT .)
    TO              reduce using rule 46 (expression -> INPUT .)


state 24

    (39) comp_expr -> NOT . expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . expression POWER expression
    (28) expression -> . LPAREN expression RPAREN
    (29) expression -> . YES
    (30) expression -> . NO
    (41) expression -> . comp_expr
    (42) expression -> . NUMBER
    (43) expression -> . IDENTIFIER
    (44) expression -> . random_statement
    (45) expression -> . TEXT
    (46) expression -> . INPUT
    (31) comp_expr -> . expression EQ expression
    (32) comp_expr -> . expression GT expression
    (33) comp_expr -> . expression LT expression
    (34) comp_expr -> . expression GE expression
    (35) comp_expr -> . expression LE expression
    (36) comp_expr -> . expression NE expression
    (37) comp_expr -> . comp_expr AND comp_expr
    (38) comp_expr -> . comp_expr OR comp_expr
    (39) comp_expr -> . NOT expression
    (40) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 15
    YES             shift and go to state 16
    NO              shift and go to state 17
    NUMBER          shift and go to state 19
    IDENTIFIER      shift and go to state 20
    TEXT            shift and go to state 32
    INPUT           shift and go to state 23
    NOT             shift and go to state 24
    RANDOM          shift and go to state 25

    expression                     shift and go to state 53
    comp_expr                      shift and go to state 18
    random_statement               shift and go to state 21

state 25

    (7) random_statement -> RANDOM . DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 54


state 26

    (9) statement -> var_assignment TO . expression
    (11) statement -> var_assignment TO . ask
    (12) statement -> var_assignment TO . items type_stmt
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . expression POWER expression
    (28) expression -> . LPAREN expression RPAREN
    (29) expression -> . YES
    (30) expression -> . NO
    (41) expression -> . comp_expr
    (42) expression -> . NUMBER
    (43) expression -> . IDENTIFIER
    (44) expression -> . random_statement
    (45) expression -> . TEXT
    (46) expression -> . INPUT
    (6) ask -> . TEXT EXPECTING INPUT AND DATATYPE
    (21) items -> . expression
    (22) items -> . items expression
    (31) comp_expr -> . expression EQ expression
    (32) comp_expr -> . expression GT expression
    (33) comp_expr -> . expression LT expression
    (34) comp_expr -> . expression GE expression
    (35) comp_expr -> . expression LE expression
    (36) comp_expr -> . expression NE expression
    (37) comp_expr -> . comp_expr AND comp_expr
    (38) comp_expr -> . comp_expr OR comp_expr
    (39) comp_expr -> . NOT expression
    (40) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 15
    YES             shift and go to state 16
    NO              shift and go to state 17
    NUMBER          shift and go to state 19
    IDENTIFIER      shift and go to state 20
    TEXT            shift and go to state 22
    INPUT           shift and go to state 23
    NOT             shift and go to state 24
    RANDOM          shift and go to state 25

    expression                     shift and go to state 55
    ask                            shift and go to state 56
    items                          shift and go to state 57
    comp_expr                      shift and go to state 18
    random_statement               shift and go to state 21

state 27

    (14) statement -> if_then end_statement .

    OUTPUT          reduce using rule 14 (statement -> if_then end_statement .)
    REPEAT          reduce using rule 14 (statement -> if_then end_statement .)
    PAUSE           reduce using rule 14 (statement -> if_then end_statement .)
    FUNCTION        reduce using rule 14 (statement -> if_then end_statement .)
    WHILE           reduce using rule 14 (statement -> if_then end_statement .)
    SET             reduce using rule 14 (statement -> if_then end_statement .)
    IF              reduce using rule 14 (statement -> if_then end_statement .)
    $end            reduce using rule 14 (statement -> if_then end_statement .)
    UNTIL           reduce using rule 14 (statement -> if_then end_statement .)
    END             reduce using rule 14 (statement -> if_then end_statement .)
    ELSE            reduce using rule 14 (statement -> if_then end_statement .)


state 28

    (15) statement -> if_then ELSE . THEN statements end_statement

    THEN            shift and go to state 58


state 29

    (3) end_statement -> END .

    OUTPUT          reduce using rule 3 (end_statement -> END .)
    REPEAT          reduce using rule 3 (end_statement -> END .)
    PAUSE           reduce using rule 3 (end_statement -> END .)
    FUNCTION        reduce using rule 3 (end_statement -> END .)
    WHILE           reduce using rule 3 (end_statement -> END .)
    SET             reduce using rule 3 (end_statement -> END .)
    IF              reduce using rule 3 (end_statement -> END .)
    $end            reduce using rule 3 (end_statement -> END .)
    UNTIL           reduce using rule 3 (end_statement -> END .)
    END             reduce using rule 3 (end_statement -> END .)
    ELSE            reduce using rule 3 (end_statement -> END .)


state 30

    (16) statement -> REPEAT statements . UNTIL expression
    (2) statements -> statements . statement
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . WHILE expression DO statements end_statement
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    UNTIL           shift and go to state 59
    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    SET             shift and go to state 10
    IF              shift and go to state 11

    statement                      shift and go to state 12
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 31

    (17) statement -> PAUSE expression .
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . TIMES expression
    (26) expression -> expression . DIVIDE expression
    (27) expression -> expression . POWER expression
    (31) comp_expr -> expression . EQ expression
    (32) comp_expr -> expression . GT expression
    (33) comp_expr -> expression . LT expression
    (34) comp_expr -> expression . GE expression
    (35) comp_expr -> expression . LE expression
    (36) comp_expr -> expression . NE expression
    (40) comp_expr -> expression . IN expression

    OUTPUT          reduce using rule 17 (statement -> PAUSE expression .)
    REPEAT          reduce using rule 17 (statement -> PAUSE expression .)
    PAUSE           reduce using rule 17 (statement -> PAUSE expression .)
    FUNCTION        reduce using rule 17 (statement -> PAUSE expression .)
    WHILE           reduce using rule 17 (statement -> PAUSE expression .)
    SET             reduce using rule 17 (statement -> PAUSE expression .)
    IF              reduce using rule 17 (statement -> PAUSE expression .)
    $end            reduce using rule 17 (statement -> PAUSE expression .)
    UNTIL           reduce using rule 17 (statement -> PAUSE expression .)
    END             reduce using rule 17 (statement -> PAUSE expression .)
    ELSE            reduce using rule 17 (statement -> PAUSE expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    POWER           shift and go to state 41
    EQ              shift and go to state 42
    GT              shift and go to state 43
    LT              shift and go to state 44
    GE              shift and go to state 45
    LE              shift and go to state 46
    NE              shift and go to state 47
    IN              shift and go to state 48


state 32

    (45) expression -> TEXT .

    PLUS            reduce using rule 45 (expression -> TEXT .)
    MINUS           reduce using rule 45 (expression -> TEXT .)
    TIMES           reduce using rule 45 (expression -> TEXT .)
    DIVIDE          reduce using rule 45 (expression -> TEXT .)
    POWER           reduce using rule 45 (expression -> TEXT .)
    EQ              reduce using rule 45 (expression -> TEXT .)
    GT              reduce using rule 45 (expression -> TEXT .)
    LT              reduce using rule 45 (expression -> TEXT .)
    GE              reduce using rule 45 (expression -> TEXT .)
    LE              reduce using rule 45 (expression -> TEXT .)
    NE              reduce using rule 45 (expression -> TEXT .)
    IN              reduce using rule 45 (expression -> TEXT .)
    OUTPUT          reduce using rule 45 (expression -> TEXT .)
    REPEAT          reduce using rule 45 (expression -> TEXT .)
    PAUSE           reduce using rule 45 (expression -> TEXT .)
    FUNCTION        reduce using rule 45 (expression -> TEXT .)
    WHILE           reduce using rule 45 (expression -> TEXT .)
    SET             reduce using rule 45 (expression -> TEXT .)
    IF              reduce using rule 45 (expression -> TEXT .)
    $end            reduce using rule 45 (expression -> TEXT .)
    UNTIL           reduce using rule 45 (expression -> TEXT .)
    END             reduce using rule 45 (expression -> TEXT .)
    ELSE            reduce using rule 45 (expression -> TEXT .)
    DO              reduce using rule 45 (expression -> TEXT .)
    THEN            reduce using rule 45 (expression -> TEXT .)
    RPAREN          reduce using rule 45 (expression -> TEXT .)
    AND             reduce using rule 45 (expression -> TEXT .)
    OR              reduce using rule 45 (expression -> TEXT .)
    TYPE            reduce using rule 45 (expression -> TEXT .)
    LPAREN          reduce using rule 45 (expression -> TEXT .)
    YES             reduce using rule 45 (expression -> TEXT .)
    NO              reduce using rule 45 (expression -> TEXT .)
    NUMBER          reduce using rule 45 (expression -> TEXT .)
    IDENTIFIER      reduce using rule 45 (expression -> TEXT .)
    TEXT            reduce using rule 45 (expression -> TEXT .)
    INPUT           reduce using rule 45 (expression -> TEXT .)
    NOT             reduce using rule 45 (expression -> TEXT .)
    RANDOM          reduce using rule 45 (expression -> TEXT .)
    TO              reduce using rule 45 (expression -> TEXT .)


state 33

    (19) statement -> FUNCTION IDENTIFIER . MEANS statements end_statement

    MEANS           shift and go to state 60


state 34

    (20) statement -> WHILE expression . DO statements end_statement
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . TIMES expression
    (26) expression -> expression . DIVIDE expression
    (27) expression -> expression . POWER expression
    (31) comp_expr -> expression . EQ expression
    (32) comp_expr -> expression . GT expression
    (33) comp_expr -> expression . LT expression
    (34) comp_expr -> expression . GE expression
    (35) comp_expr -> expression . LE expression
    (36) comp_expr -> expression . NE expression
    (40) comp_expr -> expression . IN expression

    DO              shift and go to state 61
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    POWER           shift and go to state 41
    EQ              shift and go to state 42
    GT              shift and go to state 43
    LT              shift and go to state 44
    GE              shift and go to state 45
    LE              shift and go to state 46
    NE              shift and go to state 47
    IN              shift and go to state 48


state 35

    (8) var_assignment -> SET IDENTIFIER .

    TO              reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    OUTPUT          reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    REPEAT          reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    PAUSE           reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    FUNCTION        reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    WHILE           reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    SET             reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    IF              reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    $end            reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    UNTIL           reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    END             reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    ELSE            reduce using rule 8 (var_assignment -> SET IDENTIFIER .)


state 36

    (13) if_then -> IF expression . THEN statements
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . TIMES expression
    (26) expression -> expression . DIVIDE expression
    (27) expression -> expression . POWER expression
    (31) comp_expr -> expression . EQ expression
    (32) comp_expr -> expression . GT expression
    (33) comp_expr -> expression . LT expression
    (34) comp_expr -> expression . GE expression
    (35) comp_expr -> expression . LE expression
    (36) comp_expr -> expression . NE expression
    (40) comp_expr -> expression . IN expression

    THEN            shift and go to state 62
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    POWER           shift and go to state 41
    EQ              shift and go to state 42
    GT              shift and go to state 43
    LT              shift and go to state 44
    GE              shift and go to state 45
    LE              shift and go to state 46
    NE              shift and go to state 47
    IN              shift and go to state 48


state 37

    (23) expression -> expression PLUS . expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . expression POWER expression
    (28) expression -> . LPAREN expression RPAREN
    (29) expression -> . YES
    (30) expression -> . NO
    (41) expression -> . comp_expr
    (42) expression -> . NUMBER
    (43) expression -> . IDENTIFIER
    (44) expression -> . random_statement
    (45) expression -> . TEXT
    (46) expression -> . INPUT
    (31) comp_expr -> . expression EQ expression
    (32) comp_expr -> . expression GT expression
    (33) comp_expr -> . expression LT expression
    (34) comp_expr -> . expression GE expression
    (35) comp_expr -> . expression LE expression
    (36) comp_expr -> . expression NE expression
    (37) comp_expr -> . comp_expr AND comp_expr
    (38) comp_expr -> . comp_expr OR comp_expr
    (39) comp_expr -> . NOT expression
    (40) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 15
    YES             shift and go to state 16
    NO              shift and go to state 17
    NUMBER          shift and go to state 19
    IDENTIFIER      shift and go to state 20
    TEXT            shift and go to state 32
    INPUT           shift and go to state 23
    NOT             shift and go to state 24
    RANDOM          shift and go to state 25

    expression                     shift and go to state 63
    comp_expr                      shift and go to state 18
    random_statement               shift and go to state 21

state 38

    (24) expression -> expression MINUS . expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . expression POWER expression
    (28) expression -> . LPAREN expression RPAREN
    (29) expression -> . YES
    (30) expression -> . NO
    (41) expression -> . comp_expr
    (42) expression -> . NUMBER
    (43) expression -> . IDENTIFIER
    (44) expression -> . random_statement
    (45) expression -> . TEXT
    (46) expression -> . INPUT
    (31) comp_expr -> . expression EQ expression
    (32) comp_expr -> . expression GT expression
    (33) comp_expr -> . expression LT expression
    (34) comp_expr -> . expression GE expression
    (35) comp_expr -> . expression LE expression
    (36) comp_expr -> . expression NE expression
    (37) comp_expr -> . comp_expr AND comp_expr
    (38) comp_expr -> . comp_expr OR comp_expr
    (39) comp_expr -> . NOT expression
    (40) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 15
    YES             shift and go to state 16
    NO              shift and go to state 17
    NUMBER          shift and go to state 19
    IDENTIFIER      shift and go to state 20
    TEXT            shift and go to state 32
    INPUT           shift and go to state 23
    NOT             shift and go to state 24
    RANDOM          shift and go to state 25

    expression                     shift and go to state 64
    comp_expr                      shift and go to state 18
    random_statement               shift and go to state 21

state 39

    (25) expression -> expression TIMES . expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . expression POWER expression
    (28) expression -> . LPAREN expression RPAREN
    (29) expression -> . YES
    (30) expression -> . NO
    (41) expression -> . comp_expr
    (42) expression -> . NUMBER
    (43) expression -> . IDENTIFIER
    (44) expression -> . random_statement
    (45) expression -> . TEXT
    (46) expression -> . INPUT
    (31) comp_expr -> . expression EQ expression
    (32) comp_expr -> . expression GT expression
    (33) comp_expr -> . expression LT expression
    (34) comp_expr -> . expression GE expression
    (35) comp_expr -> . expression LE expression
    (36) comp_expr -> . expression NE expression
    (37) comp_expr -> . comp_expr AND comp_expr
    (38) comp_expr -> . comp_expr OR comp_expr
    (39) comp_expr -> . NOT expression
    (40) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 15
    YES             shift and go to state 16
    NO              shift and go to state 17
    NUMBER          shift and go to state 19
    IDENTIFIER      shift and go to state 20
    TEXT            shift and go to state 32
    INPUT           shift and go to state 23
    NOT             shift and go to state 24
    RANDOM          shift and go to state 25

    expression                     shift and go to state 65
    comp_expr                      shift and go to state 18
    random_statement               shift and go to state 21

state 40

    (26) expression -> expression DIVIDE . expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . expression POWER expression
    (28) expression -> . LPAREN expression RPAREN
    (29) expression -> . YES
    (30) expression -> . NO
    (41) expression -> . comp_expr
    (42) expression -> . NUMBER
    (43) expression -> . IDENTIFIER
    (44) expression -> . random_statement
    (45) expression -> . TEXT
    (46) expression -> . INPUT
    (31) comp_expr -> . expression EQ expression
    (32) comp_expr -> . expression GT expression
    (33) comp_expr -> . expression LT expression
    (34) comp_expr -> . expression GE expression
    (35) comp_expr -> . expression LE expression
    (36) comp_expr -> . expression NE expression
    (37) comp_expr -> . comp_expr AND comp_expr
    (38) comp_expr -> . comp_expr OR comp_expr
    (39) comp_expr -> . NOT expression
    (40) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 15
    YES             shift and go to state 16
    NO              shift and go to state 17
    NUMBER          shift and go to state 19
    IDENTIFIER      shift and go to state 20
    TEXT            shift and go to state 32
    INPUT           shift and go to state 23
    NOT             shift and go to state 24
    RANDOM          shift and go to state 25

    expression                     shift and go to state 66
    comp_expr                      shift and go to state 18
    random_statement               shift and go to state 21

state 41

    (27) expression -> expression POWER . expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . expression POWER expression
    (28) expression -> . LPAREN expression RPAREN
    (29) expression -> . YES
    (30) expression -> . NO
    (41) expression -> . comp_expr
    (42) expression -> . NUMBER
    (43) expression -> . IDENTIFIER
    (44) expression -> . random_statement
    (45) expression -> . TEXT
    (46) expression -> . INPUT
    (31) comp_expr -> . expression EQ expression
    (32) comp_expr -> . expression GT expression
    (33) comp_expr -> . expression LT expression
    (34) comp_expr -> . expression GE expression
    (35) comp_expr -> . expression LE expression
    (36) comp_expr -> . expression NE expression
    (37) comp_expr -> . comp_expr AND comp_expr
    (38) comp_expr -> . comp_expr OR comp_expr
    (39) comp_expr -> . NOT expression
    (40) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 15
    YES             shift and go to state 16
    NO              shift and go to state 17
    NUMBER          shift and go to state 19
    IDENTIFIER      shift and go to state 20
    TEXT            shift and go to state 32
    INPUT           shift and go to state 23
    NOT             shift and go to state 24
    RANDOM          shift and go to state 25

    expression                     shift and go to state 67
    comp_expr                      shift and go to state 18
    random_statement               shift and go to state 21

state 42

    (31) comp_expr -> expression EQ . expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . expression POWER expression
    (28) expression -> . LPAREN expression RPAREN
    (29) expression -> . YES
    (30) expression -> . NO
    (41) expression -> . comp_expr
    (42) expression -> . NUMBER
    (43) expression -> . IDENTIFIER
    (44) expression -> . random_statement
    (45) expression -> . TEXT
    (46) expression -> . INPUT
    (31) comp_expr -> . expression EQ expression
    (32) comp_expr -> . expression GT expression
    (33) comp_expr -> . expression LT expression
    (34) comp_expr -> . expression GE expression
    (35) comp_expr -> . expression LE expression
    (36) comp_expr -> . expression NE expression
    (37) comp_expr -> . comp_expr AND comp_expr
    (38) comp_expr -> . comp_expr OR comp_expr
    (39) comp_expr -> . NOT expression
    (40) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 15
    YES             shift and go to state 16
    NO              shift and go to state 17
    NUMBER          shift and go to state 19
    IDENTIFIER      shift and go to state 20
    TEXT            shift and go to state 32
    INPUT           shift and go to state 23
    NOT             shift and go to state 24
    RANDOM          shift and go to state 25

    expression                     shift and go to state 68
    comp_expr                      shift and go to state 18
    random_statement               shift and go to state 21

state 43

    (32) comp_expr -> expression GT . expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . expression POWER expression
    (28) expression -> . LPAREN expression RPAREN
    (29) expression -> . YES
    (30) expression -> . NO
    (41) expression -> . comp_expr
    (42) expression -> . NUMBER
    (43) expression -> . IDENTIFIER
    (44) expression -> . random_statement
    (45) expression -> . TEXT
    (46) expression -> . INPUT
    (31) comp_expr -> . expression EQ expression
    (32) comp_expr -> . expression GT expression
    (33) comp_expr -> . expression LT expression
    (34) comp_expr -> . expression GE expression
    (35) comp_expr -> . expression LE expression
    (36) comp_expr -> . expression NE expression
    (37) comp_expr -> . comp_expr AND comp_expr
    (38) comp_expr -> . comp_expr OR comp_expr
    (39) comp_expr -> . NOT expression
    (40) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 15
    YES             shift and go to state 16
    NO              shift and go to state 17
    NUMBER          shift and go to state 19
    IDENTIFIER      shift and go to state 20
    TEXT            shift and go to state 32
    INPUT           shift and go to state 23
    NOT             shift and go to state 24
    RANDOM          shift and go to state 25

    expression                     shift and go to state 69
    comp_expr                      shift and go to state 18
    random_statement               shift and go to state 21

state 44

    (33) comp_expr -> expression LT . expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . expression POWER expression
    (28) expression -> . LPAREN expression RPAREN
    (29) expression -> . YES
    (30) expression -> . NO
    (41) expression -> . comp_expr
    (42) expression -> . NUMBER
    (43) expression -> . IDENTIFIER
    (44) expression -> . random_statement
    (45) expression -> . TEXT
    (46) expression -> . INPUT
    (31) comp_expr -> . expression EQ expression
    (32) comp_expr -> . expression GT expression
    (33) comp_expr -> . expression LT expression
    (34) comp_expr -> . expression GE expression
    (35) comp_expr -> . expression LE expression
    (36) comp_expr -> . expression NE expression
    (37) comp_expr -> . comp_expr AND comp_expr
    (38) comp_expr -> . comp_expr OR comp_expr
    (39) comp_expr -> . NOT expression
    (40) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 15
    YES             shift and go to state 16
    NO              shift and go to state 17
    NUMBER          shift and go to state 19
    IDENTIFIER      shift and go to state 20
    TEXT            shift and go to state 32
    INPUT           shift and go to state 23
    NOT             shift and go to state 24
    RANDOM          shift and go to state 25

    expression                     shift and go to state 70
    comp_expr                      shift and go to state 18
    random_statement               shift and go to state 21

state 45

    (34) comp_expr -> expression GE . expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . expression POWER expression
    (28) expression -> . LPAREN expression RPAREN
    (29) expression -> . YES
    (30) expression -> . NO
    (41) expression -> . comp_expr
    (42) expression -> . NUMBER
    (43) expression -> . IDENTIFIER
    (44) expression -> . random_statement
    (45) expression -> . TEXT
    (46) expression -> . INPUT
    (31) comp_expr -> . expression EQ expression
    (32) comp_expr -> . expression GT expression
    (33) comp_expr -> . expression LT expression
    (34) comp_expr -> . expression GE expression
    (35) comp_expr -> . expression LE expression
    (36) comp_expr -> . expression NE expression
    (37) comp_expr -> . comp_expr AND comp_expr
    (38) comp_expr -> . comp_expr OR comp_expr
    (39) comp_expr -> . NOT expression
    (40) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 15
    YES             shift and go to state 16
    NO              shift and go to state 17
    NUMBER          shift and go to state 19
    IDENTIFIER      shift and go to state 20
    TEXT            shift and go to state 32
    INPUT           shift and go to state 23
    NOT             shift and go to state 24
    RANDOM          shift and go to state 25

    expression                     shift and go to state 71
    comp_expr                      shift and go to state 18
    random_statement               shift and go to state 21

state 46

    (35) comp_expr -> expression LE . expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . expression POWER expression
    (28) expression -> . LPAREN expression RPAREN
    (29) expression -> . YES
    (30) expression -> . NO
    (41) expression -> . comp_expr
    (42) expression -> . NUMBER
    (43) expression -> . IDENTIFIER
    (44) expression -> . random_statement
    (45) expression -> . TEXT
    (46) expression -> . INPUT
    (31) comp_expr -> . expression EQ expression
    (32) comp_expr -> . expression GT expression
    (33) comp_expr -> . expression LT expression
    (34) comp_expr -> . expression GE expression
    (35) comp_expr -> . expression LE expression
    (36) comp_expr -> . expression NE expression
    (37) comp_expr -> . comp_expr AND comp_expr
    (38) comp_expr -> . comp_expr OR comp_expr
    (39) comp_expr -> . NOT expression
    (40) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 15
    YES             shift and go to state 16
    NO              shift and go to state 17
    NUMBER          shift and go to state 19
    IDENTIFIER      shift and go to state 20
    TEXT            shift and go to state 32
    INPUT           shift and go to state 23
    NOT             shift and go to state 24
    RANDOM          shift and go to state 25

    expression                     shift and go to state 72
    comp_expr                      shift and go to state 18
    random_statement               shift and go to state 21

state 47

    (36) comp_expr -> expression NE . expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . expression POWER expression
    (28) expression -> . LPAREN expression RPAREN
    (29) expression -> . YES
    (30) expression -> . NO
    (41) expression -> . comp_expr
    (42) expression -> . NUMBER
    (43) expression -> . IDENTIFIER
    (44) expression -> . random_statement
    (45) expression -> . TEXT
    (46) expression -> . INPUT
    (31) comp_expr -> . expression EQ expression
    (32) comp_expr -> . expression GT expression
    (33) comp_expr -> . expression LT expression
    (34) comp_expr -> . expression GE expression
    (35) comp_expr -> . expression LE expression
    (36) comp_expr -> . expression NE expression
    (37) comp_expr -> . comp_expr AND comp_expr
    (38) comp_expr -> . comp_expr OR comp_expr
    (39) comp_expr -> . NOT expression
    (40) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 15
    YES             shift and go to state 16
    NO              shift and go to state 17
    NUMBER          shift and go to state 19
    IDENTIFIER      shift and go to state 20
    TEXT            shift and go to state 32
    INPUT           shift and go to state 23
    NOT             shift and go to state 24
    RANDOM          shift and go to state 25

    expression                     shift and go to state 73
    comp_expr                      shift and go to state 18
    random_statement               shift and go to state 21

state 48

    (40) comp_expr -> expression IN . expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . expression POWER expression
    (28) expression -> . LPAREN expression RPAREN
    (29) expression -> . YES
    (30) expression -> . NO
    (41) expression -> . comp_expr
    (42) expression -> . NUMBER
    (43) expression -> . IDENTIFIER
    (44) expression -> . random_statement
    (45) expression -> . TEXT
    (46) expression -> . INPUT
    (31) comp_expr -> . expression EQ expression
    (32) comp_expr -> . expression GT expression
    (33) comp_expr -> . expression LT expression
    (34) comp_expr -> . expression GE expression
    (35) comp_expr -> . expression LE expression
    (36) comp_expr -> . expression NE expression
    (37) comp_expr -> . comp_expr AND comp_expr
    (38) comp_expr -> . comp_expr OR comp_expr
    (39) comp_expr -> . NOT expression
    (40) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 15
    YES             shift and go to state 16
    NO              shift and go to state 17
    NUMBER          shift and go to state 19
    IDENTIFIER      shift and go to state 20
    TEXT            shift and go to state 32
    INPUT           shift and go to state 23
    NOT             shift and go to state 24
    RANDOM          shift and go to state 25

    expression                     shift and go to state 74
    comp_expr                      shift and go to state 18
    random_statement               shift and go to state 21

state 49

    (28) expression -> LPAREN expression . RPAREN
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . TIMES expression
    (26) expression -> expression . DIVIDE expression
    (27) expression -> expression . POWER expression
    (31) comp_expr -> expression . EQ expression
    (32) comp_expr -> expression . GT expression
    (33) comp_expr -> expression . LT expression
    (34) comp_expr -> expression . GE expression
    (35) comp_expr -> expression . LE expression
    (36) comp_expr -> expression . NE expression
    (40) comp_expr -> expression . IN expression

    RPAREN          shift and go to state 75
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    POWER           shift and go to state 41
    EQ              shift and go to state 42
    GT              shift and go to state 43
    LT              shift and go to state 44
    GE              shift and go to state 45
    LE              shift and go to state 46
    NE              shift and go to state 47
    IN              shift and go to state 48


state 50

    (37) comp_expr -> comp_expr AND . comp_expr
    (31) comp_expr -> . expression EQ expression
    (32) comp_expr -> . expression GT expression
    (33) comp_expr -> . expression LT expression
    (34) comp_expr -> . expression GE expression
    (35) comp_expr -> . expression LE expression
    (36) comp_expr -> . expression NE expression
    (37) comp_expr -> . comp_expr AND comp_expr
    (38) comp_expr -> . comp_expr OR comp_expr
    (39) comp_expr -> . NOT expression
    (40) comp_expr -> . expression IN expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . expression POWER expression
    (28) expression -> . LPAREN expression RPAREN
    (29) expression -> . YES
    (30) expression -> . NO
    (41) expression -> . comp_expr
    (42) expression -> . NUMBER
    (43) expression -> . IDENTIFIER
    (44) expression -> . random_statement
    (45) expression -> . TEXT
    (46) expression -> . INPUT
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    YES             shift and go to state 16
    NO              shift and go to state 17
    NUMBER          shift and go to state 19
    IDENTIFIER      shift and go to state 20
    TEXT            shift and go to state 32
    INPUT           shift and go to state 23
    RANDOM          shift and go to state 25

    comp_expr                      shift and go to state 76
    expression                     shift and go to state 77
    random_statement               shift and go to state 21

state 51

    (38) comp_expr -> comp_expr OR . comp_expr
    (31) comp_expr -> . expression EQ expression
    (32) comp_expr -> . expression GT expression
    (33) comp_expr -> . expression LT expression
    (34) comp_expr -> . expression GE expression
    (35) comp_expr -> . expression LE expression
    (36) comp_expr -> . expression NE expression
    (37) comp_expr -> . comp_expr AND comp_expr
    (38) comp_expr -> . comp_expr OR comp_expr
    (39) comp_expr -> . NOT expression
    (40) comp_expr -> . expression IN expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . expression POWER expression
    (28) expression -> . LPAREN expression RPAREN
    (29) expression -> . YES
    (30) expression -> . NO
    (41) expression -> . comp_expr
    (42) expression -> . NUMBER
    (43) expression -> . IDENTIFIER
    (44) expression -> . random_statement
    (45) expression -> . TEXT
    (46) expression -> . INPUT
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    NOT             shift and go to state 24
    LPAREN          shift and go to state 15
    YES             shift and go to state 16
    NO              shift and go to state 17
    NUMBER          shift and go to state 19
    IDENTIFIER      shift and go to state 20
    TEXT            shift and go to state 32
    INPUT           shift and go to state 23
    RANDOM          shift and go to state 25

    comp_expr                      shift and go to state 78
    expression                     shift and go to state 77
    random_statement               shift and go to state 21

state 52

    (6) ask -> TEXT EXPECTING . INPUT AND DATATYPE

    INPUT           shift and go to state 79


state 53

    (39) comp_expr -> NOT expression .
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . TIMES expression
    (26) expression -> expression . DIVIDE expression
    (27) expression -> expression . POWER expression
    (31) comp_expr -> expression . EQ expression
    (32) comp_expr -> expression . GT expression
    (33) comp_expr -> expression . LT expression
    (34) comp_expr -> expression . GE expression
    (35) comp_expr -> expression . LE expression
    (36) comp_expr -> expression . NE expression
    (40) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    AND             reduce using rule 39 (comp_expr -> NOT expression .)
    OR              reduce using rule 39 (comp_expr -> NOT expression .)
    OUTPUT          reduce using rule 39 (comp_expr -> NOT expression .)
    REPEAT          reduce using rule 39 (comp_expr -> NOT expression .)
    PAUSE           reduce using rule 39 (comp_expr -> NOT expression .)
    FUNCTION        reduce using rule 39 (comp_expr -> NOT expression .)
    WHILE           reduce using rule 39 (comp_expr -> NOT expression .)
    SET             reduce using rule 39 (comp_expr -> NOT expression .)
    IF              reduce using rule 39 (comp_expr -> NOT expression .)
    $end            reduce using rule 39 (comp_expr -> NOT expression .)
    UNTIL           reduce using rule 39 (comp_expr -> NOT expression .)
    END             reduce using rule 39 (comp_expr -> NOT expression .)
    ELSE            reduce using rule 39 (comp_expr -> NOT expression .)
    DO              reduce using rule 39 (comp_expr -> NOT expression .)
    THEN            reduce using rule 39 (comp_expr -> NOT expression .)
    RPAREN          reduce using rule 39 (comp_expr -> NOT expression .)
    TYPE            reduce using rule 39 (comp_expr -> NOT expression .)
    LPAREN          reduce using rule 39 (comp_expr -> NOT expression .)
    YES             reduce using rule 39 (comp_expr -> NOT expression .)
    NO              reduce using rule 39 (comp_expr -> NOT expression .)
    NUMBER          reduce using rule 39 (comp_expr -> NOT expression .)
    IDENTIFIER      reduce using rule 39 (comp_expr -> NOT expression .)
    TEXT            reduce using rule 39 (comp_expr -> NOT expression .)
    INPUT           reduce using rule 39 (comp_expr -> NOT expression .)
    NOT             reduce using rule 39 (comp_expr -> NOT expression .)
    RANDOM          reduce using rule 39 (comp_expr -> NOT expression .)
    TO              reduce using rule 39 (comp_expr -> NOT expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    POWER           shift and go to state 41
    EQ              shift and go to state 42
    GT              shift and go to state 43
    LT              shift and go to state 44
    GE              shift and go to state 45
    LE              shift and go to state 46
    NE              shift and go to state 47
    IN              shift and go to state 48

  ! PLUS            [ reduce using rule 39 (comp_expr -> NOT expression .) ]
  ! MINUS           [ reduce using rule 39 (comp_expr -> NOT expression .) ]
  ! TIMES           [ reduce using rule 39 (comp_expr -> NOT expression .) ]
  ! DIVIDE          [ reduce using rule 39 (comp_expr -> NOT expression .) ]
  ! POWER           [ reduce using rule 39 (comp_expr -> NOT expression .) ]
  ! EQ              [ reduce using rule 39 (comp_expr -> NOT expression .) ]
  ! GT              [ reduce using rule 39 (comp_expr -> NOT expression .) ]
  ! LT              [ reduce using rule 39 (comp_expr -> NOT expression .) ]
  ! GE              [ reduce using rule 39 (comp_expr -> NOT expression .) ]
  ! LE              [ reduce using rule 39 (comp_expr -> NOT expression .) ]
  ! NE              [ reduce using rule 39 (comp_expr -> NOT expression .) ]
  ! IN              [ reduce using rule 39 (comp_expr -> NOT expression .) ]


state 54

    (7) random_statement -> RANDOM DATATYPE . FROM expression TO expression

    FROM            shift and go to state 80


state 55

    (9) statement -> var_assignment TO expression .
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . TIMES expression
    (26) expression -> expression . DIVIDE expression
    (27) expression -> expression . POWER expression
    (21) items -> expression .
    (31) comp_expr -> expression . EQ expression
    (32) comp_expr -> expression . GT expression
    (33) comp_expr -> expression . LT expression
    (34) comp_expr -> expression . GE expression
    (35) comp_expr -> expression . LE expression
    (36) comp_expr -> expression . NE expression
    (40) comp_expr -> expression . IN expression

    OUTPUT          reduce using rule 9 (statement -> var_assignment TO expression .)
    REPEAT          reduce using rule 9 (statement -> var_assignment TO expression .)
    PAUSE           reduce using rule 9 (statement -> var_assignment TO expression .)
    FUNCTION        reduce using rule 9 (statement -> var_assignment TO expression .)
    WHILE           reduce using rule 9 (statement -> var_assignment TO expression .)
    SET             reduce using rule 9 (statement -> var_assignment TO expression .)
    IF              reduce using rule 9 (statement -> var_assignment TO expression .)
    $end            reduce using rule 9 (statement -> var_assignment TO expression .)
    UNTIL           reduce using rule 9 (statement -> var_assignment TO expression .)
    END             reduce using rule 9 (statement -> var_assignment TO expression .)
    ELSE            reduce using rule 9 (statement -> var_assignment TO expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    POWER           shift and go to state 41
    TYPE            reduce using rule 21 (items -> expression .)
    LPAREN          reduce using rule 21 (items -> expression .)
    YES             reduce using rule 21 (items -> expression .)
    NO              reduce using rule 21 (items -> expression .)
    NUMBER          reduce using rule 21 (items -> expression .)
    IDENTIFIER      reduce using rule 21 (items -> expression .)
    TEXT            reduce using rule 21 (items -> expression .)
    INPUT           reduce using rule 21 (items -> expression .)
    NOT             reduce using rule 21 (items -> expression .)
    RANDOM          reduce using rule 21 (items -> expression .)
    EQ              shift and go to state 42
    GT              shift and go to state 43
    LT              shift and go to state 44
    GE              shift and go to state 45
    LE              shift and go to state 46
    NE              shift and go to state 47
    IN              shift and go to state 48


state 56

    (11) statement -> var_assignment TO ask .

    OUTPUT          reduce using rule 11 (statement -> var_assignment TO ask .)
    REPEAT          reduce using rule 11 (statement -> var_assignment TO ask .)
    PAUSE           reduce using rule 11 (statement -> var_assignment TO ask .)
    FUNCTION        reduce using rule 11 (statement -> var_assignment TO ask .)
    WHILE           reduce using rule 11 (statement -> var_assignment TO ask .)
    SET             reduce using rule 11 (statement -> var_assignment TO ask .)
    IF              reduce using rule 11 (statement -> var_assignment TO ask .)
    $end            reduce using rule 11 (statement -> var_assignment TO ask .)
    UNTIL           reduce using rule 11 (statement -> var_assignment TO ask .)
    END             reduce using rule 11 (statement -> var_assignment TO ask .)
    ELSE            reduce using rule 11 (statement -> var_assignment TO ask .)


state 57

    (12) statement -> var_assignment TO items . type_stmt
    (22) items -> items . expression
    (18) type_stmt -> . TYPE DATATYPE
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . expression POWER expression
    (28) expression -> . LPAREN expression RPAREN
    (29) expression -> . YES
    (30) expression -> . NO
    (41) expression -> . comp_expr
    (42) expression -> . NUMBER
    (43) expression -> . IDENTIFIER
    (44) expression -> . random_statement
    (45) expression -> . TEXT
    (46) expression -> . INPUT
    (31) comp_expr -> . expression EQ expression
    (32) comp_expr -> . expression GT expression
    (33) comp_expr -> . expression LT expression
    (34) comp_expr -> . expression GE expression
    (35) comp_expr -> . expression LE expression
    (36) comp_expr -> . expression NE expression
    (37) comp_expr -> . comp_expr AND comp_expr
    (38) comp_expr -> . comp_expr OR comp_expr
    (39) comp_expr -> . NOT expression
    (40) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    TYPE            shift and go to state 83
    LPAREN          shift and go to state 15
    YES             shift and go to state 16
    NO              shift and go to state 17
    NUMBER          shift and go to state 19
    IDENTIFIER      shift and go to state 20
    TEXT            shift and go to state 32
    INPUT           shift and go to state 23
    NOT             shift and go to state 24
    RANDOM          shift and go to state 25

    type_stmt                      shift and go to state 81
    expression                     shift and go to state 82
    comp_expr                      shift and go to state 18
    random_statement               shift and go to state 21

state 58

    (15) statement -> if_then ELSE THEN . statements end_statement
    (1) statements -> . statement
    (2) statements -> . statements statement
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . WHILE expression DO statements end_statement
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    SET             shift and go to state 10
    IF              shift and go to state 11

    if_then                        shift and go to state 5
    statements                     shift and go to state 84
    statement                      shift and go to state 2
    var_assignment                 shift and go to state 4

state 59

    (16) statement -> REPEAT statements UNTIL . expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . expression POWER expression
    (28) expression -> . LPAREN expression RPAREN
    (29) expression -> . YES
    (30) expression -> . NO
    (41) expression -> . comp_expr
    (42) expression -> . NUMBER
    (43) expression -> . IDENTIFIER
    (44) expression -> . random_statement
    (45) expression -> . TEXT
    (46) expression -> . INPUT
    (31) comp_expr -> . expression EQ expression
    (32) comp_expr -> . expression GT expression
    (33) comp_expr -> . expression LT expression
    (34) comp_expr -> . expression GE expression
    (35) comp_expr -> . expression LE expression
    (36) comp_expr -> . expression NE expression
    (37) comp_expr -> . comp_expr AND comp_expr
    (38) comp_expr -> . comp_expr OR comp_expr
    (39) comp_expr -> . NOT expression
    (40) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 15
    YES             shift and go to state 16
    NO              shift and go to state 17
    NUMBER          shift and go to state 19
    IDENTIFIER      shift and go to state 20
    TEXT            shift and go to state 32
    INPUT           shift and go to state 23
    NOT             shift and go to state 24
    RANDOM          shift and go to state 25

    expression                     shift and go to state 85
    comp_expr                      shift and go to state 18
    random_statement               shift and go to state 21

state 60

    (19) statement -> FUNCTION IDENTIFIER MEANS . statements end_statement
    (1) statements -> . statement
    (2) statements -> . statements statement
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . WHILE expression DO statements end_statement
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    SET             shift and go to state 10
    IF              shift and go to state 11

    statements                     shift and go to state 86
    statement                      shift and go to state 2
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 61

    (20) statement -> WHILE expression DO . statements end_statement
    (1) statements -> . statement
    (2) statements -> . statements statement
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . WHILE expression DO statements end_statement
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    SET             shift and go to state 10
    IF              shift and go to state 11

    statements                     shift and go to state 87
    statement                      shift and go to state 2
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 62

    (13) if_then -> IF expression THEN . statements
    (1) statements -> . statement
    (2) statements -> . statements statement
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . WHILE expression DO statements end_statement
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    SET             shift and go to state 10
    IF              shift and go to state 11

    statements                     shift and go to state 88
    statement                      shift and go to state 2
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 63

    (23) expression -> expression PLUS expression .
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . TIMES expression
    (26) expression -> expression . DIVIDE expression
    (27) expression -> expression . POWER expression
    (31) comp_expr -> expression . EQ expression
    (32) comp_expr -> expression . GT expression
    (33) comp_expr -> expression . LT expression
    (34) comp_expr -> expression . GE expression
    (35) comp_expr -> expression . LE expression
    (36) comp_expr -> expression . NE expression
    (40) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    OUTPUT          reduce using rule 23 (expression -> expression PLUS expression .)
    REPEAT          reduce using rule 23 (expression -> expression PLUS expression .)
    PAUSE           reduce using rule 23 (expression -> expression PLUS expression .)
    FUNCTION        reduce using rule 23 (expression -> expression PLUS expression .)
    WHILE           reduce using rule 23 (expression -> expression PLUS expression .)
    SET             reduce using rule 23 (expression -> expression PLUS expression .)
    IF              reduce using rule 23 (expression -> expression PLUS expression .)
    $end            reduce using rule 23 (expression -> expression PLUS expression .)
    UNTIL           reduce using rule 23 (expression -> expression PLUS expression .)
    END             reduce using rule 23 (expression -> expression PLUS expression .)
    ELSE            reduce using rule 23 (expression -> expression PLUS expression .)
    DO              reduce using rule 23 (expression -> expression PLUS expression .)
    THEN            reduce using rule 23 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 23 (expression -> expression PLUS expression .)
    AND             reduce using rule 23 (expression -> expression PLUS expression .)
    OR              reduce using rule 23 (expression -> expression PLUS expression .)
    TYPE            reduce using rule 23 (expression -> expression PLUS expression .)
    LPAREN          reduce using rule 23 (expression -> expression PLUS expression .)
    YES             reduce using rule 23 (expression -> expression PLUS expression .)
    NO              reduce using rule 23 (expression -> expression PLUS expression .)
    NUMBER          reduce using rule 23 (expression -> expression PLUS expression .)
    IDENTIFIER      reduce using rule 23 (expression -> expression PLUS expression .)
    TEXT            reduce using rule 23 (expression -> expression PLUS expression .)
    INPUT           reduce using rule 23 (expression -> expression PLUS expression .)
    NOT             reduce using rule 23 (expression -> expression PLUS expression .)
    RANDOM          reduce using rule 23 (expression -> expression PLUS expression .)
    TO              reduce using rule 23 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    POWER           shift and go to state 41
    EQ              shift and go to state 42
    GT              shift and go to state 43
    LT              shift and go to state 44
    GE              shift and go to state 45
    LE              shift and go to state 46
    NE              shift and go to state 47
    IN              shift and go to state 48

  ! PLUS            [ reduce using rule 23 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 23 (expression -> expression PLUS expression .) ]
  ! TIMES           [ reduce using rule 23 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 23 (expression -> expression PLUS expression .) ]
  ! POWER           [ reduce using rule 23 (expression -> expression PLUS expression .) ]
  ! EQ              [ reduce using rule 23 (expression -> expression PLUS expression .) ]
  ! GT              [ reduce using rule 23 (expression -> expression PLUS expression .) ]
  ! LT              [ reduce using rule 23 (expression -> expression PLUS expression .) ]
  ! GE              [ reduce using rule 23 (expression -> expression PLUS expression .) ]
  ! LE              [ reduce using rule 23 (expression -> expression PLUS expression .) ]
  ! NE              [ reduce using rule 23 (expression -> expression PLUS expression .) ]
  ! IN              [ reduce using rule 23 (expression -> expression PLUS expression .) ]


state 64

    (24) expression -> expression MINUS expression .
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . TIMES expression
    (26) expression -> expression . DIVIDE expression
    (27) expression -> expression . POWER expression
    (31) comp_expr -> expression . EQ expression
    (32) comp_expr -> expression . GT expression
    (33) comp_expr -> expression . LT expression
    (34) comp_expr -> expression . GE expression
    (35) comp_expr -> expression . LE expression
    (36) comp_expr -> expression . NE expression
    (40) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    OUTPUT          reduce using rule 24 (expression -> expression MINUS expression .)
    REPEAT          reduce using rule 24 (expression -> expression MINUS expression .)
    PAUSE           reduce using rule 24 (expression -> expression MINUS expression .)
    FUNCTION        reduce using rule 24 (expression -> expression MINUS expression .)
    WHILE           reduce using rule 24 (expression -> expression MINUS expression .)
    SET             reduce using rule 24 (expression -> expression MINUS expression .)
    IF              reduce using rule 24 (expression -> expression MINUS expression .)
    $end            reduce using rule 24 (expression -> expression MINUS expression .)
    UNTIL           reduce using rule 24 (expression -> expression MINUS expression .)
    END             reduce using rule 24 (expression -> expression MINUS expression .)
    ELSE            reduce using rule 24 (expression -> expression MINUS expression .)
    DO              reduce using rule 24 (expression -> expression MINUS expression .)
    THEN            reduce using rule 24 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 24 (expression -> expression MINUS expression .)
    AND             reduce using rule 24 (expression -> expression MINUS expression .)
    OR              reduce using rule 24 (expression -> expression MINUS expression .)
    TYPE            reduce using rule 24 (expression -> expression MINUS expression .)
    LPAREN          reduce using rule 24 (expression -> expression MINUS expression .)
    YES             reduce using rule 24 (expression -> expression MINUS expression .)
    NO              reduce using rule 24 (expression -> expression MINUS expression .)
    NUMBER          reduce using rule 24 (expression -> expression MINUS expression .)
    IDENTIFIER      reduce using rule 24 (expression -> expression MINUS expression .)
    TEXT            reduce using rule 24 (expression -> expression MINUS expression .)
    INPUT           reduce using rule 24 (expression -> expression MINUS expression .)
    NOT             reduce using rule 24 (expression -> expression MINUS expression .)
    RANDOM          reduce using rule 24 (expression -> expression MINUS expression .)
    TO              reduce using rule 24 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    POWER           shift and go to state 41
    EQ              shift and go to state 42
    GT              shift and go to state 43
    LT              shift and go to state 44
    GE              shift and go to state 45
    LE              shift and go to state 46
    NE              shift and go to state 47
    IN              shift and go to state 48

  ! PLUS            [ reduce using rule 24 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 24 (expression -> expression MINUS expression .) ]
  ! TIMES           [ reduce using rule 24 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 24 (expression -> expression MINUS expression .) ]
  ! POWER           [ reduce using rule 24 (expression -> expression MINUS expression .) ]
  ! EQ              [ reduce using rule 24 (expression -> expression MINUS expression .) ]
  ! GT              [ reduce using rule 24 (expression -> expression MINUS expression .) ]
  ! LT              [ reduce using rule 24 (expression -> expression MINUS expression .) ]
  ! GE              [ reduce using rule 24 (expression -> expression MINUS expression .) ]
  ! LE              [ reduce using rule 24 (expression -> expression MINUS expression .) ]
  ! NE              [ reduce using rule 24 (expression -> expression MINUS expression .) ]
  ! IN              [ reduce using rule 24 (expression -> expression MINUS expression .) ]


state 65

    (25) expression -> expression TIMES expression .
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . TIMES expression
    (26) expression -> expression . DIVIDE expression
    (27) expression -> expression . POWER expression
    (31) comp_expr -> expression . EQ expression
    (32) comp_expr -> expression . GT expression
    (33) comp_expr -> expression . LT expression
    (34) comp_expr -> expression . GE expression
    (35) comp_expr -> expression . LE expression
    (36) comp_expr -> expression . NE expression
    (40) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    OUTPUT          reduce using rule 25 (expression -> expression TIMES expression .)
    REPEAT          reduce using rule 25 (expression -> expression TIMES expression .)
    PAUSE           reduce using rule 25 (expression -> expression TIMES expression .)
    FUNCTION        reduce using rule 25 (expression -> expression TIMES expression .)
    WHILE           reduce using rule 25 (expression -> expression TIMES expression .)
    SET             reduce using rule 25 (expression -> expression TIMES expression .)
    IF              reduce using rule 25 (expression -> expression TIMES expression .)
    $end            reduce using rule 25 (expression -> expression TIMES expression .)
    UNTIL           reduce using rule 25 (expression -> expression TIMES expression .)
    END             reduce using rule 25 (expression -> expression TIMES expression .)
    ELSE            reduce using rule 25 (expression -> expression TIMES expression .)
    DO              reduce using rule 25 (expression -> expression TIMES expression .)
    THEN            reduce using rule 25 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 25 (expression -> expression TIMES expression .)
    AND             reduce using rule 25 (expression -> expression TIMES expression .)
    OR              reduce using rule 25 (expression -> expression TIMES expression .)
    TYPE            reduce using rule 25 (expression -> expression TIMES expression .)
    LPAREN          reduce using rule 25 (expression -> expression TIMES expression .)
    YES             reduce using rule 25 (expression -> expression TIMES expression .)
    NO              reduce using rule 25 (expression -> expression TIMES expression .)
    NUMBER          reduce using rule 25 (expression -> expression TIMES expression .)
    IDENTIFIER      reduce using rule 25 (expression -> expression TIMES expression .)
    TEXT            reduce using rule 25 (expression -> expression TIMES expression .)
    INPUT           reduce using rule 25 (expression -> expression TIMES expression .)
    NOT             reduce using rule 25 (expression -> expression TIMES expression .)
    RANDOM          reduce using rule 25 (expression -> expression TIMES expression .)
    TO              reduce using rule 25 (expression -> expression TIMES expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    POWER           shift and go to state 41
    EQ              shift and go to state 42
    GT              shift and go to state 43
    LT              shift and go to state 44
    GE              shift and go to state 45
    LE              shift and go to state 46
    NE              shift and go to state 47
    IN              shift and go to state 48

  ! PLUS            [ reduce using rule 25 (expression -> expression TIMES expression .) ]
  ! MINUS           [ reduce using rule 25 (expression -> expression TIMES expression .) ]
  ! TIMES           [ reduce using rule 25 (expression -> expression TIMES expression .) ]
  ! DIVIDE          [ reduce using rule 25 (expression -> expression TIMES expression .) ]
  ! POWER           [ reduce using rule 25 (expression -> expression TIMES expression .) ]
  ! EQ              [ reduce using rule 25 (expression -> expression TIMES expression .) ]
  ! GT              [ reduce using rule 25 (expression -> expression TIMES expression .) ]
  ! LT              [ reduce using rule 25 (expression -> expression TIMES expression .) ]
  ! GE              [ reduce using rule 25 (expression -> expression TIMES expression .) ]
  ! LE              [ reduce using rule 25 (expression -> expression TIMES expression .) ]
  ! NE              [ reduce using rule 25 (expression -> expression TIMES expression .) ]
  ! IN              [ reduce using rule 25 (expression -> expression TIMES expression .) ]


state 66

    (26) expression -> expression DIVIDE expression .
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . TIMES expression
    (26) expression -> expression . DIVIDE expression
    (27) expression -> expression . POWER expression
    (31) comp_expr -> expression . EQ expression
    (32) comp_expr -> expression . GT expression
    (33) comp_expr -> expression . LT expression
    (34) comp_expr -> expression . GE expression
    (35) comp_expr -> expression . LE expression
    (36) comp_expr -> expression . NE expression
    (40) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    OUTPUT          reduce using rule 26 (expression -> expression DIVIDE expression .)
    REPEAT          reduce using rule 26 (expression -> expression DIVIDE expression .)
    PAUSE           reduce using rule 26 (expression -> expression DIVIDE expression .)
    FUNCTION        reduce using rule 26 (expression -> expression DIVIDE expression .)
    WHILE           reduce using rule 26 (expression -> expression DIVIDE expression .)
    SET             reduce using rule 26 (expression -> expression DIVIDE expression .)
    IF              reduce using rule 26 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 26 (expression -> expression DIVIDE expression .)
    UNTIL           reduce using rule 26 (expression -> expression DIVIDE expression .)
    END             reduce using rule 26 (expression -> expression DIVIDE expression .)
    ELSE            reduce using rule 26 (expression -> expression DIVIDE expression .)
    DO              reduce using rule 26 (expression -> expression DIVIDE expression .)
    THEN            reduce using rule 26 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 26 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 26 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 26 (expression -> expression DIVIDE expression .)
    TYPE            reduce using rule 26 (expression -> expression DIVIDE expression .)
    LPAREN          reduce using rule 26 (expression -> expression DIVIDE expression .)
    YES             reduce using rule 26 (expression -> expression DIVIDE expression .)
    NO              reduce using rule 26 (expression -> expression DIVIDE expression .)
    NUMBER          reduce using rule 26 (expression -> expression DIVIDE expression .)
    IDENTIFIER      reduce using rule 26 (expression -> expression DIVIDE expression .)
    TEXT            reduce using rule 26 (expression -> expression DIVIDE expression .)
    INPUT           reduce using rule 26 (expression -> expression DIVIDE expression .)
    NOT             reduce using rule 26 (expression -> expression DIVIDE expression .)
    RANDOM          reduce using rule 26 (expression -> expression DIVIDE expression .)
    TO              reduce using rule 26 (expression -> expression DIVIDE expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    POWER           shift and go to state 41
    EQ              shift and go to state 42
    GT              shift and go to state 43
    LT              shift and go to state 44
    GE              shift and go to state 45
    LE              shift and go to state 46
    NE              shift and go to state 47
    IN              shift and go to state 48

  ! PLUS            [ reduce using rule 26 (expression -> expression DIVIDE expression .) ]
  ! MINUS           [ reduce using rule 26 (expression -> expression DIVIDE expression .) ]
  ! TIMES           [ reduce using rule 26 (expression -> expression DIVIDE expression .) ]
  ! DIVIDE          [ reduce using rule 26 (expression -> expression DIVIDE expression .) ]
  ! POWER           [ reduce using rule 26 (expression -> expression DIVIDE expression .) ]
  ! EQ              [ reduce using rule 26 (expression -> expression DIVIDE expression .) ]
  ! GT              [ reduce using rule 26 (expression -> expression DIVIDE expression .) ]
  ! LT              [ reduce using rule 26 (expression -> expression DIVIDE expression .) ]
  ! GE              [ reduce using rule 26 (expression -> expression DIVIDE expression .) ]
  ! LE              [ reduce using rule 26 (expression -> expression DIVIDE expression .) ]
  ! NE              [ reduce using rule 26 (expression -> expression DIVIDE expression .) ]
  ! IN              [ reduce using rule 26 (expression -> expression DIVIDE expression .) ]


state 67

    (27) expression -> expression POWER expression .
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . TIMES expression
    (26) expression -> expression . DIVIDE expression
    (27) expression -> expression . POWER expression
    (31) comp_expr -> expression . EQ expression
    (32) comp_expr -> expression . GT expression
    (33) comp_expr -> expression . LT expression
    (34) comp_expr -> expression . GE expression
    (35) comp_expr -> expression . LE expression
    (36) comp_expr -> expression . NE expression
    (40) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    OUTPUT          reduce using rule 27 (expression -> expression POWER expression .)
    REPEAT          reduce using rule 27 (expression -> expression POWER expression .)
    PAUSE           reduce using rule 27 (expression -> expression POWER expression .)
    FUNCTION        reduce using rule 27 (expression -> expression POWER expression .)
    WHILE           reduce using rule 27 (expression -> expression POWER expression .)
    SET             reduce using rule 27 (expression -> expression POWER expression .)
    IF              reduce using rule 27 (expression -> expression POWER expression .)
    $end            reduce using rule 27 (expression -> expression POWER expression .)
    UNTIL           reduce using rule 27 (expression -> expression POWER expression .)
    END             reduce using rule 27 (expression -> expression POWER expression .)
    ELSE            reduce using rule 27 (expression -> expression POWER expression .)
    DO              reduce using rule 27 (expression -> expression POWER expression .)
    THEN            reduce using rule 27 (expression -> expression POWER expression .)
    RPAREN          reduce using rule 27 (expression -> expression POWER expression .)
    AND             reduce using rule 27 (expression -> expression POWER expression .)
    OR              reduce using rule 27 (expression -> expression POWER expression .)
    TYPE            reduce using rule 27 (expression -> expression POWER expression .)
    LPAREN          reduce using rule 27 (expression -> expression POWER expression .)
    YES             reduce using rule 27 (expression -> expression POWER expression .)
    NO              reduce using rule 27 (expression -> expression POWER expression .)
    NUMBER          reduce using rule 27 (expression -> expression POWER expression .)
    IDENTIFIER      reduce using rule 27 (expression -> expression POWER expression .)
    TEXT            reduce using rule 27 (expression -> expression POWER expression .)
    INPUT           reduce using rule 27 (expression -> expression POWER expression .)
    NOT             reduce using rule 27 (expression -> expression POWER expression .)
    RANDOM          reduce using rule 27 (expression -> expression POWER expression .)
    TO              reduce using rule 27 (expression -> expression POWER expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    POWER           shift and go to state 41
    EQ              shift and go to state 42
    GT              shift and go to state 43
    LT              shift and go to state 44
    GE              shift and go to state 45
    LE              shift and go to state 46
    NE              shift and go to state 47
    IN              shift and go to state 48

  ! PLUS            [ reduce using rule 27 (expression -> expression POWER expression .) ]
  ! MINUS           [ reduce using rule 27 (expression -> expression POWER expression .) ]
  ! TIMES           [ reduce using rule 27 (expression -> expression POWER expression .) ]
  ! DIVIDE          [ reduce using rule 27 (expression -> expression POWER expression .) ]
  ! POWER           [ reduce using rule 27 (expression -> expression POWER expression .) ]
  ! EQ              [ reduce using rule 27 (expression -> expression POWER expression .) ]
  ! GT              [ reduce using rule 27 (expression -> expression POWER expression .) ]
  ! LT              [ reduce using rule 27 (expression -> expression POWER expression .) ]
  ! GE              [ reduce using rule 27 (expression -> expression POWER expression .) ]
  ! LE              [ reduce using rule 27 (expression -> expression POWER expression .) ]
  ! NE              [ reduce using rule 27 (expression -> expression POWER expression .) ]
  ! IN              [ reduce using rule 27 (expression -> expression POWER expression .) ]


state 68

    (31) comp_expr -> expression EQ expression .
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . TIMES expression
    (26) expression -> expression . DIVIDE expression
    (27) expression -> expression . POWER expression
    (31) comp_expr -> expression . EQ expression
    (32) comp_expr -> expression . GT expression
    (33) comp_expr -> expression . LT expression
    (34) comp_expr -> expression . GE expression
    (35) comp_expr -> expression . LE expression
    (36) comp_expr -> expression . NE expression
    (40) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    AND             reduce using rule 31 (comp_expr -> expression EQ expression .)
    OR              reduce using rule 31 (comp_expr -> expression EQ expression .)
    OUTPUT          reduce using rule 31 (comp_expr -> expression EQ expression .)
    REPEAT          reduce using rule 31 (comp_expr -> expression EQ expression .)
    PAUSE           reduce using rule 31 (comp_expr -> expression EQ expression .)
    FUNCTION        reduce using rule 31 (comp_expr -> expression EQ expression .)
    WHILE           reduce using rule 31 (comp_expr -> expression EQ expression .)
    SET             reduce using rule 31 (comp_expr -> expression EQ expression .)
    IF              reduce using rule 31 (comp_expr -> expression EQ expression .)
    $end            reduce using rule 31 (comp_expr -> expression EQ expression .)
    UNTIL           reduce using rule 31 (comp_expr -> expression EQ expression .)
    END             reduce using rule 31 (comp_expr -> expression EQ expression .)
    ELSE            reduce using rule 31 (comp_expr -> expression EQ expression .)
    DO              reduce using rule 31 (comp_expr -> expression EQ expression .)
    THEN            reduce using rule 31 (comp_expr -> expression EQ expression .)
    RPAREN          reduce using rule 31 (comp_expr -> expression EQ expression .)
    TYPE            reduce using rule 31 (comp_expr -> expression EQ expression .)
    LPAREN          reduce using rule 31 (comp_expr -> expression EQ expression .)
    YES             reduce using rule 31 (comp_expr -> expression EQ expression .)
    NO              reduce using rule 31 (comp_expr -> expression EQ expression .)
    NUMBER          reduce using rule 31 (comp_expr -> expression EQ expression .)
    IDENTIFIER      reduce using rule 31 (comp_expr -> expression EQ expression .)
    TEXT            reduce using rule 31 (comp_expr -> expression EQ expression .)
    INPUT           reduce using rule 31 (comp_expr -> expression EQ expression .)
    NOT             reduce using rule 31 (comp_expr -> expression EQ expression .)
    RANDOM          reduce using rule 31 (comp_expr -> expression EQ expression .)
    TO              reduce using rule 31 (comp_expr -> expression EQ expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    POWER           shift and go to state 41
    EQ              shift and go to state 42
    GT              shift and go to state 43
    LT              shift and go to state 44
    GE              shift and go to state 45
    LE              shift and go to state 46
    NE              shift and go to state 47
    IN              shift and go to state 48

  ! PLUS            [ reduce using rule 31 (comp_expr -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 31 (comp_expr -> expression EQ expression .) ]
  ! TIMES           [ reduce using rule 31 (comp_expr -> expression EQ expression .) ]
  ! DIVIDE          [ reduce using rule 31 (comp_expr -> expression EQ expression .) ]
  ! POWER           [ reduce using rule 31 (comp_expr -> expression EQ expression .) ]
  ! EQ              [ reduce using rule 31 (comp_expr -> expression EQ expression .) ]
  ! GT              [ reduce using rule 31 (comp_expr -> expression EQ expression .) ]
  ! LT              [ reduce using rule 31 (comp_expr -> expression EQ expression .) ]
  ! GE              [ reduce using rule 31 (comp_expr -> expression EQ expression .) ]
  ! LE              [ reduce using rule 31 (comp_expr -> expression EQ expression .) ]
  ! NE              [ reduce using rule 31 (comp_expr -> expression EQ expression .) ]
  ! IN              [ reduce using rule 31 (comp_expr -> expression EQ expression .) ]


state 69

    (32) comp_expr -> expression GT expression .
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . TIMES expression
    (26) expression -> expression . DIVIDE expression
    (27) expression -> expression . POWER expression
    (31) comp_expr -> expression . EQ expression
    (32) comp_expr -> expression . GT expression
    (33) comp_expr -> expression . LT expression
    (34) comp_expr -> expression . GE expression
    (35) comp_expr -> expression . LE expression
    (36) comp_expr -> expression . NE expression
    (40) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    AND             reduce using rule 32 (comp_expr -> expression GT expression .)
    OR              reduce using rule 32 (comp_expr -> expression GT expression .)
    OUTPUT          reduce using rule 32 (comp_expr -> expression GT expression .)
    REPEAT          reduce using rule 32 (comp_expr -> expression GT expression .)
    PAUSE           reduce using rule 32 (comp_expr -> expression GT expression .)
    FUNCTION        reduce using rule 32 (comp_expr -> expression GT expression .)
    WHILE           reduce using rule 32 (comp_expr -> expression GT expression .)
    SET             reduce using rule 32 (comp_expr -> expression GT expression .)
    IF              reduce using rule 32 (comp_expr -> expression GT expression .)
    $end            reduce using rule 32 (comp_expr -> expression GT expression .)
    UNTIL           reduce using rule 32 (comp_expr -> expression GT expression .)
    END             reduce using rule 32 (comp_expr -> expression GT expression .)
    ELSE            reduce using rule 32 (comp_expr -> expression GT expression .)
    DO              reduce using rule 32 (comp_expr -> expression GT expression .)
    THEN            reduce using rule 32 (comp_expr -> expression GT expression .)
    RPAREN          reduce using rule 32 (comp_expr -> expression GT expression .)
    TYPE            reduce using rule 32 (comp_expr -> expression GT expression .)
    LPAREN          reduce using rule 32 (comp_expr -> expression GT expression .)
    YES             reduce using rule 32 (comp_expr -> expression GT expression .)
    NO              reduce using rule 32 (comp_expr -> expression GT expression .)
    NUMBER          reduce using rule 32 (comp_expr -> expression GT expression .)
    IDENTIFIER      reduce using rule 32 (comp_expr -> expression GT expression .)
    TEXT            reduce using rule 32 (comp_expr -> expression GT expression .)
    INPUT           reduce using rule 32 (comp_expr -> expression GT expression .)
    NOT             reduce using rule 32 (comp_expr -> expression GT expression .)
    RANDOM          reduce using rule 32 (comp_expr -> expression GT expression .)
    TO              reduce using rule 32 (comp_expr -> expression GT expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    POWER           shift and go to state 41
    EQ              shift and go to state 42
    GT              shift and go to state 43
    LT              shift and go to state 44
    GE              shift and go to state 45
    LE              shift and go to state 46
    NE              shift and go to state 47
    IN              shift and go to state 48

  ! PLUS            [ reduce using rule 32 (comp_expr -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 32 (comp_expr -> expression GT expression .) ]
  ! TIMES           [ reduce using rule 32 (comp_expr -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 32 (comp_expr -> expression GT expression .) ]
  ! POWER           [ reduce using rule 32 (comp_expr -> expression GT expression .) ]
  ! EQ              [ reduce using rule 32 (comp_expr -> expression GT expression .) ]
  ! GT              [ reduce using rule 32 (comp_expr -> expression GT expression .) ]
  ! LT              [ reduce using rule 32 (comp_expr -> expression GT expression .) ]
  ! GE              [ reduce using rule 32 (comp_expr -> expression GT expression .) ]
  ! LE              [ reduce using rule 32 (comp_expr -> expression GT expression .) ]
  ! NE              [ reduce using rule 32 (comp_expr -> expression GT expression .) ]
  ! IN              [ reduce using rule 32 (comp_expr -> expression GT expression .) ]


state 70

    (33) comp_expr -> expression LT expression .
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . TIMES expression
    (26) expression -> expression . DIVIDE expression
    (27) expression -> expression . POWER expression
    (31) comp_expr -> expression . EQ expression
    (32) comp_expr -> expression . GT expression
    (33) comp_expr -> expression . LT expression
    (34) comp_expr -> expression . GE expression
    (35) comp_expr -> expression . LE expression
    (36) comp_expr -> expression . NE expression
    (40) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    AND             reduce using rule 33 (comp_expr -> expression LT expression .)
    OR              reduce using rule 33 (comp_expr -> expression LT expression .)
    OUTPUT          reduce using rule 33 (comp_expr -> expression LT expression .)
    REPEAT          reduce using rule 33 (comp_expr -> expression LT expression .)
    PAUSE           reduce using rule 33 (comp_expr -> expression LT expression .)
    FUNCTION        reduce using rule 33 (comp_expr -> expression LT expression .)
    WHILE           reduce using rule 33 (comp_expr -> expression LT expression .)
    SET             reduce using rule 33 (comp_expr -> expression LT expression .)
    IF              reduce using rule 33 (comp_expr -> expression LT expression .)
    $end            reduce using rule 33 (comp_expr -> expression LT expression .)
    UNTIL           reduce using rule 33 (comp_expr -> expression LT expression .)
    END             reduce using rule 33 (comp_expr -> expression LT expression .)
    ELSE            reduce using rule 33 (comp_expr -> expression LT expression .)
    DO              reduce using rule 33 (comp_expr -> expression LT expression .)
    THEN            reduce using rule 33 (comp_expr -> expression LT expression .)
    RPAREN          reduce using rule 33 (comp_expr -> expression LT expression .)
    TYPE            reduce using rule 33 (comp_expr -> expression LT expression .)
    LPAREN          reduce using rule 33 (comp_expr -> expression LT expression .)
    YES             reduce using rule 33 (comp_expr -> expression LT expression .)
    NO              reduce using rule 33 (comp_expr -> expression LT expression .)
    NUMBER          reduce using rule 33 (comp_expr -> expression LT expression .)
    IDENTIFIER      reduce using rule 33 (comp_expr -> expression LT expression .)
    TEXT            reduce using rule 33 (comp_expr -> expression LT expression .)
    INPUT           reduce using rule 33 (comp_expr -> expression LT expression .)
    NOT             reduce using rule 33 (comp_expr -> expression LT expression .)
    RANDOM          reduce using rule 33 (comp_expr -> expression LT expression .)
    TO              reduce using rule 33 (comp_expr -> expression LT expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    POWER           shift and go to state 41
    EQ              shift and go to state 42
    GT              shift and go to state 43
    LT              shift and go to state 44
    GE              shift and go to state 45
    LE              shift and go to state 46
    NE              shift and go to state 47
    IN              shift and go to state 48

  ! PLUS            [ reduce using rule 33 (comp_expr -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 33 (comp_expr -> expression LT expression .) ]
  ! TIMES           [ reduce using rule 33 (comp_expr -> expression LT expression .) ]
  ! DIVIDE          [ reduce using rule 33 (comp_expr -> expression LT expression .) ]
  ! POWER           [ reduce using rule 33 (comp_expr -> expression LT expression .) ]
  ! EQ              [ reduce using rule 33 (comp_expr -> expression LT expression .) ]
  ! GT              [ reduce using rule 33 (comp_expr -> expression LT expression .) ]
  ! LT              [ reduce using rule 33 (comp_expr -> expression LT expression .) ]
  ! GE              [ reduce using rule 33 (comp_expr -> expression LT expression .) ]
  ! LE              [ reduce using rule 33 (comp_expr -> expression LT expression .) ]
  ! NE              [ reduce using rule 33 (comp_expr -> expression LT expression .) ]
  ! IN              [ reduce using rule 33 (comp_expr -> expression LT expression .) ]


state 71

    (34) comp_expr -> expression GE expression .
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . TIMES expression
    (26) expression -> expression . DIVIDE expression
    (27) expression -> expression . POWER expression
    (31) comp_expr -> expression . EQ expression
    (32) comp_expr -> expression . GT expression
    (33) comp_expr -> expression . LT expression
    (34) comp_expr -> expression . GE expression
    (35) comp_expr -> expression . LE expression
    (36) comp_expr -> expression . NE expression
    (40) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    AND             reduce using rule 34 (comp_expr -> expression GE expression .)
    OR              reduce using rule 34 (comp_expr -> expression GE expression .)
    OUTPUT          reduce using rule 34 (comp_expr -> expression GE expression .)
    REPEAT          reduce using rule 34 (comp_expr -> expression GE expression .)
    PAUSE           reduce using rule 34 (comp_expr -> expression GE expression .)
    FUNCTION        reduce using rule 34 (comp_expr -> expression GE expression .)
    WHILE           reduce using rule 34 (comp_expr -> expression GE expression .)
    SET             reduce using rule 34 (comp_expr -> expression GE expression .)
    IF              reduce using rule 34 (comp_expr -> expression GE expression .)
    $end            reduce using rule 34 (comp_expr -> expression GE expression .)
    UNTIL           reduce using rule 34 (comp_expr -> expression GE expression .)
    END             reduce using rule 34 (comp_expr -> expression GE expression .)
    ELSE            reduce using rule 34 (comp_expr -> expression GE expression .)
    DO              reduce using rule 34 (comp_expr -> expression GE expression .)
    THEN            reduce using rule 34 (comp_expr -> expression GE expression .)
    RPAREN          reduce using rule 34 (comp_expr -> expression GE expression .)
    TYPE            reduce using rule 34 (comp_expr -> expression GE expression .)
    LPAREN          reduce using rule 34 (comp_expr -> expression GE expression .)
    YES             reduce using rule 34 (comp_expr -> expression GE expression .)
    NO              reduce using rule 34 (comp_expr -> expression GE expression .)
    NUMBER          reduce using rule 34 (comp_expr -> expression GE expression .)
    IDENTIFIER      reduce using rule 34 (comp_expr -> expression GE expression .)
    TEXT            reduce using rule 34 (comp_expr -> expression GE expression .)
    INPUT           reduce using rule 34 (comp_expr -> expression GE expression .)
    NOT             reduce using rule 34 (comp_expr -> expression GE expression .)
    RANDOM          reduce using rule 34 (comp_expr -> expression GE expression .)
    TO              reduce using rule 34 (comp_expr -> expression GE expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    POWER           shift and go to state 41
    EQ              shift and go to state 42
    GT              shift and go to state 43
    LT              shift and go to state 44
    GE              shift and go to state 45
    LE              shift and go to state 46
    NE              shift and go to state 47
    IN              shift and go to state 48

  ! PLUS            [ reduce using rule 34 (comp_expr -> expression GE expression .) ]
  ! MINUS           [ reduce using rule 34 (comp_expr -> expression GE expression .) ]
  ! TIMES           [ reduce using rule 34 (comp_expr -> expression GE expression .) ]
  ! DIVIDE          [ reduce using rule 34 (comp_expr -> expression GE expression .) ]
  ! POWER           [ reduce using rule 34 (comp_expr -> expression GE expression .) ]
  ! EQ              [ reduce using rule 34 (comp_expr -> expression GE expression .) ]
  ! GT              [ reduce using rule 34 (comp_expr -> expression GE expression .) ]
  ! LT              [ reduce using rule 34 (comp_expr -> expression GE expression .) ]
  ! GE              [ reduce using rule 34 (comp_expr -> expression GE expression .) ]
  ! LE              [ reduce using rule 34 (comp_expr -> expression GE expression .) ]
  ! NE              [ reduce using rule 34 (comp_expr -> expression GE expression .) ]
  ! IN              [ reduce using rule 34 (comp_expr -> expression GE expression .) ]


state 72

    (35) comp_expr -> expression LE expression .
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . TIMES expression
    (26) expression -> expression . DIVIDE expression
    (27) expression -> expression . POWER expression
    (31) comp_expr -> expression . EQ expression
    (32) comp_expr -> expression . GT expression
    (33) comp_expr -> expression . LT expression
    (34) comp_expr -> expression . GE expression
    (35) comp_expr -> expression . LE expression
    (36) comp_expr -> expression . NE expression
    (40) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    AND             reduce using rule 35 (comp_expr -> expression LE expression .)
    OR              reduce using rule 35 (comp_expr -> expression LE expression .)
    OUTPUT          reduce using rule 35 (comp_expr -> expression LE expression .)
    REPEAT          reduce using rule 35 (comp_expr -> expression LE expression .)
    PAUSE           reduce using rule 35 (comp_expr -> expression LE expression .)
    FUNCTION        reduce using rule 35 (comp_expr -> expression LE expression .)
    WHILE           reduce using rule 35 (comp_expr -> expression LE expression .)
    SET             reduce using rule 35 (comp_expr -> expression LE expression .)
    IF              reduce using rule 35 (comp_expr -> expression LE expression .)
    $end            reduce using rule 35 (comp_expr -> expression LE expression .)
    UNTIL           reduce using rule 35 (comp_expr -> expression LE expression .)
    END             reduce using rule 35 (comp_expr -> expression LE expression .)
    ELSE            reduce using rule 35 (comp_expr -> expression LE expression .)
    DO              reduce using rule 35 (comp_expr -> expression LE expression .)
    THEN            reduce using rule 35 (comp_expr -> expression LE expression .)
    RPAREN          reduce using rule 35 (comp_expr -> expression LE expression .)
    TYPE            reduce using rule 35 (comp_expr -> expression LE expression .)
    LPAREN          reduce using rule 35 (comp_expr -> expression LE expression .)
    YES             reduce using rule 35 (comp_expr -> expression LE expression .)
    NO              reduce using rule 35 (comp_expr -> expression LE expression .)
    NUMBER          reduce using rule 35 (comp_expr -> expression LE expression .)
    IDENTIFIER      reduce using rule 35 (comp_expr -> expression LE expression .)
    TEXT            reduce using rule 35 (comp_expr -> expression LE expression .)
    INPUT           reduce using rule 35 (comp_expr -> expression LE expression .)
    NOT             reduce using rule 35 (comp_expr -> expression LE expression .)
    RANDOM          reduce using rule 35 (comp_expr -> expression LE expression .)
    TO              reduce using rule 35 (comp_expr -> expression LE expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    POWER           shift and go to state 41
    EQ              shift and go to state 42
    GT              shift and go to state 43
    LT              shift and go to state 44
    GE              shift and go to state 45
    LE              shift and go to state 46
    NE              shift and go to state 47
    IN              shift and go to state 48

  ! PLUS            [ reduce using rule 35 (comp_expr -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 35 (comp_expr -> expression LE expression .) ]
  ! TIMES           [ reduce using rule 35 (comp_expr -> expression LE expression .) ]
  ! DIVIDE          [ reduce using rule 35 (comp_expr -> expression LE expression .) ]
  ! POWER           [ reduce using rule 35 (comp_expr -> expression LE expression .) ]
  ! EQ              [ reduce using rule 35 (comp_expr -> expression LE expression .) ]
  ! GT              [ reduce using rule 35 (comp_expr -> expression LE expression .) ]
  ! LT              [ reduce using rule 35 (comp_expr -> expression LE expression .) ]
  ! GE              [ reduce using rule 35 (comp_expr -> expression LE expression .) ]
  ! LE              [ reduce using rule 35 (comp_expr -> expression LE expression .) ]
  ! NE              [ reduce using rule 35 (comp_expr -> expression LE expression .) ]
  ! IN              [ reduce using rule 35 (comp_expr -> expression LE expression .) ]


state 73

    (36) comp_expr -> expression NE expression .
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . TIMES expression
    (26) expression -> expression . DIVIDE expression
    (27) expression -> expression . POWER expression
    (31) comp_expr -> expression . EQ expression
    (32) comp_expr -> expression . GT expression
    (33) comp_expr -> expression . LT expression
    (34) comp_expr -> expression . GE expression
    (35) comp_expr -> expression . LE expression
    (36) comp_expr -> expression . NE expression
    (40) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    AND             reduce using rule 36 (comp_expr -> expression NE expression .)
    OR              reduce using rule 36 (comp_expr -> expression NE expression .)
    OUTPUT          reduce using rule 36 (comp_expr -> expression NE expression .)
    REPEAT          reduce using rule 36 (comp_expr -> expression NE expression .)
    PAUSE           reduce using rule 36 (comp_expr -> expression NE expression .)
    FUNCTION        reduce using rule 36 (comp_expr -> expression NE expression .)
    WHILE           reduce using rule 36 (comp_expr -> expression NE expression .)
    SET             reduce using rule 36 (comp_expr -> expression NE expression .)
    IF              reduce using rule 36 (comp_expr -> expression NE expression .)
    $end            reduce using rule 36 (comp_expr -> expression NE expression .)
    UNTIL           reduce using rule 36 (comp_expr -> expression NE expression .)
    END             reduce using rule 36 (comp_expr -> expression NE expression .)
    ELSE            reduce using rule 36 (comp_expr -> expression NE expression .)
    DO              reduce using rule 36 (comp_expr -> expression NE expression .)
    THEN            reduce using rule 36 (comp_expr -> expression NE expression .)
    RPAREN          reduce using rule 36 (comp_expr -> expression NE expression .)
    TYPE            reduce using rule 36 (comp_expr -> expression NE expression .)
    LPAREN          reduce using rule 36 (comp_expr -> expression NE expression .)
    YES             reduce using rule 36 (comp_expr -> expression NE expression .)
    NO              reduce using rule 36 (comp_expr -> expression NE expression .)
    NUMBER          reduce using rule 36 (comp_expr -> expression NE expression .)
    IDENTIFIER      reduce using rule 36 (comp_expr -> expression NE expression .)
    TEXT            reduce using rule 36 (comp_expr -> expression NE expression .)
    INPUT           reduce using rule 36 (comp_expr -> expression NE expression .)
    NOT             reduce using rule 36 (comp_expr -> expression NE expression .)
    RANDOM          reduce using rule 36 (comp_expr -> expression NE expression .)
    TO              reduce using rule 36 (comp_expr -> expression NE expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    POWER           shift and go to state 41
    EQ              shift and go to state 42
    GT              shift and go to state 43
    LT              shift and go to state 44
    GE              shift and go to state 45
    LE              shift and go to state 46
    NE              shift and go to state 47
    IN              shift and go to state 48

  ! PLUS            [ reduce using rule 36 (comp_expr -> expression NE expression .) ]
  ! MINUS           [ reduce using rule 36 (comp_expr -> expression NE expression .) ]
  ! TIMES           [ reduce using rule 36 (comp_expr -> expression NE expression .) ]
  ! DIVIDE          [ reduce using rule 36 (comp_expr -> expression NE expression .) ]
  ! POWER           [ reduce using rule 36 (comp_expr -> expression NE expression .) ]
  ! EQ              [ reduce using rule 36 (comp_expr -> expression NE expression .) ]
  ! GT              [ reduce using rule 36 (comp_expr -> expression NE expression .) ]
  ! LT              [ reduce using rule 36 (comp_expr -> expression NE expression .) ]
  ! GE              [ reduce using rule 36 (comp_expr -> expression NE expression .) ]
  ! LE              [ reduce using rule 36 (comp_expr -> expression NE expression .) ]
  ! NE              [ reduce using rule 36 (comp_expr -> expression NE expression .) ]
  ! IN              [ reduce using rule 36 (comp_expr -> expression NE expression .) ]


state 74

    (40) comp_expr -> expression IN expression .
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . TIMES expression
    (26) expression -> expression . DIVIDE expression
    (27) expression -> expression . POWER expression
    (31) comp_expr -> expression . EQ expression
    (32) comp_expr -> expression . GT expression
    (33) comp_expr -> expression . LT expression
    (34) comp_expr -> expression . GE expression
    (35) comp_expr -> expression . LE expression
    (36) comp_expr -> expression . NE expression
    (40) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    AND             reduce using rule 40 (comp_expr -> expression IN expression .)
    OR              reduce using rule 40 (comp_expr -> expression IN expression .)
    OUTPUT          reduce using rule 40 (comp_expr -> expression IN expression .)
    REPEAT          reduce using rule 40 (comp_expr -> expression IN expression .)
    PAUSE           reduce using rule 40 (comp_expr -> expression IN expression .)
    FUNCTION        reduce using rule 40 (comp_expr -> expression IN expression .)
    WHILE           reduce using rule 40 (comp_expr -> expression IN expression .)
    SET             reduce using rule 40 (comp_expr -> expression IN expression .)
    IF              reduce using rule 40 (comp_expr -> expression IN expression .)
    $end            reduce using rule 40 (comp_expr -> expression IN expression .)
    UNTIL           reduce using rule 40 (comp_expr -> expression IN expression .)
    END             reduce using rule 40 (comp_expr -> expression IN expression .)
    ELSE            reduce using rule 40 (comp_expr -> expression IN expression .)
    DO              reduce using rule 40 (comp_expr -> expression IN expression .)
    THEN            reduce using rule 40 (comp_expr -> expression IN expression .)
    RPAREN          reduce using rule 40 (comp_expr -> expression IN expression .)
    TYPE            reduce using rule 40 (comp_expr -> expression IN expression .)
    LPAREN          reduce using rule 40 (comp_expr -> expression IN expression .)
    YES             reduce using rule 40 (comp_expr -> expression IN expression .)
    NO              reduce using rule 40 (comp_expr -> expression IN expression .)
    NUMBER          reduce using rule 40 (comp_expr -> expression IN expression .)
    IDENTIFIER      reduce using rule 40 (comp_expr -> expression IN expression .)
    TEXT            reduce using rule 40 (comp_expr -> expression IN expression .)
    INPUT           reduce using rule 40 (comp_expr -> expression IN expression .)
    NOT             reduce using rule 40 (comp_expr -> expression IN expression .)
    RANDOM          reduce using rule 40 (comp_expr -> expression IN expression .)
    TO              reduce using rule 40 (comp_expr -> expression IN expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    POWER           shift and go to state 41
    EQ              shift and go to state 42
    GT              shift and go to state 43
    LT              shift and go to state 44
    GE              shift and go to state 45
    LE              shift and go to state 46
    NE              shift and go to state 47
    IN              shift and go to state 48

  ! PLUS            [ reduce using rule 40 (comp_expr -> expression IN expression .) ]
  ! MINUS           [ reduce using rule 40 (comp_expr -> expression IN expression .) ]
  ! TIMES           [ reduce using rule 40 (comp_expr -> expression IN expression .) ]
  ! DIVIDE          [ reduce using rule 40 (comp_expr -> expression IN expression .) ]
  ! POWER           [ reduce using rule 40 (comp_expr -> expression IN expression .) ]
  ! EQ              [ reduce using rule 40 (comp_expr -> expression IN expression .) ]
  ! GT              [ reduce using rule 40 (comp_expr -> expression IN expression .) ]
  ! LT              [ reduce using rule 40 (comp_expr -> expression IN expression .) ]
  ! GE              [ reduce using rule 40 (comp_expr -> expression IN expression .) ]
  ! LE              [ reduce using rule 40 (comp_expr -> expression IN expression .) ]
  ! NE              [ reduce using rule 40 (comp_expr -> expression IN expression .) ]
  ! IN              [ reduce using rule 40 (comp_expr -> expression IN expression .) ]


state 75

    (28) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 28 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 28 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 28 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 28 (expression -> LPAREN expression RPAREN .)
    POWER           reduce using rule 28 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 28 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 28 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 28 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 28 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 28 (expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 28 (expression -> LPAREN expression RPAREN .)
    IN              reduce using rule 28 (expression -> LPAREN expression RPAREN .)
    OUTPUT          reduce using rule 28 (expression -> LPAREN expression RPAREN .)
    REPEAT          reduce using rule 28 (expression -> LPAREN expression RPAREN .)
    PAUSE           reduce using rule 28 (expression -> LPAREN expression RPAREN .)
    FUNCTION        reduce using rule 28 (expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 28 (expression -> LPAREN expression RPAREN .)
    SET             reduce using rule 28 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 28 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 28 (expression -> LPAREN expression RPAREN .)
    UNTIL           reduce using rule 28 (expression -> LPAREN expression RPAREN .)
    END             reduce using rule 28 (expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 28 (expression -> LPAREN expression RPAREN .)
    DO              reduce using rule 28 (expression -> LPAREN expression RPAREN .)
    THEN            reduce using rule 28 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 28 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 28 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 28 (expression -> LPAREN expression RPAREN .)
    TYPE            reduce using rule 28 (expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 28 (expression -> LPAREN expression RPAREN .)
    YES             reduce using rule 28 (expression -> LPAREN expression RPAREN .)
    NO              reduce using rule 28 (expression -> LPAREN expression RPAREN .)
    NUMBER          reduce using rule 28 (expression -> LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 28 (expression -> LPAREN expression RPAREN .)
    TEXT            reduce using rule 28 (expression -> LPAREN expression RPAREN .)
    INPUT           reduce using rule 28 (expression -> LPAREN expression RPAREN .)
    NOT             reduce using rule 28 (expression -> LPAREN expression RPAREN .)
    RANDOM          reduce using rule 28 (expression -> LPAREN expression RPAREN .)
    TO              reduce using rule 28 (expression -> LPAREN expression RPAREN .)


state 76

    (37) comp_expr -> comp_expr AND comp_expr .
    (37) comp_expr -> comp_expr . AND comp_expr
    (38) comp_expr -> comp_expr . OR comp_expr
    (41) expression -> comp_expr .

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! reduce/reduce conflict for EQ resolved using rule 37 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for GT resolved using rule 37 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for LT resolved using rule 37 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for GE resolved using rule 37 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for LE resolved using rule 37 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for NE resolved using rule 37 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for IN resolved using rule 37 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for PLUS resolved using rule 37 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for MINUS resolved using rule 37 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for TIMES resolved using rule 37 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 37 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for POWER resolved using rule 37 (comp_expr -> comp_expr AND comp_expr .)
    PLUS            reduce using rule 37 (comp_expr -> comp_expr AND comp_expr .)
    MINUS           reduce using rule 37 (comp_expr -> comp_expr AND comp_expr .)
    TIMES           reduce using rule 37 (comp_expr -> comp_expr AND comp_expr .)
    DIVIDE          reduce using rule 37 (comp_expr -> comp_expr AND comp_expr .)
    POWER           reduce using rule 37 (comp_expr -> comp_expr AND comp_expr .)
    EQ              reduce using rule 37 (comp_expr -> comp_expr AND comp_expr .)
    GT              reduce using rule 37 (comp_expr -> comp_expr AND comp_expr .)
    LT              reduce using rule 37 (comp_expr -> comp_expr AND comp_expr .)
    GE              reduce using rule 37 (comp_expr -> comp_expr AND comp_expr .)
    LE              reduce using rule 37 (comp_expr -> comp_expr AND comp_expr .)
    NE              reduce using rule 37 (comp_expr -> comp_expr AND comp_expr .)
    IN              reduce using rule 37 (comp_expr -> comp_expr AND comp_expr .)
    OUTPUT          reduce using rule 37 (comp_expr -> comp_expr AND comp_expr .)
    REPEAT          reduce using rule 37 (comp_expr -> comp_expr AND comp_expr .)
    PAUSE           reduce using rule 37 (comp_expr -> comp_expr AND comp_expr .)
    FUNCTION        reduce using rule 37 (comp_expr -> comp_expr AND comp_expr .)
    WHILE           reduce using rule 37 (comp_expr -> comp_expr AND comp_expr .)
    SET             reduce using rule 37 (comp_expr -> comp_expr AND comp_expr .)
    IF              reduce using rule 37 (comp_expr -> comp_expr AND comp_expr .)
    $end            reduce using rule 37 (comp_expr -> comp_expr AND comp_expr .)
    UNTIL           reduce using rule 37 (comp_expr -> comp_expr AND comp_expr .)
    END             reduce using rule 37 (comp_expr -> comp_expr AND comp_expr .)
    ELSE            reduce using rule 37 (comp_expr -> comp_expr AND comp_expr .)
    DO              reduce using rule 37 (comp_expr -> comp_expr AND comp_expr .)
    THEN            reduce using rule 37 (comp_expr -> comp_expr AND comp_expr .)
    RPAREN          reduce using rule 37 (comp_expr -> comp_expr AND comp_expr .)
    TYPE            reduce using rule 37 (comp_expr -> comp_expr AND comp_expr .)
    LPAREN          reduce using rule 37 (comp_expr -> comp_expr AND comp_expr .)
    YES             reduce using rule 37 (comp_expr -> comp_expr AND comp_expr .)
    NO              reduce using rule 37 (comp_expr -> comp_expr AND comp_expr .)
    NUMBER          reduce using rule 37 (comp_expr -> comp_expr AND comp_expr .)
    IDENTIFIER      reduce using rule 37 (comp_expr -> comp_expr AND comp_expr .)
    TEXT            reduce using rule 37 (comp_expr -> comp_expr AND comp_expr .)
    INPUT           reduce using rule 37 (comp_expr -> comp_expr AND comp_expr .)
    NOT             reduce using rule 37 (comp_expr -> comp_expr AND comp_expr .)
    RANDOM          reduce using rule 37 (comp_expr -> comp_expr AND comp_expr .)
    TO              reduce using rule 37 (comp_expr -> comp_expr AND comp_expr .)
    AND             shift and go to state 50
    OR              shift and go to state 51

  ! AND             [ reduce using rule 37 (comp_expr -> comp_expr AND comp_expr .) ]
  ! OR              [ reduce using rule 37 (comp_expr -> comp_expr AND comp_expr .) ]
  ! EQ              [ reduce using rule 41 (expression -> comp_expr .) ]
  ! GT              [ reduce using rule 41 (expression -> comp_expr .) ]
  ! LT              [ reduce using rule 41 (expression -> comp_expr .) ]
  ! GE              [ reduce using rule 41 (expression -> comp_expr .) ]
  ! LE              [ reduce using rule 41 (expression -> comp_expr .) ]
  ! NE              [ reduce using rule 41 (expression -> comp_expr .) ]
  ! IN              [ reduce using rule 41 (expression -> comp_expr .) ]
  ! PLUS            [ reduce using rule 41 (expression -> comp_expr .) ]
  ! MINUS           [ reduce using rule 41 (expression -> comp_expr .) ]
  ! TIMES           [ reduce using rule 41 (expression -> comp_expr .) ]
  ! DIVIDE          [ reduce using rule 41 (expression -> comp_expr .) ]
  ! POWER           [ reduce using rule 41 (expression -> comp_expr .) ]


state 77

    (31) comp_expr -> expression . EQ expression
    (32) comp_expr -> expression . GT expression
    (33) comp_expr -> expression . LT expression
    (34) comp_expr -> expression . GE expression
    (35) comp_expr -> expression . LE expression
    (36) comp_expr -> expression . NE expression
    (40) comp_expr -> expression . IN expression
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . TIMES expression
    (26) expression -> expression . DIVIDE expression
    (27) expression -> expression . POWER expression

    EQ              shift and go to state 42
    GT              shift and go to state 43
    LT              shift and go to state 44
    GE              shift and go to state 45
    LE              shift and go to state 46
    NE              shift and go to state 47
    IN              shift and go to state 48
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    POWER           shift and go to state 41


state 78

    (38) comp_expr -> comp_expr OR comp_expr .
    (37) comp_expr -> comp_expr . AND comp_expr
    (38) comp_expr -> comp_expr . OR comp_expr
    (41) expression -> comp_expr .

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! reduce/reduce conflict for EQ resolved using rule 38 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for GT resolved using rule 38 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for LT resolved using rule 38 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for GE resolved using rule 38 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for LE resolved using rule 38 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for NE resolved using rule 38 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for IN resolved using rule 38 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for PLUS resolved using rule 38 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for MINUS resolved using rule 38 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for TIMES resolved using rule 38 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 38 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for POWER resolved using rule 38 (comp_expr -> comp_expr OR comp_expr .)
    PLUS            reduce using rule 38 (comp_expr -> comp_expr OR comp_expr .)
    MINUS           reduce using rule 38 (comp_expr -> comp_expr OR comp_expr .)
    TIMES           reduce using rule 38 (comp_expr -> comp_expr OR comp_expr .)
    DIVIDE          reduce using rule 38 (comp_expr -> comp_expr OR comp_expr .)
    POWER           reduce using rule 38 (comp_expr -> comp_expr OR comp_expr .)
    EQ              reduce using rule 38 (comp_expr -> comp_expr OR comp_expr .)
    GT              reduce using rule 38 (comp_expr -> comp_expr OR comp_expr .)
    LT              reduce using rule 38 (comp_expr -> comp_expr OR comp_expr .)
    GE              reduce using rule 38 (comp_expr -> comp_expr OR comp_expr .)
    LE              reduce using rule 38 (comp_expr -> comp_expr OR comp_expr .)
    NE              reduce using rule 38 (comp_expr -> comp_expr OR comp_expr .)
    IN              reduce using rule 38 (comp_expr -> comp_expr OR comp_expr .)
    OUTPUT          reduce using rule 38 (comp_expr -> comp_expr OR comp_expr .)
    REPEAT          reduce using rule 38 (comp_expr -> comp_expr OR comp_expr .)
    PAUSE           reduce using rule 38 (comp_expr -> comp_expr OR comp_expr .)
    FUNCTION        reduce using rule 38 (comp_expr -> comp_expr OR comp_expr .)
    WHILE           reduce using rule 38 (comp_expr -> comp_expr OR comp_expr .)
    SET             reduce using rule 38 (comp_expr -> comp_expr OR comp_expr .)
    IF              reduce using rule 38 (comp_expr -> comp_expr OR comp_expr .)
    $end            reduce using rule 38 (comp_expr -> comp_expr OR comp_expr .)
    UNTIL           reduce using rule 38 (comp_expr -> comp_expr OR comp_expr .)
    END             reduce using rule 38 (comp_expr -> comp_expr OR comp_expr .)
    ELSE            reduce using rule 38 (comp_expr -> comp_expr OR comp_expr .)
    DO              reduce using rule 38 (comp_expr -> comp_expr OR comp_expr .)
    THEN            reduce using rule 38 (comp_expr -> comp_expr OR comp_expr .)
    RPAREN          reduce using rule 38 (comp_expr -> comp_expr OR comp_expr .)
    TYPE            reduce using rule 38 (comp_expr -> comp_expr OR comp_expr .)
    LPAREN          reduce using rule 38 (comp_expr -> comp_expr OR comp_expr .)
    YES             reduce using rule 38 (comp_expr -> comp_expr OR comp_expr .)
    NO              reduce using rule 38 (comp_expr -> comp_expr OR comp_expr .)
    NUMBER          reduce using rule 38 (comp_expr -> comp_expr OR comp_expr .)
    IDENTIFIER      reduce using rule 38 (comp_expr -> comp_expr OR comp_expr .)
    TEXT            reduce using rule 38 (comp_expr -> comp_expr OR comp_expr .)
    INPUT           reduce using rule 38 (comp_expr -> comp_expr OR comp_expr .)
    NOT             reduce using rule 38 (comp_expr -> comp_expr OR comp_expr .)
    RANDOM          reduce using rule 38 (comp_expr -> comp_expr OR comp_expr .)
    TO              reduce using rule 38 (comp_expr -> comp_expr OR comp_expr .)
    AND             shift and go to state 50
    OR              shift and go to state 51

  ! AND             [ reduce using rule 38 (comp_expr -> comp_expr OR comp_expr .) ]
  ! OR              [ reduce using rule 38 (comp_expr -> comp_expr OR comp_expr .) ]
  ! EQ              [ reduce using rule 41 (expression -> comp_expr .) ]
  ! GT              [ reduce using rule 41 (expression -> comp_expr .) ]
  ! LT              [ reduce using rule 41 (expression -> comp_expr .) ]
  ! GE              [ reduce using rule 41 (expression -> comp_expr .) ]
  ! LE              [ reduce using rule 41 (expression -> comp_expr .) ]
  ! NE              [ reduce using rule 41 (expression -> comp_expr .) ]
  ! IN              [ reduce using rule 41 (expression -> comp_expr .) ]
  ! PLUS            [ reduce using rule 41 (expression -> comp_expr .) ]
  ! MINUS           [ reduce using rule 41 (expression -> comp_expr .) ]
  ! TIMES           [ reduce using rule 41 (expression -> comp_expr .) ]
  ! DIVIDE          [ reduce using rule 41 (expression -> comp_expr .) ]
  ! POWER           [ reduce using rule 41 (expression -> comp_expr .) ]


state 79

    (6) ask -> TEXT EXPECTING INPUT . AND DATATYPE

    AND             shift and go to state 89


state 80

    (7) random_statement -> RANDOM DATATYPE FROM . expression TO expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . expression POWER expression
    (28) expression -> . LPAREN expression RPAREN
    (29) expression -> . YES
    (30) expression -> . NO
    (41) expression -> . comp_expr
    (42) expression -> . NUMBER
    (43) expression -> . IDENTIFIER
    (44) expression -> . random_statement
    (45) expression -> . TEXT
    (46) expression -> . INPUT
    (31) comp_expr -> . expression EQ expression
    (32) comp_expr -> . expression GT expression
    (33) comp_expr -> . expression LT expression
    (34) comp_expr -> . expression GE expression
    (35) comp_expr -> . expression LE expression
    (36) comp_expr -> . expression NE expression
    (37) comp_expr -> . comp_expr AND comp_expr
    (38) comp_expr -> . comp_expr OR comp_expr
    (39) comp_expr -> . NOT expression
    (40) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 15
    YES             shift and go to state 16
    NO              shift and go to state 17
    NUMBER          shift and go to state 19
    IDENTIFIER      shift and go to state 20
    TEXT            shift and go to state 32
    INPUT           shift and go to state 23
    NOT             shift and go to state 24
    RANDOM          shift and go to state 25

    expression                     shift and go to state 90
    comp_expr                      shift and go to state 18
    random_statement               shift and go to state 21

state 81

    (12) statement -> var_assignment TO items type_stmt .

    OUTPUT          reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    REPEAT          reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    PAUSE           reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    FUNCTION        reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    WHILE           reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    SET             reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    IF              reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    $end            reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    UNTIL           reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    END             reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    ELSE            reduce using rule 12 (statement -> var_assignment TO items type_stmt .)


state 82

    (22) items -> items expression .
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . TIMES expression
    (26) expression -> expression . DIVIDE expression
    (27) expression -> expression . POWER expression
    (31) comp_expr -> expression . EQ expression
    (32) comp_expr -> expression . GT expression
    (33) comp_expr -> expression . LT expression
    (34) comp_expr -> expression . GE expression
    (35) comp_expr -> expression . LE expression
    (36) comp_expr -> expression . NE expression
    (40) comp_expr -> expression . IN expression

    TYPE            reduce using rule 22 (items -> items expression .)
    LPAREN          reduce using rule 22 (items -> items expression .)
    YES             reduce using rule 22 (items -> items expression .)
    NO              reduce using rule 22 (items -> items expression .)
    NUMBER          reduce using rule 22 (items -> items expression .)
    IDENTIFIER      reduce using rule 22 (items -> items expression .)
    TEXT            reduce using rule 22 (items -> items expression .)
    INPUT           reduce using rule 22 (items -> items expression .)
    NOT             reduce using rule 22 (items -> items expression .)
    RANDOM          reduce using rule 22 (items -> items expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    POWER           shift and go to state 41
    EQ              shift and go to state 42
    GT              shift and go to state 43
    LT              shift and go to state 44
    GE              shift and go to state 45
    LE              shift and go to state 46
    NE              shift and go to state 47
    IN              shift and go to state 48


state 83

    (18) type_stmt -> TYPE . DATATYPE

    DATATYPE        shift and go to state 91


state 84

    (15) statement -> if_then ELSE THEN statements . end_statement
    (2) statements -> statements . statement
    (3) end_statement -> . END
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . WHILE expression DO statements end_statement
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    END             shift and go to state 29
    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    SET             shift and go to state 10
    IF              shift and go to state 11

    if_then                        shift and go to state 5
    end_statement                  shift and go to state 92
    statement                      shift and go to state 12
    var_assignment                 shift and go to state 4

state 85

    (16) statement -> REPEAT statements UNTIL expression .
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . TIMES expression
    (26) expression -> expression . DIVIDE expression
    (27) expression -> expression . POWER expression
    (31) comp_expr -> expression . EQ expression
    (32) comp_expr -> expression . GT expression
    (33) comp_expr -> expression . LT expression
    (34) comp_expr -> expression . GE expression
    (35) comp_expr -> expression . LE expression
    (36) comp_expr -> expression . NE expression
    (40) comp_expr -> expression . IN expression

    OUTPUT          reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    REPEAT          reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    PAUSE           reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    FUNCTION        reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    WHILE           reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    SET             reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    IF              reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    $end            reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    UNTIL           reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    END             reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    ELSE            reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    POWER           shift and go to state 41
    EQ              shift and go to state 42
    GT              shift and go to state 43
    LT              shift and go to state 44
    GE              shift and go to state 45
    LE              shift and go to state 46
    NE              shift and go to state 47
    IN              shift and go to state 48


state 86

    (19) statement -> FUNCTION IDENTIFIER MEANS statements . end_statement
    (2) statements -> statements . statement
    (3) end_statement -> . END
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . WHILE expression DO statements end_statement
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    END             shift and go to state 29
    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    SET             shift and go to state 10
    IF              shift and go to state 11

    end_statement                  shift and go to state 93
    statement                      shift and go to state 12
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 87

    (20) statement -> WHILE expression DO statements . end_statement
    (2) statements -> statements . statement
    (3) end_statement -> . END
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . WHILE expression DO statements end_statement
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    END             shift and go to state 29
    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    SET             shift and go to state 10
    IF              shift and go to state 11

    end_statement                  shift and go to state 94
    statement                      shift and go to state 12
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 88

    (13) if_then -> IF expression THEN statements .
    (2) statements -> statements . statement
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . WHILE expression DO statements end_statement
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    ELSE            reduce using rule 13 (if_then -> IF expression THEN statements .)
    END             reduce using rule 13 (if_then -> IF expression THEN statements .)
    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    SET             shift and go to state 10
    IF              shift and go to state 11

    statement                      shift and go to state 12
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 89

    (6) ask -> TEXT EXPECTING INPUT AND . DATATYPE

    DATATYPE        shift and go to state 95


state 90

    (7) random_statement -> RANDOM DATATYPE FROM expression . TO expression
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . TIMES expression
    (26) expression -> expression . DIVIDE expression
    (27) expression -> expression . POWER expression
    (31) comp_expr -> expression . EQ expression
    (32) comp_expr -> expression . GT expression
    (33) comp_expr -> expression . LT expression
    (34) comp_expr -> expression . GE expression
    (35) comp_expr -> expression . LE expression
    (36) comp_expr -> expression . NE expression
    (40) comp_expr -> expression . IN expression

    TO              shift and go to state 96
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    POWER           shift and go to state 41
    EQ              shift and go to state 42
    GT              shift and go to state 43
    LT              shift and go to state 44
    GE              shift and go to state 45
    LE              shift and go to state 46
    NE              shift and go to state 47
    IN              shift and go to state 48


state 91

    (18) type_stmt -> TYPE DATATYPE .

    OUTPUT          reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    REPEAT          reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    PAUSE           reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    FUNCTION        reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    WHILE           reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    SET             reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    IF              reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    $end            reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    UNTIL           reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    END             reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    ELSE            reduce using rule 18 (type_stmt -> TYPE DATATYPE .)


state 92

    (15) statement -> if_then ELSE THEN statements end_statement .

    OUTPUT          reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    REPEAT          reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    PAUSE           reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    FUNCTION        reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    WHILE           reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    SET             reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    IF              reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    $end            reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    UNTIL           reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    END             reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    ELSE            reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)


state 93

    (19) statement -> FUNCTION IDENTIFIER MEANS statements end_statement .

    OUTPUT          reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    REPEAT          reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    PAUSE           reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    FUNCTION        reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    WHILE           reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    SET             reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    IF              reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    $end            reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    UNTIL           reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    END             reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    ELSE            reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)


state 94

    (20) statement -> WHILE expression DO statements end_statement .

    OUTPUT          reduce using rule 20 (statement -> WHILE expression DO statements end_statement .)
    REPEAT          reduce using rule 20 (statement -> WHILE expression DO statements end_statement .)
    PAUSE           reduce using rule 20 (statement -> WHILE expression DO statements end_statement .)
    FUNCTION        reduce using rule 20 (statement -> WHILE expression DO statements end_statement .)
    WHILE           reduce using rule 20 (statement -> WHILE expression DO statements end_statement .)
    SET             reduce using rule 20 (statement -> WHILE expression DO statements end_statement .)
    IF              reduce using rule 20 (statement -> WHILE expression DO statements end_statement .)
    $end            reduce using rule 20 (statement -> WHILE expression DO statements end_statement .)
    UNTIL           reduce using rule 20 (statement -> WHILE expression DO statements end_statement .)
    END             reduce using rule 20 (statement -> WHILE expression DO statements end_statement .)
    ELSE            reduce using rule 20 (statement -> WHILE expression DO statements end_statement .)


state 95

    (6) ask -> TEXT EXPECTING INPUT AND DATATYPE .

    OUTPUT          reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    REPEAT          reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    PAUSE           reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    FUNCTION        reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    WHILE           reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    SET             reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    IF              reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    $end            reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    UNTIL           reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    END             reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    ELSE            reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)


state 96

    (7) random_statement -> RANDOM DATATYPE FROM expression TO . expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . expression POWER expression
    (28) expression -> . LPAREN expression RPAREN
    (29) expression -> . YES
    (30) expression -> . NO
    (41) expression -> . comp_expr
    (42) expression -> . NUMBER
    (43) expression -> . IDENTIFIER
    (44) expression -> . random_statement
    (45) expression -> . TEXT
    (46) expression -> . INPUT
    (31) comp_expr -> . expression EQ expression
    (32) comp_expr -> . expression GT expression
    (33) comp_expr -> . expression LT expression
    (34) comp_expr -> . expression GE expression
    (35) comp_expr -> . expression LE expression
    (36) comp_expr -> . expression NE expression
    (37) comp_expr -> . comp_expr AND comp_expr
    (38) comp_expr -> . comp_expr OR comp_expr
    (39) comp_expr -> . NOT expression
    (40) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 15
    YES             shift and go to state 16
    NO              shift and go to state 17
    NUMBER          shift and go to state 19
    IDENTIFIER      shift and go to state 20
    TEXT            shift and go to state 32
    INPUT           shift and go to state 23
    NOT             shift and go to state 24
    RANDOM          shift and go to state 25

    expression                     shift and go to state 97
    comp_expr                      shift and go to state 18
    random_statement               shift and go to state 21

state 97

    (7) random_statement -> RANDOM DATATYPE FROM expression TO expression .
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . TIMES expression
    (26) expression -> expression . DIVIDE expression
    (27) expression -> expression . POWER expression
    (31) comp_expr -> expression . EQ expression
    (32) comp_expr -> expression . GT expression
    (33) comp_expr -> expression . LT expression
    (34) comp_expr -> expression . GE expression
    (35) comp_expr -> expression . LE expression
    (36) comp_expr -> expression . NE expression
    (40) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    OUTPUT          reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    REPEAT          reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    PAUSE           reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    FUNCTION        reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    WHILE           reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    SET             reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    IF              reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    $end            reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    UNTIL           reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    END             reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    ELSE            reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    DO              reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    THEN            reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    RPAREN          reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    AND             reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    OR              reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    TYPE            reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    LPAREN          reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    YES             reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    NO              reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    NUMBER          reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    IDENTIFIER      reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    TEXT            reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    INPUT           reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    NOT             reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    RANDOM          reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    TO              reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    POWER           shift and go to state 41
    EQ              shift and go to state 42
    GT              shift and go to state 43
    LT              shift and go to state 44
    GE              shift and go to state 45
    LE              shift and go to state 46
    NE              shift and go to state 47
    IN              shift and go to state 48

  ! PLUS            [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! MINUS           [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! TIMES           [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! DIVIDE          [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! POWER           [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! EQ              [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! GT              [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! LT              [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! GE              [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! LE              [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! NE              [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! IN              [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for AND in state 18 resolved as shift
WARNING: shift/reduce conflict for OR in state 18 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 53 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 53 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 53 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 53 resolved as shift
WARNING: shift/reduce conflict for POWER in state 53 resolved as shift
WARNING: shift/reduce conflict for EQ in state 53 resolved as shift
WARNING: shift/reduce conflict for GT in state 53 resolved as shift
WARNING: shift/reduce conflict for LT in state 53 resolved as shift
WARNING: shift/reduce conflict for GE in state 53 resolved as shift
WARNING: shift/reduce conflict for LE in state 53 resolved as shift
WARNING: shift/reduce conflict for NE in state 53 resolved as shift
WARNING: shift/reduce conflict for IN in state 53 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 63 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 63 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 63 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 63 resolved as shift
WARNING: shift/reduce conflict for POWER in state 63 resolved as shift
WARNING: shift/reduce conflict for EQ in state 63 resolved as shift
WARNING: shift/reduce conflict for GT in state 63 resolved as shift
WARNING: shift/reduce conflict for LT in state 63 resolved as shift
WARNING: shift/reduce conflict for GE in state 63 resolved as shift
WARNING: shift/reduce conflict for LE in state 63 resolved as shift
WARNING: shift/reduce conflict for NE in state 63 resolved as shift
WARNING: shift/reduce conflict for IN in state 63 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 64 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 64 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 64 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 64 resolved as shift
WARNING: shift/reduce conflict for POWER in state 64 resolved as shift
WARNING: shift/reduce conflict for EQ in state 64 resolved as shift
WARNING: shift/reduce conflict for GT in state 64 resolved as shift
WARNING: shift/reduce conflict for LT in state 64 resolved as shift
WARNING: shift/reduce conflict for GE in state 64 resolved as shift
WARNING: shift/reduce conflict for LE in state 64 resolved as shift
WARNING: shift/reduce conflict for NE in state 64 resolved as shift
WARNING: shift/reduce conflict for IN in state 64 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 65 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 65 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 65 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 65 resolved as shift
WARNING: shift/reduce conflict for POWER in state 65 resolved as shift
WARNING: shift/reduce conflict for EQ in state 65 resolved as shift
WARNING: shift/reduce conflict for GT in state 65 resolved as shift
WARNING: shift/reduce conflict for LT in state 65 resolved as shift
WARNING: shift/reduce conflict for GE in state 65 resolved as shift
WARNING: shift/reduce conflict for LE in state 65 resolved as shift
WARNING: shift/reduce conflict for NE in state 65 resolved as shift
WARNING: shift/reduce conflict for IN in state 65 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 66 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 66 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 66 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 66 resolved as shift
WARNING: shift/reduce conflict for POWER in state 66 resolved as shift
WARNING: shift/reduce conflict for EQ in state 66 resolved as shift
WARNING: shift/reduce conflict for GT in state 66 resolved as shift
WARNING: shift/reduce conflict for LT in state 66 resolved as shift
WARNING: shift/reduce conflict for GE in state 66 resolved as shift
WARNING: shift/reduce conflict for LE in state 66 resolved as shift
WARNING: shift/reduce conflict for NE in state 66 resolved as shift
WARNING: shift/reduce conflict for IN in state 66 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 67 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 67 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 67 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 67 resolved as shift
WARNING: shift/reduce conflict for POWER in state 67 resolved as shift
WARNING: shift/reduce conflict for EQ in state 67 resolved as shift
WARNING: shift/reduce conflict for GT in state 67 resolved as shift
WARNING: shift/reduce conflict for LT in state 67 resolved as shift
WARNING: shift/reduce conflict for GE in state 67 resolved as shift
WARNING: shift/reduce conflict for LE in state 67 resolved as shift
WARNING: shift/reduce conflict for NE in state 67 resolved as shift
WARNING: shift/reduce conflict for IN in state 67 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 68 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 68 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 68 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 68 resolved as shift
WARNING: shift/reduce conflict for POWER in state 68 resolved as shift
WARNING: shift/reduce conflict for EQ in state 68 resolved as shift
WARNING: shift/reduce conflict for GT in state 68 resolved as shift
WARNING: shift/reduce conflict for LT in state 68 resolved as shift
WARNING: shift/reduce conflict for GE in state 68 resolved as shift
WARNING: shift/reduce conflict for LE in state 68 resolved as shift
WARNING: shift/reduce conflict for NE in state 68 resolved as shift
WARNING: shift/reduce conflict for IN in state 68 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 69 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 69 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 69 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 69 resolved as shift
WARNING: shift/reduce conflict for POWER in state 69 resolved as shift
WARNING: shift/reduce conflict for EQ in state 69 resolved as shift
WARNING: shift/reduce conflict for GT in state 69 resolved as shift
WARNING: shift/reduce conflict for LT in state 69 resolved as shift
WARNING: shift/reduce conflict for GE in state 69 resolved as shift
WARNING: shift/reduce conflict for LE in state 69 resolved as shift
WARNING: shift/reduce conflict for NE in state 69 resolved as shift
WARNING: shift/reduce conflict for IN in state 69 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 70 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 70 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 70 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 70 resolved as shift
WARNING: shift/reduce conflict for POWER in state 70 resolved as shift
WARNING: shift/reduce conflict for EQ in state 70 resolved as shift
WARNING: shift/reduce conflict for GT in state 70 resolved as shift
WARNING: shift/reduce conflict for LT in state 70 resolved as shift
WARNING: shift/reduce conflict for GE in state 70 resolved as shift
WARNING: shift/reduce conflict for LE in state 70 resolved as shift
WARNING: shift/reduce conflict for NE in state 70 resolved as shift
WARNING: shift/reduce conflict for IN in state 70 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 71 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 71 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 71 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 71 resolved as shift
WARNING: shift/reduce conflict for POWER in state 71 resolved as shift
WARNING: shift/reduce conflict for EQ in state 71 resolved as shift
WARNING: shift/reduce conflict for GT in state 71 resolved as shift
WARNING: shift/reduce conflict for LT in state 71 resolved as shift
WARNING: shift/reduce conflict for GE in state 71 resolved as shift
WARNING: shift/reduce conflict for LE in state 71 resolved as shift
WARNING: shift/reduce conflict for NE in state 71 resolved as shift
WARNING: shift/reduce conflict for IN in state 71 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 72 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 72 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 72 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 72 resolved as shift
WARNING: shift/reduce conflict for POWER in state 72 resolved as shift
WARNING: shift/reduce conflict for EQ in state 72 resolved as shift
WARNING: shift/reduce conflict for GT in state 72 resolved as shift
WARNING: shift/reduce conflict for LT in state 72 resolved as shift
WARNING: shift/reduce conflict for GE in state 72 resolved as shift
WARNING: shift/reduce conflict for LE in state 72 resolved as shift
WARNING: shift/reduce conflict for NE in state 72 resolved as shift
WARNING: shift/reduce conflict for IN in state 72 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 73 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 73 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 73 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 73 resolved as shift
WARNING: shift/reduce conflict for POWER in state 73 resolved as shift
WARNING: shift/reduce conflict for EQ in state 73 resolved as shift
WARNING: shift/reduce conflict for GT in state 73 resolved as shift
WARNING: shift/reduce conflict for LT in state 73 resolved as shift
WARNING: shift/reduce conflict for GE in state 73 resolved as shift
WARNING: shift/reduce conflict for LE in state 73 resolved as shift
WARNING: shift/reduce conflict for NE in state 73 resolved as shift
WARNING: shift/reduce conflict for IN in state 73 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 74 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 74 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 74 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 74 resolved as shift
WARNING: shift/reduce conflict for POWER in state 74 resolved as shift
WARNING: shift/reduce conflict for EQ in state 74 resolved as shift
WARNING: shift/reduce conflict for GT in state 74 resolved as shift
WARNING: shift/reduce conflict for LT in state 74 resolved as shift
WARNING: shift/reduce conflict for GE in state 74 resolved as shift
WARNING: shift/reduce conflict for LE in state 74 resolved as shift
WARNING: shift/reduce conflict for NE in state 74 resolved as shift
WARNING: shift/reduce conflict for IN in state 74 resolved as shift
WARNING: shift/reduce conflict for AND in state 76 resolved as shift
WARNING: shift/reduce conflict for OR in state 76 resolved as shift
WARNING: shift/reduce conflict for AND in state 78 resolved as shift
WARNING: shift/reduce conflict for OR in state 78 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 97 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 97 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 97 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 97 resolved as shift
WARNING: shift/reduce conflict for POWER in state 97 resolved as shift
WARNING: shift/reduce conflict for EQ in state 97 resolved as shift
WARNING: shift/reduce conflict for GT in state 97 resolved as shift
WARNING: shift/reduce conflict for LT in state 97 resolved as shift
WARNING: shift/reduce conflict for GE in state 97 resolved as shift
WARNING: shift/reduce conflict for LE in state 97 resolved as shift
WARNING: shift/reduce conflict for NE in state 97 resolved as shift
WARNING: shift/reduce conflict for IN in state 97 resolved as shift
WARNING: reduce/reduce conflict in state 76 resolved using rule (comp_expr -> comp_expr AND comp_expr)
WARNING: rejected rule (expression -> comp_expr) in state 76
WARNING: reduce/reduce conflict in state 78 resolved using rule (comp_expr -> comp_expr OR comp_expr)
WARNING: rejected rule (expression -> comp_expr) in state 78
