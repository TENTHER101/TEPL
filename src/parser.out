Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ELSEIF
    RETURN

Grammar

Rule 0     S' -> statements
Rule 1     statements -> statement
Rule 2     statements -> statements statement
Rule 3     end_statement -> END
Rule 4     statement -> OUTPUT expression
Rule 5     statement -> OUTPUT ask
Rule 6     ask -> TEXT EXPECTING INPUT AND DATATYPE
Rule 7     random_statement -> RANDOM DATATYPE FROM expression TO expression
Rule 8     var_assignment -> SET IDENTIFIER
Rule 9     statement -> var_assignment TO expression
Rule 10    statement -> var_assignment
Rule 11    statement -> var_assignment TO ask
Rule 12    statement -> var_assignment TO items type_stmt
Rule 13    if_then -> IF expression THEN statements
Rule 14    statement -> if_then end_statement
Rule 15    statement -> if_then ELSE THEN statements end_statement
Rule 16    statement -> REPEAT statements UNTIL expression
Rule 17    statement -> PAUSE expression
Rule 18    type_stmt -> TYPE DATATYPE
Rule 19    statement -> FUNCTION IDENTIFIER MEANS statements end_statement
Rule 20    statement -> WHILE expression DO statements end_statement
Rule 21    statement -> FOREVER DO statements end_statement
Rule 22    statement -> EXIT LOOP
Rule 23    expression -> DATATYPE FROM expression TO expression FROM expression
Rule 24    items -> expression
Rule 25    items -> items expression
Rule 26    expression -> expression PLUS expression
Rule 27    expression -> expression MINUS expression
Rule 28    expression -> expression TIMES expression
Rule 29    expression -> expression DIVIDE expression
Rule 30    expression -> expression POWER expression
Rule 31    expression -> LPAREN expression RPAREN
Rule 32    expression -> YES
Rule 33    expression -> NO
Rule 34    comp_expr -> expression EQ expression
Rule 35    comp_expr -> expression GT expression
Rule 36    comp_expr -> expression LT expression
Rule 37    comp_expr -> expression GE expression
Rule 38    comp_expr -> expression LE expression
Rule 39    comp_expr -> expression NE expression
Rule 40    comp_expr -> comp_expr AND comp_expr
Rule 41    comp_expr -> comp_expr OR comp_expr
Rule 42    comp_expr -> NOT expression
Rule 43    comp_expr -> expression IN expression
Rule 44    expression -> comp_expr
Rule 45    expression -> NUMBER
Rule 46    expression -> IDENTIFIER
Rule 47    expression -> random_statement
Rule 48    expression -> TEXT
Rule 49    expression -> INPUT

Terminals, with rules where they appear

AND                  : 6 40
DATATYPE             : 6 7 18 23
DIVIDE               : 29
DO                   : 20 21
ELSE                 : 15
ELSEIF               : 
END                  : 3
EQ                   : 34
EXIT                 : 22
EXPECTING            : 6
FOREVER              : 21
FROM                 : 7 23 23
FUNCTION             : 19
GE                   : 37
GT                   : 35
IDENTIFIER           : 8 19 46
IF                   : 13
IN                   : 43
INPUT                : 6 49
LE                   : 38
LOOP                 : 22
LPAREN               : 31
LT                   : 36
MEANS                : 19
MINUS                : 27
NE                   : 39
NO                   : 33
NOT                  : 42
NUMBER               : 45
OR                   : 41
OUTPUT               : 4 5
PAUSE                : 17
PLUS                 : 26
POWER                : 30
RANDOM               : 7
REPEAT               : 16
RETURN               : 
RPAREN               : 31
SET                  : 8
TEXT                 : 6 48
THEN                 : 13 15
TIMES                : 28
TO                   : 7 9 11 12 23
TYPE                 : 18
UNTIL                : 16
WHILE                : 20
YES                  : 32
error                : 

Nonterminals, with rules where they appear

ask                  : 5 11
comp_expr            : 40 40 41 41 44
end_statement        : 14 15 19 20 21
expression           : 4 7 7 9 13 16 17 20 23 23 23 24 25 26 26 27 27 28 28 29 29 30 30 31 34 34 35 35 36 36 37 37 38 38 39 39 42 43 43
if_then              : 14 15
items                : 12 25
random_statement     : 47
statement            : 1 2
statements           : 2 13 15 16 19 20 21 0
type_stmt            : 12
var_assignment       : 9 10 11 12

Parsing method: LALR

state 0

    (0) S' -> . statements
    (1) statements -> . statement
    (2) statements -> . statements statement
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . WHILE expression DO statements end_statement
    (21) statement -> . FOREVER DO statements end_statement
    (22) statement -> . EXIT LOOP
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    FOREVER         shift and go to state 10
    EXIT            shift and go to state 11
    SET             shift and go to state 12
    IF              shift and go to state 13

    statements                     shift and go to state 1
    statement                      shift and go to state 2
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 1

    (0) S' -> statements .
    (2) statements -> statements . statement
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . WHILE expression DO statements end_statement
    (21) statement -> . FOREVER DO statements end_statement
    (22) statement -> . EXIT LOOP
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    FOREVER         shift and go to state 10
    EXIT            shift and go to state 11
    SET             shift and go to state 12
    IF              shift and go to state 13

    statement                      shift and go to state 14
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 2

    (1) statements -> statement .

    OUTPUT          reduce using rule 1 (statements -> statement .)
    REPEAT          reduce using rule 1 (statements -> statement .)
    PAUSE           reduce using rule 1 (statements -> statement .)
    FUNCTION        reduce using rule 1 (statements -> statement .)
    WHILE           reduce using rule 1 (statements -> statement .)
    FOREVER         reduce using rule 1 (statements -> statement .)
    EXIT            reduce using rule 1 (statements -> statement .)
    SET             reduce using rule 1 (statements -> statement .)
    IF              reduce using rule 1 (statements -> statement .)
    $end            reduce using rule 1 (statements -> statement .)
    UNTIL           reduce using rule 1 (statements -> statement .)
    END             reduce using rule 1 (statements -> statement .)
    ELSE            reduce using rule 1 (statements -> statement .)


state 3

    (4) statement -> OUTPUT . expression
    (5) statement -> OUTPUT . ask
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression POWER expression
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . YES
    (33) expression -> . NO
    (44) expression -> . comp_expr
    (45) expression -> . NUMBER
    (46) expression -> . IDENTIFIER
    (47) expression -> . random_statement
    (48) expression -> . TEXT
    (49) expression -> . INPUT
    (6) ask -> . TEXT EXPECTING INPUT AND DATATYPE
    (34) comp_expr -> . expression EQ expression
    (35) comp_expr -> . expression GT expression
    (36) comp_expr -> . expression LT expression
    (37) comp_expr -> . expression GE expression
    (38) comp_expr -> . expression LE expression
    (39) comp_expr -> . expression NE expression
    (40) comp_expr -> . comp_expr AND comp_expr
    (41) comp_expr -> . comp_expr OR comp_expr
    (42) comp_expr -> . NOT expression
    (43) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LPAREN          shift and go to state 18
    YES             shift and go to state 19
    NO              shift and go to state 20
    NUMBER          shift and go to state 22
    IDENTIFIER      shift and go to state 23
    TEXT            shift and go to state 25
    INPUT           shift and go to state 26
    NOT             shift and go to state 27
    RANDOM          shift and go to state 28

    expression                     shift and go to state 15
    ask                            shift and go to state 16
    comp_expr                      shift and go to state 21
    random_statement               shift and go to state 24

state 4

    (9) statement -> var_assignment . TO expression
    (10) statement -> var_assignment .
    (11) statement -> var_assignment . TO ask
    (12) statement -> var_assignment . TO items type_stmt

    TO              shift and go to state 29
    OUTPUT          reduce using rule 10 (statement -> var_assignment .)
    REPEAT          reduce using rule 10 (statement -> var_assignment .)
    PAUSE           reduce using rule 10 (statement -> var_assignment .)
    FUNCTION        reduce using rule 10 (statement -> var_assignment .)
    WHILE           reduce using rule 10 (statement -> var_assignment .)
    FOREVER         reduce using rule 10 (statement -> var_assignment .)
    EXIT            reduce using rule 10 (statement -> var_assignment .)
    SET             reduce using rule 10 (statement -> var_assignment .)
    IF              reduce using rule 10 (statement -> var_assignment .)
    $end            reduce using rule 10 (statement -> var_assignment .)
    UNTIL           reduce using rule 10 (statement -> var_assignment .)
    END             reduce using rule 10 (statement -> var_assignment .)
    ELSE            reduce using rule 10 (statement -> var_assignment .)


state 5

    (14) statement -> if_then . end_statement
    (15) statement -> if_then . ELSE THEN statements end_statement
    (3) end_statement -> . END

    ELSE            shift and go to state 31
    END             shift and go to state 32

    end_statement                  shift and go to state 30

state 6

    (16) statement -> REPEAT . statements UNTIL expression
    (1) statements -> . statement
    (2) statements -> . statements statement
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . WHILE expression DO statements end_statement
    (21) statement -> . FOREVER DO statements end_statement
    (22) statement -> . EXIT LOOP
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    FOREVER         shift and go to state 10
    EXIT            shift and go to state 11
    SET             shift and go to state 12
    IF              shift and go to state 13

    statements                     shift and go to state 33
    statement                      shift and go to state 2
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 7

    (17) statement -> PAUSE . expression
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression POWER expression
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . YES
    (33) expression -> . NO
    (44) expression -> . comp_expr
    (45) expression -> . NUMBER
    (46) expression -> . IDENTIFIER
    (47) expression -> . random_statement
    (48) expression -> . TEXT
    (49) expression -> . INPUT
    (34) comp_expr -> . expression EQ expression
    (35) comp_expr -> . expression GT expression
    (36) comp_expr -> . expression LT expression
    (37) comp_expr -> . expression GE expression
    (38) comp_expr -> . expression LE expression
    (39) comp_expr -> . expression NE expression
    (40) comp_expr -> . comp_expr AND comp_expr
    (41) comp_expr -> . comp_expr OR comp_expr
    (42) comp_expr -> . NOT expression
    (43) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LPAREN          shift and go to state 18
    YES             shift and go to state 19
    NO              shift and go to state 20
    NUMBER          shift and go to state 22
    IDENTIFIER      shift and go to state 23
    TEXT            shift and go to state 35
    INPUT           shift and go to state 26
    NOT             shift and go to state 27
    RANDOM          shift and go to state 28

    expression                     shift and go to state 34
    comp_expr                      shift and go to state 21
    random_statement               shift and go to state 24

state 8

    (19) statement -> FUNCTION . IDENTIFIER MEANS statements end_statement

    IDENTIFIER      shift and go to state 36


state 9

    (20) statement -> WHILE . expression DO statements end_statement
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression POWER expression
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . YES
    (33) expression -> . NO
    (44) expression -> . comp_expr
    (45) expression -> . NUMBER
    (46) expression -> . IDENTIFIER
    (47) expression -> . random_statement
    (48) expression -> . TEXT
    (49) expression -> . INPUT
    (34) comp_expr -> . expression EQ expression
    (35) comp_expr -> . expression GT expression
    (36) comp_expr -> . expression LT expression
    (37) comp_expr -> . expression GE expression
    (38) comp_expr -> . expression LE expression
    (39) comp_expr -> . expression NE expression
    (40) comp_expr -> . comp_expr AND comp_expr
    (41) comp_expr -> . comp_expr OR comp_expr
    (42) comp_expr -> . NOT expression
    (43) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LPAREN          shift and go to state 18
    YES             shift and go to state 19
    NO              shift and go to state 20
    NUMBER          shift and go to state 22
    IDENTIFIER      shift and go to state 23
    TEXT            shift and go to state 35
    INPUT           shift and go to state 26
    NOT             shift and go to state 27
    RANDOM          shift and go to state 28

    expression                     shift and go to state 37
    comp_expr                      shift and go to state 21
    random_statement               shift and go to state 24

state 10

    (21) statement -> FOREVER . DO statements end_statement

    DO              shift and go to state 38


state 11

    (22) statement -> EXIT . LOOP

    LOOP            shift and go to state 39


state 12

    (8) var_assignment -> SET . IDENTIFIER

    IDENTIFIER      shift and go to state 40


state 13

    (13) if_then -> IF . expression THEN statements
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression POWER expression
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . YES
    (33) expression -> . NO
    (44) expression -> . comp_expr
    (45) expression -> . NUMBER
    (46) expression -> . IDENTIFIER
    (47) expression -> . random_statement
    (48) expression -> . TEXT
    (49) expression -> . INPUT
    (34) comp_expr -> . expression EQ expression
    (35) comp_expr -> . expression GT expression
    (36) comp_expr -> . expression LT expression
    (37) comp_expr -> . expression GE expression
    (38) comp_expr -> . expression LE expression
    (39) comp_expr -> . expression NE expression
    (40) comp_expr -> . comp_expr AND comp_expr
    (41) comp_expr -> . comp_expr OR comp_expr
    (42) comp_expr -> . NOT expression
    (43) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LPAREN          shift and go to state 18
    YES             shift and go to state 19
    NO              shift and go to state 20
    NUMBER          shift and go to state 22
    IDENTIFIER      shift and go to state 23
    TEXT            shift and go to state 35
    INPUT           shift and go to state 26
    NOT             shift and go to state 27
    RANDOM          shift and go to state 28

    expression                     shift and go to state 41
    comp_expr                      shift and go to state 21
    random_statement               shift and go to state 24

state 14

    (2) statements -> statements statement .

    OUTPUT          reduce using rule 2 (statements -> statements statement .)
    REPEAT          reduce using rule 2 (statements -> statements statement .)
    PAUSE           reduce using rule 2 (statements -> statements statement .)
    FUNCTION        reduce using rule 2 (statements -> statements statement .)
    WHILE           reduce using rule 2 (statements -> statements statement .)
    FOREVER         reduce using rule 2 (statements -> statements statement .)
    EXIT            reduce using rule 2 (statements -> statements statement .)
    SET             reduce using rule 2 (statements -> statements statement .)
    IF              reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)
    UNTIL           reduce using rule 2 (statements -> statements statement .)
    END             reduce using rule 2 (statements -> statements statement .)
    ELSE            reduce using rule 2 (statements -> statements statement .)


state 15

    (4) statement -> OUTPUT expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . POWER expression
    (34) comp_expr -> expression . EQ expression
    (35) comp_expr -> expression . GT expression
    (36) comp_expr -> expression . LT expression
    (37) comp_expr -> expression . GE expression
    (38) comp_expr -> expression . LE expression
    (39) comp_expr -> expression . NE expression
    (43) comp_expr -> expression . IN expression

    OUTPUT          reduce using rule 4 (statement -> OUTPUT expression .)
    REPEAT          reduce using rule 4 (statement -> OUTPUT expression .)
    PAUSE           reduce using rule 4 (statement -> OUTPUT expression .)
    FUNCTION        reduce using rule 4 (statement -> OUTPUT expression .)
    WHILE           reduce using rule 4 (statement -> OUTPUT expression .)
    FOREVER         reduce using rule 4 (statement -> OUTPUT expression .)
    EXIT            reduce using rule 4 (statement -> OUTPUT expression .)
    SET             reduce using rule 4 (statement -> OUTPUT expression .)
    IF              reduce using rule 4 (statement -> OUTPUT expression .)
    $end            reduce using rule 4 (statement -> OUTPUT expression .)
    UNTIL           reduce using rule 4 (statement -> OUTPUT expression .)
    END             reduce using rule 4 (statement -> OUTPUT expression .)
    ELSE            reduce using rule 4 (statement -> OUTPUT expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    POWER           shift and go to state 46
    EQ              shift and go to state 47
    GT              shift and go to state 48
    LT              shift and go to state 49
    GE              shift and go to state 50
    LE              shift and go to state 51
    NE              shift and go to state 52
    IN              shift and go to state 53


state 16

    (5) statement -> OUTPUT ask .

    OUTPUT          reduce using rule 5 (statement -> OUTPUT ask .)
    REPEAT          reduce using rule 5 (statement -> OUTPUT ask .)
    PAUSE           reduce using rule 5 (statement -> OUTPUT ask .)
    FUNCTION        reduce using rule 5 (statement -> OUTPUT ask .)
    WHILE           reduce using rule 5 (statement -> OUTPUT ask .)
    FOREVER         reduce using rule 5 (statement -> OUTPUT ask .)
    EXIT            reduce using rule 5 (statement -> OUTPUT ask .)
    SET             reduce using rule 5 (statement -> OUTPUT ask .)
    IF              reduce using rule 5 (statement -> OUTPUT ask .)
    $end            reduce using rule 5 (statement -> OUTPUT ask .)
    UNTIL           reduce using rule 5 (statement -> OUTPUT ask .)
    END             reduce using rule 5 (statement -> OUTPUT ask .)
    ELSE            reduce using rule 5 (statement -> OUTPUT ask .)


state 17

    (23) expression -> DATATYPE . FROM expression TO expression FROM expression

    FROM            shift and go to state 54


state 18

    (31) expression -> LPAREN . expression RPAREN
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression POWER expression
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . YES
    (33) expression -> . NO
    (44) expression -> . comp_expr
    (45) expression -> . NUMBER
    (46) expression -> . IDENTIFIER
    (47) expression -> . random_statement
    (48) expression -> . TEXT
    (49) expression -> . INPUT
    (34) comp_expr -> . expression EQ expression
    (35) comp_expr -> . expression GT expression
    (36) comp_expr -> . expression LT expression
    (37) comp_expr -> . expression GE expression
    (38) comp_expr -> . expression LE expression
    (39) comp_expr -> . expression NE expression
    (40) comp_expr -> . comp_expr AND comp_expr
    (41) comp_expr -> . comp_expr OR comp_expr
    (42) comp_expr -> . NOT expression
    (43) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LPAREN          shift and go to state 18
    YES             shift and go to state 19
    NO              shift and go to state 20
    NUMBER          shift and go to state 22
    IDENTIFIER      shift and go to state 23
    TEXT            shift and go to state 35
    INPUT           shift and go to state 26
    NOT             shift and go to state 27
    RANDOM          shift and go to state 28

    expression                     shift and go to state 55
    comp_expr                      shift and go to state 21
    random_statement               shift and go to state 24

state 19

    (32) expression -> YES .

    PLUS            reduce using rule 32 (expression -> YES .)
    MINUS           reduce using rule 32 (expression -> YES .)
    TIMES           reduce using rule 32 (expression -> YES .)
    DIVIDE          reduce using rule 32 (expression -> YES .)
    POWER           reduce using rule 32 (expression -> YES .)
    EQ              reduce using rule 32 (expression -> YES .)
    GT              reduce using rule 32 (expression -> YES .)
    LT              reduce using rule 32 (expression -> YES .)
    GE              reduce using rule 32 (expression -> YES .)
    LE              reduce using rule 32 (expression -> YES .)
    NE              reduce using rule 32 (expression -> YES .)
    IN              reduce using rule 32 (expression -> YES .)
    OUTPUT          reduce using rule 32 (expression -> YES .)
    REPEAT          reduce using rule 32 (expression -> YES .)
    PAUSE           reduce using rule 32 (expression -> YES .)
    FUNCTION        reduce using rule 32 (expression -> YES .)
    WHILE           reduce using rule 32 (expression -> YES .)
    FOREVER         reduce using rule 32 (expression -> YES .)
    EXIT            reduce using rule 32 (expression -> YES .)
    SET             reduce using rule 32 (expression -> YES .)
    IF              reduce using rule 32 (expression -> YES .)
    $end            reduce using rule 32 (expression -> YES .)
    UNTIL           reduce using rule 32 (expression -> YES .)
    END             reduce using rule 32 (expression -> YES .)
    ELSE            reduce using rule 32 (expression -> YES .)
    DO              reduce using rule 32 (expression -> YES .)
    THEN            reduce using rule 32 (expression -> YES .)
    RPAREN          reduce using rule 32 (expression -> YES .)
    AND             reduce using rule 32 (expression -> YES .)
    OR              reduce using rule 32 (expression -> YES .)
    TYPE            reduce using rule 32 (expression -> YES .)
    DATATYPE        reduce using rule 32 (expression -> YES .)
    LPAREN          reduce using rule 32 (expression -> YES .)
    YES             reduce using rule 32 (expression -> YES .)
    NO              reduce using rule 32 (expression -> YES .)
    NUMBER          reduce using rule 32 (expression -> YES .)
    IDENTIFIER      reduce using rule 32 (expression -> YES .)
    TEXT            reduce using rule 32 (expression -> YES .)
    INPUT           reduce using rule 32 (expression -> YES .)
    NOT             reduce using rule 32 (expression -> YES .)
    RANDOM          reduce using rule 32 (expression -> YES .)
    TO              reduce using rule 32 (expression -> YES .)
    FROM            reduce using rule 32 (expression -> YES .)


state 20

    (33) expression -> NO .

    PLUS            reduce using rule 33 (expression -> NO .)
    MINUS           reduce using rule 33 (expression -> NO .)
    TIMES           reduce using rule 33 (expression -> NO .)
    DIVIDE          reduce using rule 33 (expression -> NO .)
    POWER           reduce using rule 33 (expression -> NO .)
    EQ              reduce using rule 33 (expression -> NO .)
    GT              reduce using rule 33 (expression -> NO .)
    LT              reduce using rule 33 (expression -> NO .)
    GE              reduce using rule 33 (expression -> NO .)
    LE              reduce using rule 33 (expression -> NO .)
    NE              reduce using rule 33 (expression -> NO .)
    IN              reduce using rule 33 (expression -> NO .)
    OUTPUT          reduce using rule 33 (expression -> NO .)
    REPEAT          reduce using rule 33 (expression -> NO .)
    PAUSE           reduce using rule 33 (expression -> NO .)
    FUNCTION        reduce using rule 33 (expression -> NO .)
    WHILE           reduce using rule 33 (expression -> NO .)
    FOREVER         reduce using rule 33 (expression -> NO .)
    EXIT            reduce using rule 33 (expression -> NO .)
    SET             reduce using rule 33 (expression -> NO .)
    IF              reduce using rule 33 (expression -> NO .)
    $end            reduce using rule 33 (expression -> NO .)
    UNTIL           reduce using rule 33 (expression -> NO .)
    END             reduce using rule 33 (expression -> NO .)
    ELSE            reduce using rule 33 (expression -> NO .)
    DO              reduce using rule 33 (expression -> NO .)
    THEN            reduce using rule 33 (expression -> NO .)
    RPAREN          reduce using rule 33 (expression -> NO .)
    AND             reduce using rule 33 (expression -> NO .)
    OR              reduce using rule 33 (expression -> NO .)
    TYPE            reduce using rule 33 (expression -> NO .)
    DATATYPE        reduce using rule 33 (expression -> NO .)
    LPAREN          reduce using rule 33 (expression -> NO .)
    YES             reduce using rule 33 (expression -> NO .)
    NO              reduce using rule 33 (expression -> NO .)
    NUMBER          reduce using rule 33 (expression -> NO .)
    IDENTIFIER      reduce using rule 33 (expression -> NO .)
    TEXT            reduce using rule 33 (expression -> NO .)
    INPUT           reduce using rule 33 (expression -> NO .)
    NOT             reduce using rule 33 (expression -> NO .)
    RANDOM          reduce using rule 33 (expression -> NO .)
    TO              reduce using rule 33 (expression -> NO .)
    FROM            reduce using rule 33 (expression -> NO .)


state 21

    (44) expression -> comp_expr .
    (40) comp_expr -> comp_expr . AND comp_expr
    (41) comp_expr -> comp_expr . OR comp_expr

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    PLUS            reduce using rule 44 (expression -> comp_expr .)
    MINUS           reduce using rule 44 (expression -> comp_expr .)
    TIMES           reduce using rule 44 (expression -> comp_expr .)
    DIVIDE          reduce using rule 44 (expression -> comp_expr .)
    POWER           reduce using rule 44 (expression -> comp_expr .)
    EQ              reduce using rule 44 (expression -> comp_expr .)
    GT              reduce using rule 44 (expression -> comp_expr .)
    LT              reduce using rule 44 (expression -> comp_expr .)
    GE              reduce using rule 44 (expression -> comp_expr .)
    LE              reduce using rule 44 (expression -> comp_expr .)
    NE              reduce using rule 44 (expression -> comp_expr .)
    IN              reduce using rule 44 (expression -> comp_expr .)
    OUTPUT          reduce using rule 44 (expression -> comp_expr .)
    REPEAT          reduce using rule 44 (expression -> comp_expr .)
    PAUSE           reduce using rule 44 (expression -> comp_expr .)
    FUNCTION        reduce using rule 44 (expression -> comp_expr .)
    WHILE           reduce using rule 44 (expression -> comp_expr .)
    FOREVER         reduce using rule 44 (expression -> comp_expr .)
    EXIT            reduce using rule 44 (expression -> comp_expr .)
    SET             reduce using rule 44 (expression -> comp_expr .)
    IF              reduce using rule 44 (expression -> comp_expr .)
    $end            reduce using rule 44 (expression -> comp_expr .)
    UNTIL           reduce using rule 44 (expression -> comp_expr .)
    END             reduce using rule 44 (expression -> comp_expr .)
    ELSE            reduce using rule 44 (expression -> comp_expr .)
    DO              reduce using rule 44 (expression -> comp_expr .)
    THEN            reduce using rule 44 (expression -> comp_expr .)
    RPAREN          reduce using rule 44 (expression -> comp_expr .)
    TYPE            reduce using rule 44 (expression -> comp_expr .)
    DATATYPE        reduce using rule 44 (expression -> comp_expr .)
    LPAREN          reduce using rule 44 (expression -> comp_expr .)
    YES             reduce using rule 44 (expression -> comp_expr .)
    NO              reduce using rule 44 (expression -> comp_expr .)
    NUMBER          reduce using rule 44 (expression -> comp_expr .)
    IDENTIFIER      reduce using rule 44 (expression -> comp_expr .)
    TEXT            reduce using rule 44 (expression -> comp_expr .)
    INPUT           reduce using rule 44 (expression -> comp_expr .)
    NOT             reduce using rule 44 (expression -> comp_expr .)
    RANDOM          reduce using rule 44 (expression -> comp_expr .)
    TO              reduce using rule 44 (expression -> comp_expr .)
    FROM            reduce using rule 44 (expression -> comp_expr .)
    AND             shift and go to state 56
    OR              shift and go to state 57

  ! AND             [ reduce using rule 44 (expression -> comp_expr .) ]
  ! OR              [ reduce using rule 44 (expression -> comp_expr .) ]


state 22

    (45) expression -> NUMBER .

    PLUS            reduce using rule 45 (expression -> NUMBER .)
    MINUS           reduce using rule 45 (expression -> NUMBER .)
    TIMES           reduce using rule 45 (expression -> NUMBER .)
    DIVIDE          reduce using rule 45 (expression -> NUMBER .)
    POWER           reduce using rule 45 (expression -> NUMBER .)
    EQ              reduce using rule 45 (expression -> NUMBER .)
    GT              reduce using rule 45 (expression -> NUMBER .)
    LT              reduce using rule 45 (expression -> NUMBER .)
    GE              reduce using rule 45 (expression -> NUMBER .)
    LE              reduce using rule 45 (expression -> NUMBER .)
    NE              reduce using rule 45 (expression -> NUMBER .)
    IN              reduce using rule 45 (expression -> NUMBER .)
    OUTPUT          reduce using rule 45 (expression -> NUMBER .)
    REPEAT          reduce using rule 45 (expression -> NUMBER .)
    PAUSE           reduce using rule 45 (expression -> NUMBER .)
    FUNCTION        reduce using rule 45 (expression -> NUMBER .)
    WHILE           reduce using rule 45 (expression -> NUMBER .)
    FOREVER         reduce using rule 45 (expression -> NUMBER .)
    EXIT            reduce using rule 45 (expression -> NUMBER .)
    SET             reduce using rule 45 (expression -> NUMBER .)
    IF              reduce using rule 45 (expression -> NUMBER .)
    $end            reduce using rule 45 (expression -> NUMBER .)
    UNTIL           reduce using rule 45 (expression -> NUMBER .)
    END             reduce using rule 45 (expression -> NUMBER .)
    ELSE            reduce using rule 45 (expression -> NUMBER .)
    DO              reduce using rule 45 (expression -> NUMBER .)
    THEN            reduce using rule 45 (expression -> NUMBER .)
    RPAREN          reduce using rule 45 (expression -> NUMBER .)
    AND             reduce using rule 45 (expression -> NUMBER .)
    OR              reduce using rule 45 (expression -> NUMBER .)
    TYPE            reduce using rule 45 (expression -> NUMBER .)
    DATATYPE        reduce using rule 45 (expression -> NUMBER .)
    LPAREN          reduce using rule 45 (expression -> NUMBER .)
    YES             reduce using rule 45 (expression -> NUMBER .)
    NO              reduce using rule 45 (expression -> NUMBER .)
    NUMBER          reduce using rule 45 (expression -> NUMBER .)
    IDENTIFIER      reduce using rule 45 (expression -> NUMBER .)
    TEXT            reduce using rule 45 (expression -> NUMBER .)
    INPUT           reduce using rule 45 (expression -> NUMBER .)
    NOT             reduce using rule 45 (expression -> NUMBER .)
    RANDOM          reduce using rule 45 (expression -> NUMBER .)
    TO              reduce using rule 45 (expression -> NUMBER .)
    FROM            reduce using rule 45 (expression -> NUMBER .)


state 23

    (46) expression -> IDENTIFIER .

    PLUS            reduce using rule 46 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 46 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 46 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 46 (expression -> IDENTIFIER .)
    POWER           reduce using rule 46 (expression -> IDENTIFIER .)
    EQ              reduce using rule 46 (expression -> IDENTIFIER .)
    GT              reduce using rule 46 (expression -> IDENTIFIER .)
    LT              reduce using rule 46 (expression -> IDENTIFIER .)
    GE              reduce using rule 46 (expression -> IDENTIFIER .)
    LE              reduce using rule 46 (expression -> IDENTIFIER .)
    NE              reduce using rule 46 (expression -> IDENTIFIER .)
    IN              reduce using rule 46 (expression -> IDENTIFIER .)
    OUTPUT          reduce using rule 46 (expression -> IDENTIFIER .)
    REPEAT          reduce using rule 46 (expression -> IDENTIFIER .)
    PAUSE           reduce using rule 46 (expression -> IDENTIFIER .)
    FUNCTION        reduce using rule 46 (expression -> IDENTIFIER .)
    WHILE           reduce using rule 46 (expression -> IDENTIFIER .)
    FOREVER         reduce using rule 46 (expression -> IDENTIFIER .)
    EXIT            reduce using rule 46 (expression -> IDENTIFIER .)
    SET             reduce using rule 46 (expression -> IDENTIFIER .)
    IF              reduce using rule 46 (expression -> IDENTIFIER .)
    $end            reduce using rule 46 (expression -> IDENTIFIER .)
    UNTIL           reduce using rule 46 (expression -> IDENTIFIER .)
    END             reduce using rule 46 (expression -> IDENTIFIER .)
    ELSE            reduce using rule 46 (expression -> IDENTIFIER .)
    DO              reduce using rule 46 (expression -> IDENTIFIER .)
    THEN            reduce using rule 46 (expression -> IDENTIFIER .)
    RPAREN          reduce using rule 46 (expression -> IDENTIFIER .)
    AND             reduce using rule 46 (expression -> IDENTIFIER .)
    OR              reduce using rule 46 (expression -> IDENTIFIER .)
    TYPE            reduce using rule 46 (expression -> IDENTIFIER .)
    DATATYPE        reduce using rule 46 (expression -> IDENTIFIER .)
    LPAREN          reduce using rule 46 (expression -> IDENTIFIER .)
    YES             reduce using rule 46 (expression -> IDENTIFIER .)
    NO              reduce using rule 46 (expression -> IDENTIFIER .)
    NUMBER          reduce using rule 46 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 46 (expression -> IDENTIFIER .)
    TEXT            reduce using rule 46 (expression -> IDENTIFIER .)
    INPUT           reduce using rule 46 (expression -> IDENTIFIER .)
    NOT             reduce using rule 46 (expression -> IDENTIFIER .)
    RANDOM          reduce using rule 46 (expression -> IDENTIFIER .)
    TO              reduce using rule 46 (expression -> IDENTIFIER .)
    FROM            reduce using rule 46 (expression -> IDENTIFIER .)


state 24

    (47) expression -> random_statement .

    PLUS            reduce using rule 47 (expression -> random_statement .)
    MINUS           reduce using rule 47 (expression -> random_statement .)
    TIMES           reduce using rule 47 (expression -> random_statement .)
    DIVIDE          reduce using rule 47 (expression -> random_statement .)
    POWER           reduce using rule 47 (expression -> random_statement .)
    EQ              reduce using rule 47 (expression -> random_statement .)
    GT              reduce using rule 47 (expression -> random_statement .)
    LT              reduce using rule 47 (expression -> random_statement .)
    GE              reduce using rule 47 (expression -> random_statement .)
    LE              reduce using rule 47 (expression -> random_statement .)
    NE              reduce using rule 47 (expression -> random_statement .)
    IN              reduce using rule 47 (expression -> random_statement .)
    OUTPUT          reduce using rule 47 (expression -> random_statement .)
    REPEAT          reduce using rule 47 (expression -> random_statement .)
    PAUSE           reduce using rule 47 (expression -> random_statement .)
    FUNCTION        reduce using rule 47 (expression -> random_statement .)
    WHILE           reduce using rule 47 (expression -> random_statement .)
    FOREVER         reduce using rule 47 (expression -> random_statement .)
    EXIT            reduce using rule 47 (expression -> random_statement .)
    SET             reduce using rule 47 (expression -> random_statement .)
    IF              reduce using rule 47 (expression -> random_statement .)
    $end            reduce using rule 47 (expression -> random_statement .)
    UNTIL           reduce using rule 47 (expression -> random_statement .)
    END             reduce using rule 47 (expression -> random_statement .)
    ELSE            reduce using rule 47 (expression -> random_statement .)
    DO              reduce using rule 47 (expression -> random_statement .)
    THEN            reduce using rule 47 (expression -> random_statement .)
    RPAREN          reduce using rule 47 (expression -> random_statement .)
    AND             reduce using rule 47 (expression -> random_statement .)
    OR              reduce using rule 47 (expression -> random_statement .)
    TYPE            reduce using rule 47 (expression -> random_statement .)
    DATATYPE        reduce using rule 47 (expression -> random_statement .)
    LPAREN          reduce using rule 47 (expression -> random_statement .)
    YES             reduce using rule 47 (expression -> random_statement .)
    NO              reduce using rule 47 (expression -> random_statement .)
    NUMBER          reduce using rule 47 (expression -> random_statement .)
    IDENTIFIER      reduce using rule 47 (expression -> random_statement .)
    TEXT            reduce using rule 47 (expression -> random_statement .)
    INPUT           reduce using rule 47 (expression -> random_statement .)
    NOT             reduce using rule 47 (expression -> random_statement .)
    RANDOM          reduce using rule 47 (expression -> random_statement .)
    TO              reduce using rule 47 (expression -> random_statement .)
    FROM            reduce using rule 47 (expression -> random_statement .)


state 25

    (48) expression -> TEXT .
    (6) ask -> TEXT . EXPECTING INPUT AND DATATYPE

    PLUS            reduce using rule 48 (expression -> TEXT .)
    MINUS           reduce using rule 48 (expression -> TEXT .)
    TIMES           reduce using rule 48 (expression -> TEXT .)
    DIVIDE          reduce using rule 48 (expression -> TEXT .)
    POWER           reduce using rule 48 (expression -> TEXT .)
    EQ              reduce using rule 48 (expression -> TEXT .)
    GT              reduce using rule 48 (expression -> TEXT .)
    LT              reduce using rule 48 (expression -> TEXT .)
    GE              reduce using rule 48 (expression -> TEXT .)
    LE              reduce using rule 48 (expression -> TEXT .)
    NE              reduce using rule 48 (expression -> TEXT .)
    IN              reduce using rule 48 (expression -> TEXT .)
    OUTPUT          reduce using rule 48 (expression -> TEXT .)
    REPEAT          reduce using rule 48 (expression -> TEXT .)
    PAUSE           reduce using rule 48 (expression -> TEXT .)
    FUNCTION        reduce using rule 48 (expression -> TEXT .)
    WHILE           reduce using rule 48 (expression -> TEXT .)
    FOREVER         reduce using rule 48 (expression -> TEXT .)
    EXIT            reduce using rule 48 (expression -> TEXT .)
    SET             reduce using rule 48 (expression -> TEXT .)
    IF              reduce using rule 48 (expression -> TEXT .)
    $end            reduce using rule 48 (expression -> TEXT .)
    UNTIL           reduce using rule 48 (expression -> TEXT .)
    END             reduce using rule 48 (expression -> TEXT .)
    ELSE            reduce using rule 48 (expression -> TEXT .)
    TYPE            reduce using rule 48 (expression -> TEXT .)
    DATATYPE        reduce using rule 48 (expression -> TEXT .)
    LPAREN          reduce using rule 48 (expression -> TEXT .)
    YES             reduce using rule 48 (expression -> TEXT .)
    NO              reduce using rule 48 (expression -> TEXT .)
    NUMBER          reduce using rule 48 (expression -> TEXT .)
    IDENTIFIER      reduce using rule 48 (expression -> TEXT .)
    TEXT            reduce using rule 48 (expression -> TEXT .)
    INPUT           reduce using rule 48 (expression -> TEXT .)
    NOT             reduce using rule 48 (expression -> TEXT .)
    RANDOM          reduce using rule 48 (expression -> TEXT .)
    EXPECTING       shift and go to state 58


state 26

    (49) expression -> INPUT .

    PLUS            reduce using rule 49 (expression -> INPUT .)
    MINUS           reduce using rule 49 (expression -> INPUT .)
    TIMES           reduce using rule 49 (expression -> INPUT .)
    DIVIDE          reduce using rule 49 (expression -> INPUT .)
    POWER           reduce using rule 49 (expression -> INPUT .)
    EQ              reduce using rule 49 (expression -> INPUT .)
    GT              reduce using rule 49 (expression -> INPUT .)
    LT              reduce using rule 49 (expression -> INPUT .)
    GE              reduce using rule 49 (expression -> INPUT .)
    LE              reduce using rule 49 (expression -> INPUT .)
    NE              reduce using rule 49 (expression -> INPUT .)
    IN              reduce using rule 49 (expression -> INPUT .)
    OUTPUT          reduce using rule 49 (expression -> INPUT .)
    REPEAT          reduce using rule 49 (expression -> INPUT .)
    PAUSE           reduce using rule 49 (expression -> INPUT .)
    FUNCTION        reduce using rule 49 (expression -> INPUT .)
    WHILE           reduce using rule 49 (expression -> INPUT .)
    FOREVER         reduce using rule 49 (expression -> INPUT .)
    EXIT            reduce using rule 49 (expression -> INPUT .)
    SET             reduce using rule 49 (expression -> INPUT .)
    IF              reduce using rule 49 (expression -> INPUT .)
    $end            reduce using rule 49 (expression -> INPUT .)
    UNTIL           reduce using rule 49 (expression -> INPUT .)
    END             reduce using rule 49 (expression -> INPUT .)
    ELSE            reduce using rule 49 (expression -> INPUT .)
    DO              reduce using rule 49 (expression -> INPUT .)
    THEN            reduce using rule 49 (expression -> INPUT .)
    RPAREN          reduce using rule 49 (expression -> INPUT .)
    AND             reduce using rule 49 (expression -> INPUT .)
    OR              reduce using rule 49 (expression -> INPUT .)
    TYPE            reduce using rule 49 (expression -> INPUT .)
    DATATYPE        reduce using rule 49 (expression -> INPUT .)
    LPAREN          reduce using rule 49 (expression -> INPUT .)
    YES             reduce using rule 49 (expression -> INPUT .)
    NO              reduce using rule 49 (expression -> INPUT .)
    NUMBER          reduce using rule 49 (expression -> INPUT .)
    IDENTIFIER      reduce using rule 49 (expression -> INPUT .)
    TEXT            reduce using rule 49 (expression -> INPUT .)
    INPUT           reduce using rule 49 (expression -> INPUT .)
    NOT             reduce using rule 49 (expression -> INPUT .)
    RANDOM          reduce using rule 49 (expression -> INPUT .)
    TO              reduce using rule 49 (expression -> INPUT .)
    FROM            reduce using rule 49 (expression -> INPUT .)


state 27

    (42) comp_expr -> NOT . expression
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression POWER expression
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . YES
    (33) expression -> . NO
    (44) expression -> . comp_expr
    (45) expression -> . NUMBER
    (46) expression -> . IDENTIFIER
    (47) expression -> . random_statement
    (48) expression -> . TEXT
    (49) expression -> . INPUT
    (34) comp_expr -> . expression EQ expression
    (35) comp_expr -> . expression GT expression
    (36) comp_expr -> . expression LT expression
    (37) comp_expr -> . expression GE expression
    (38) comp_expr -> . expression LE expression
    (39) comp_expr -> . expression NE expression
    (40) comp_expr -> . comp_expr AND comp_expr
    (41) comp_expr -> . comp_expr OR comp_expr
    (42) comp_expr -> . NOT expression
    (43) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LPAREN          shift and go to state 18
    YES             shift and go to state 19
    NO              shift and go to state 20
    NUMBER          shift and go to state 22
    IDENTIFIER      shift and go to state 23
    TEXT            shift and go to state 35
    INPUT           shift and go to state 26
    NOT             shift and go to state 27
    RANDOM          shift and go to state 28

    expression                     shift and go to state 59
    comp_expr                      shift and go to state 21
    random_statement               shift and go to state 24

state 28

    (7) random_statement -> RANDOM . DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 60


state 29

    (9) statement -> var_assignment TO . expression
    (11) statement -> var_assignment TO . ask
    (12) statement -> var_assignment TO . items type_stmt
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression POWER expression
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . YES
    (33) expression -> . NO
    (44) expression -> . comp_expr
    (45) expression -> . NUMBER
    (46) expression -> . IDENTIFIER
    (47) expression -> . random_statement
    (48) expression -> . TEXT
    (49) expression -> . INPUT
    (6) ask -> . TEXT EXPECTING INPUT AND DATATYPE
    (24) items -> . expression
    (25) items -> . items expression
    (34) comp_expr -> . expression EQ expression
    (35) comp_expr -> . expression GT expression
    (36) comp_expr -> . expression LT expression
    (37) comp_expr -> . expression GE expression
    (38) comp_expr -> . expression LE expression
    (39) comp_expr -> . expression NE expression
    (40) comp_expr -> . comp_expr AND comp_expr
    (41) comp_expr -> . comp_expr OR comp_expr
    (42) comp_expr -> . NOT expression
    (43) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LPAREN          shift and go to state 18
    YES             shift and go to state 19
    NO              shift and go to state 20
    NUMBER          shift and go to state 22
    IDENTIFIER      shift and go to state 23
    TEXT            shift and go to state 25
    INPUT           shift and go to state 26
    NOT             shift and go to state 27
    RANDOM          shift and go to state 28

    expression                     shift and go to state 61
    ask                            shift and go to state 62
    items                          shift and go to state 63
    comp_expr                      shift and go to state 21
    random_statement               shift and go to state 24

state 30

    (14) statement -> if_then end_statement .

    OUTPUT          reduce using rule 14 (statement -> if_then end_statement .)
    REPEAT          reduce using rule 14 (statement -> if_then end_statement .)
    PAUSE           reduce using rule 14 (statement -> if_then end_statement .)
    FUNCTION        reduce using rule 14 (statement -> if_then end_statement .)
    WHILE           reduce using rule 14 (statement -> if_then end_statement .)
    FOREVER         reduce using rule 14 (statement -> if_then end_statement .)
    EXIT            reduce using rule 14 (statement -> if_then end_statement .)
    SET             reduce using rule 14 (statement -> if_then end_statement .)
    IF              reduce using rule 14 (statement -> if_then end_statement .)
    $end            reduce using rule 14 (statement -> if_then end_statement .)
    UNTIL           reduce using rule 14 (statement -> if_then end_statement .)
    END             reduce using rule 14 (statement -> if_then end_statement .)
    ELSE            reduce using rule 14 (statement -> if_then end_statement .)


state 31

    (15) statement -> if_then ELSE . THEN statements end_statement

    THEN            shift and go to state 64


state 32

    (3) end_statement -> END .

    OUTPUT          reduce using rule 3 (end_statement -> END .)
    REPEAT          reduce using rule 3 (end_statement -> END .)
    PAUSE           reduce using rule 3 (end_statement -> END .)
    FUNCTION        reduce using rule 3 (end_statement -> END .)
    WHILE           reduce using rule 3 (end_statement -> END .)
    FOREVER         reduce using rule 3 (end_statement -> END .)
    EXIT            reduce using rule 3 (end_statement -> END .)
    SET             reduce using rule 3 (end_statement -> END .)
    IF              reduce using rule 3 (end_statement -> END .)
    $end            reduce using rule 3 (end_statement -> END .)
    UNTIL           reduce using rule 3 (end_statement -> END .)
    END             reduce using rule 3 (end_statement -> END .)
    ELSE            reduce using rule 3 (end_statement -> END .)


state 33

    (16) statement -> REPEAT statements . UNTIL expression
    (2) statements -> statements . statement
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . WHILE expression DO statements end_statement
    (21) statement -> . FOREVER DO statements end_statement
    (22) statement -> . EXIT LOOP
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    UNTIL           shift and go to state 65
    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    FOREVER         shift and go to state 10
    EXIT            shift and go to state 11
    SET             shift and go to state 12
    IF              shift and go to state 13

    statement                      shift and go to state 14
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 34

    (17) statement -> PAUSE expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . POWER expression
    (34) comp_expr -> expression . EQ expression
    (35) comp_expr -> expression . GT expression
    (36) comp_expr -> expression . LT expression
    (37) comp_expr -> expression . GE expression
    (38) comp_expr -> expression . LE expression
    (39) comp_expr -> expression . NE expression
    (43) comp_expr -> expression . IN expression

    OUTPUT          reduce using rule 17 (statement -> PAUSE expression .)
    REPEAT          reduce using rule 17 (statement -> PAUSE expression .)
    PAUSE           reduce using rule 17 (statement -> PAUSE expression .)
    FUNCTION        reduce using rule 17 (statement -> PAUSE expression .)
    WHILE           reduce using rule 17 (statement -> PAUSE expression .)
    FOREVER         reduce using rule 17 (statement -> PAUSE expression .)
    EXIT            reduce using rule 17 (statement -> PAUSE expression .)
    SET             reduce using rule 17 (statement -> PAUSE expression .)
    IF              reduce using rule 17 (statement -> PAUSE expression .)
    $end            reduce using rule 17 (statement -> PAUSE expression .)
    UNTIL           reduce using rule 17 (statement -> PAUSE expression .)
    END             reduce using rule 17 (statement -> PAUSE expression .)
    ELSE            reduce using rule 17 (statement -> PAUSE expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    POWER           shift and go to state 46
    EQ              shift and go to state 47
    GT              shift and go to state 48
    LT              shift and go to state 49
    GE              shift and go to state 50
    LE              shift and go to state 51
    NE              shift and go to state 52
    IN              shift and go to state 53


state 35

    (48) expression -> TEXT .

    PLUS            reduce using rule 48 (expression -> TEXT .)
    MINUS           reduce using rule 48 (expression -> TEXT .)
    TIMES           reduce using rule 48 (expression -> TEXT .)
    DIVIDE          reduce using rule 48 (expression -> TEXT .)
    POWER           reduce using rule 48 (expression -> TEXT .)
    EQ              reduce using rule 48 (expression -> TEXT .)
    GT              reduce using rule 48 (expression -> TEXT .)
    LT              reduce using rule 48 (expression -> TEXT .)
    GE              reduce using rule 48 (expression -> TEXT .)
    LE              reduce using rule 48 (expression -> TEXT .)
    NE              reduce using rule 48 (expression -> TEXT .)
    IN              reduce using rule 48 (expression -> TEXT .)
    OUTPUT          reduce using rule 48 (expression -> TEXT .)
    REPEAT          reduce using rule 48 (expression -> TEXT .)
    PAUSE           reduce using rule 48 (expression -> TEXT .)
    FUNCTION        reduce using rule 48 (expression -> TEXT .)
    WHILE           reduce using rule 48 (expression -> TEXT .)
    FOREVER         reduce using rule 48 (expression -> TEXT .)
    EXIT            reduce using rule 48 (expression -> TEXT .)
    SET             reduce using rule 48 (expression -> TEXT .)
    IF              reduce using rule 48 (expression -> TEXT .)
    $end            reduce using rule 48 (expression -> TEXT .)
    UNTIL           reduce using rule 48 (expression -> TEXT .)
    END             reduce using rule 48 (expression -> TEXT .)
    ELSE            reduce using rule 48 (expression -> TEXT .)
    DO              reduce using rule 48 (expression -> TEXT .)
    THEN            reduce using rule 48 (expression -> TEXT .)
    RPAREN          reduce using rule 48 (expression -> TEXT .)
    AND             reduce using rule 48 (expression -> TEXT .)
    OR              reduce using rule 48 (expression -> TEXT .)
    TYPE            reduce using rule 48 (expression -> TEXT .)
    DATATYPE        reduce using rule 48 (expression -> TEXT .)
    LPAREN          reduce using rule 48 (expression -> TEXT .)
    YES             reduce using rule 48 (expression -> TEXT .)
    NO              reduce using rule 48 (expression -> TEXT .)
    NUMBER          reduce using rule 48 (expression -> TEXT .)
    IDENTIFIER      reduce using rule 48 (expression -> TEXT .)
    TEXT            reduce using rule 48 (expression -> TEXT .)
    INPUT           reduce using rule 48 (expression -> TEXT .)
    NOT             reduce using rule 48 (expression -> TEXT .)
    RANDOM          reduce using rule 48 (expression -> TEXT .)
    TO              reduce using rule 48 (expression -> TEXT .)
    FROM            reduce using rule 48 (expression -> TEXT .)


state 36

    (19) statement -> FUNCTION IDENTIFIER . MEANS statements end_statement

    MEANS           shift and go to state 66


state 37

    (20) statement -> WHILE expression . DO statements end_statement
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . POWER expression
    (34) comp_expr -> expression . EQ expression
    (35) comp_expr -> expression . GT expression
    (36) comp_expr -> expression . LT expression
    (37) comp_expr -> expression . GE expression
    (38) comp_expr -> expression . LE expression
    (39) comp_expr -> expression . NE expression
    (43) comp_expr -> expression . IN expression

    DO              shift and go to state 67
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    POWER           shift and go to state 46
    EQ              shift and go to state 47
    GT              shift and go to state 48
    LT              shift and go to state 49
    GE              shift and go to state 50
    LE              shift and go to state 51
    NE              shift and go to state 52
    IN              shift and go to state 53


state 38

    (21) statement -> FOREVER DO . statements end_statement
    (1) statements -> . statement
    (2) statements -> . statements statement
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . WHILE expression DO statements end_statement
    (21) statement -> . FOREVER DO statements end_statement
    (22) statement -> . EXIT LOOP
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    FOREVER         shift and go to state 10
    EXIT            shift and go to state 11
    SET             shift and go to state 12
    IF              shift and go to state 13

    statements                     shift and go to state 68
    statement                      shift and go to state 2
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 39

    (22) statement -> EXIT LOOP .

    OUTPUT          reduce using rule 22 (statement -> EXIT LOOP .)
    REPEAT          reduce using rule 22 (statement -> EXIT LOOP .)
    PAUSE           reduce using rule 22 (statement -> EXIT LOOP .)
    FUNCTION        reduce using rule 22 (statement -> EXIT LOOP .)
    WHILE           reduce using rule 22 (statement -> EXIT LOOP .)
    FOREVER         reduce using rule 22 (statement -> EXIT LOOP .)
    EXIT            reduce using rule 22 (statement -> EXIT LOOP .)
    SET             reduce using rule 22 (statement -> EXIT LOOP .)
    IF              reduce using rule 22 (statement -> EXIT LOOP .)
    $end            reduce using rule 22 (statement -> EXIT LOOP .)
    UNTIL           reduce using rule 22 (statement -> EXIT LOOP .)
    END             reduce using rule 22 (statement -> EXIT LOOP .)
    ELSE            reduce using rule 22 (statement -> EXIT LOOP .)


state 40

    (8) var_assignment -> SET IDENTIFIER .

    TO              reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    OUTPUT          reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    REPEAT          reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    PAUSE           reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    FUNCTION        reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    WHILE           reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    FOREVER         reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    EXIT            reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    SET             reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    IF              reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    $end            reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    UNTIL           reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    END             reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    ELSE            reduce using rule 8 (var_assignment -> SET IDENTIFIER .)


state 41

    (13) if_then -> IF expression . THEN statements
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . POWER expression
    (34) comp_expr -> expression . EQ expression
    (35) comp_expr -> expression . GT expression
    (36) comp_expr -> expression . LT expression
    (37) comp_expr -> expression . GE expression
    (38) comp_expr -> expression . LE expression
    (39) comp_expr -> expression . NE expression
    (43) comp_expr -> expression . IN expression

    THEN            shift and go to state 69
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    POWER           shift and go to state 46
    EQ              shift and go to state 47
    GT              shift and go to state 48
    LT              shift and go to state 49
    GE              shift and go to state 50
    LE              shift and go to state 51
    NE              shift and go to state 52
    IN              shift and go to state 53


state 42

    (26) expression -> expression PLUS . expression
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression POWER expression
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . YES
    (33) expression -> . NO
    (44) expression -> . comp_expr
    (45) expression -> . NUMBER
    (46) expression -> . IDENTIFIER
    (47) expression -> . random_statement
    (48) expression -> . TEXT
    (49) expression -> . INPUT
    (34) comp_expr -> . expression EQ expression
    (35) comp_expr -> . expression GT expression
    (36) comp_expr -> . expression LT expression
    (37) comp_expr -> . expression GE expression
    (38) comp_expr -> . expression LE expression
    (39) comp_expr -> . expression NE expression
    (40) comp_expr -> . comp_expr AND comp_expr
    (41) comp_expr -> . comp_expr OR comp_expr
    (42) comp_expr -> . NOT expression
    (43) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LPAREN          shift and go to state 18
    YES             shift and go to state 19
    NO              shift and go to state 20
    NUMBER          shift and go to state 22
    IDENTIFIER      shift and go to state 23
    TEXT            shift and go to state 35
    INPUT           shift and go to state 26
    NOT             shift and go to state 27
    RANDOM          shift and go to state 28

    expression                     shift and go to state 70
    comp_expr                      shift and go to state 21
    random_statement               shift and go to state 24

state 43

    (27) expression -> expression MINUS . expression
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression POWER expression
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . YES
    (33) expression -> . NO
    (44) expression -> . comp_expr
    (45) expression -> . NUMBER
    (46) expression -> . IDENTIFIER
    (47) expression -> . random_statement
    (48) expression -> . TEXT
    (49) expression -> . INPUT
    (34) comp_expr -> . expression EQ expression
    (35) comp_expr -> . expression GT expression
    (36) comp_expr -> . expression LT expression
    (37) comp_expr -> . expression GE expression
    (38) comp_expr -> . expression LE expression
    (39) comp_expr -> . expression NE expression
    (40) comp_expr -> . comp_expr AND comp_expr
    (41) comp_expr -> . comp_expr OR comp_expr
    (42) comp_expr -> . NOT expression
    (43) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LPAREN          shift and go to state 18
    YES             shift and go to state 19
    NO              shift and go to state 20
    NUMBER          shift and go to state 22
    IDENTIFIER      shift and go to state 23
    TEXT            shift and go to state 35
    INPUT           shift and go to state 26
    NOT             shift and go to state 27
    RANDOM          shift and go to state 28

    expression                     shift and go to state 71
    comp_expr                      shift and go to state 21
    random_statement               shift and go to state 24

state 44

    (28) expression -> expression TIMES . expression
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression POWER expression
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . YES
    (33) expression -> . NO
    (44) expression -> . comp_expr
    (45) expression -> . NUMBER
    (46) expression -> . IDENTIFIER
    (47) expression -> . random_statement
    (48) expression -> . TEXT
    (49) expression -> . INPUT
    (34) comp_expr -> . expression EQ expression
    (35) comp_expr -> . expression GT expression
    (36) comp_expr -> . expression LT expression
    (37) comp_expr -> . expression GE expression
    (38) comp_expr -> . expression LE expression
    (39) comp_expr -> . expression NE expression
    (40) comp_expr -> . comp_expr AND comp_expr
    (41) comp_expr -> . comp_expr OR comp_expr
    (42) comp_expr -> . NOT expression
    (43) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LPAREN          shift and go to state 18
    YES             shift and go to state 19
    NO              shift and go to state 20
    NUMBER          shift and go to state 22
    IDENTIFIER      shift and go to state 23
    TEXT            shift and go to state 35
    INPUT           shift and go to state 26
    NOT             shift and go to state 27
    RANDOM          shift and go to state 28

    expression                     shift and go to state 72
    comp_expr                      shift and go to state 21
    random_statement               shift and go to state 24

state 45

    (29) expression -> expression DIVIDE . expression
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression POWER expression
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . YES
    (33) expression -> . NO
    (44) expression -> . comp_expr
    (45) expression -> . NUMBER
    (46) expression -> . IDENTIFIER
    (47) expression -> . random_statement
    (48) expression -> . TEXT
    (49) expression -> . INPUT
    (34) comp_expr -> . expression EQ expression
    (35) comp_expr -> . expression GT expression
    (36) comp_expr -> . expression LT expression
    (37) comp_expr -> . expression GE expression
    (38) comp_expr -> . expression LE expression
    (39) comp_expr -> . expression NE expression
    (40) comp_expr -> . comp_expr AND comp_expr
    (41) comp_expr -> . comp_expr OR comp_expr
    (42) comp_expr -> . NOT expression
    (43) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LPAREN          shift and go to state 18
    YES             shift and go to state 19
    NO              shift and go to state 20
    NUMBER          shift and go to state 22
    IDENTIFIER      shift and go to state 23
    TEXT            shift and go to state 35
    INPUT           shift and go to state 26
    NOT             shift and go to state 27
    RANDOM          shift and go to state 28

    expression                     shift and go to state 73
    comp_expr                      shift and go to state 21
    random_statement               shift and go to state 24

state 46

    (30) expression -> expression POWER . expression
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression POWER expression
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . YES
    (33) expression -> . NO
    (44) expression -> . comp_expr
    (45) expression -> . NUMBER
    (46) expression -> . IDENTIFIER
    (47) expression -> . random_statement
    (48) expression -> . TEXT
    (49) expression -> . INPUT
    (34) comp_expr -> . expression EQ expression
    (35) comp_expr -> . expression GT expression
    (36) comp_expr -> . expression LT expression
    (37) comp_expr -> . expression GE expression
    (38) comp_expr -> . expression LE expression
    (39) comp_expr -> . expression NE expression
    (40) comp_expr -> . comp_expr AND comp_expr
    (41) comp_expr -> . comp_expr OR comp_expr
    (42) comp_expr -> . NOT expression
    (43) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LPAREN          shift and go to state 18
    YES             shift and go to state 19
    NO              shift and go to state 20
    NUMBER          shift and go to state 22
    IDENTIFIER      shift and go to state 23
    TEXT            shift and go to state 35
    INPUT           shift and go to state 26
    NOT             shift and go to state 27
    RANDOM          shift and go to state 28

    expression                     shift and go to state 74
    comp_expr                      shift and go to state 21
    random_statement               shift and go to state 24

state 47

    (34) comp_expr -> expression EQ . expression
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression POWER expression
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . YES
    (33) expression -> . NO
    (44) expression -> . comp_expr
    (45) expression -> . NUMBER
    (46) expression -> . IDENTIFIER
    (47) expression -> . random_statement
    (48) expression -> . TEXT
    (49) expression -> . INPUT
    (34) comp_expr -> . expression EQ expression
    (35) comp_expr -> . expression GT expression
    (36) comp_expr -> . expression LT expression
    (37) comp_expr -> . expression GE expression
    (38) comp_expr -> . expression LE expression
    (39) comp_expr -> . expression NE expression
    (40) comp_expr -> . comp_expr AND comp_expr
    (41) comp_expr -> . comp_expr OR comp_expr
    (42) comp_expr -> . NOT expression
    (43) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LPAREN          shift and go to state 18
    YES             shift and go to state 19
    NO              shift and go to state 20
    NUMBER          shift and go to state 22
    IDENTIFIER      shift and go to state 23
    TEXT            shift and go to state 35
    INPUT           shift and go to state 26
    NOT             shift and go to state 27
    RANDOM          shift and go to state 28

    expression                     shift and go to state 75
    comp_expr                      shift and go to state 21
    random_statement               shift and go to state 24

state 48

    (35) comp_expr -> expression GT . expression
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression POWER expression
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . YES
    (33) expression -> . NO
    (44) expression -> . comp_expr
    (45) expression -> . NUMBER
    (46) expression -> . IDENTIFIER
    (47) expression -> . random_statement
    (48) expression -> . TEXT
    (49) expression -> . INPUT
    (34) comp_expr -> . expression EQ expression
    (35) comp_expr -> . expression GT expression
    (36) comp_expr -> . expression LT expression
    (37) comp_expr -> . expression GE expression
    (38) comp_expr -> . expression LE expression
    (39) comp_expr -> . expression NE expression
    (40) comp_expr -> . comp_expr AND comp_expr
    (41) comp_expr -> . comp_expr OR comp_expr
    (42) comp_expr -> . NOT expression
    (43) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LPAREN          shift and go to state 18
    YES             shift and go to state 19
    NO              shift and go to state 20
    NUMBER          shift and go to state 22
    IDENTIFIER      shift and go to state 23
    TEXT            shift and go to state 35
    INPUT           shift and go to state 26
    NOT             shift and go to state 27
    RANDOM          shift and go to state 28

    expression                     shift and go to state 76
    comp_expr                      shift and go to state 21
    random_statement               shift and go to state 24

state 49

    (36) comp_expr -> expression LT . expression
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression POWER expression
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . YES
    (33) expression -> . NO
    (44) expression -> . comp_expr
    (45) expression -> . NUMBER
    (46) expression -> . IDENTIFIER
    (47) expression -> . random_statement
    (48) expression -> . TEXT
    (49) expression -> . INPUT
    (34) comp_expr -> . expression EQ expression
    (35) comp_expr -> . expression GT expression
    (36) comp_expr -> . expression LT expression
    (37) comp_expr -> . expression GE expression
    (38) comp_expr -> . expression LE expression
    (39) comp_expr -> . expression NE expression
    (40) comp_expr -> . comp_expr AND comp_expr
    (41) comp_expr -> . comp_expr OR comp_expr
    (42) comp_expr -> . NOT expression
    (43) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LPAREN          shift and go to state 18
    YES             shift and go to state 19
    NO              shift and go to state 20
    NUMBER          shift and go to state 22
    IDENTIFIER      shift and go to state 23
    TEXT            shift and go to state 35
    INPUT           shift and go to state 26
    NOT             shift and go to state 27
    RANDOM          shift and go to state 28

    expression                     shift and go to state 77
    comp_expr                      shift and go to state 21
    random_statement               shift and go to state 24

state 50

    (37) comp_expr -> expression GE . expression
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression POWER expression
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . YES
    (33) expression -> . NO
    (44) expression -> . comp_expr
    (45) expression -> . NUMBER
    (46) expression -> . IDENTIFIER
    (47) expression -> . random_statement
    (48) expression -> . TEXT
    (49) expression -> . INPUT
    (34) comp_expr -> . expression EQ expression
    (35) comp_expr -> . expression GT expression
    (36) comp_expr -> . expression LT expression
    (37) comp_expr -> . expression GE expression
    (38) comp_expr -> . expression LE expression
    (39) comp_expr -> . expression NE expression
    (40) comp_expr -> . comp_expr AND comp_expr
    (41) comp_expr -> . comp_expr OR comp_expr
    (42) comp_expr -> . NOT expression
    (43) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LPAREN          shift and go to state 18
    YES             shift and go to state 19
    NO              shift and go to state 20
    NUMBER          shift and go to state 22
    IDENTIFIER      shift and go to state 23
    TEXT            shift and go to state 35
    INPUT           shift and go to state 26
    NOT             shift and go to state 27
    RANDOM          shift and go to state 28

    expression                     shift and go to state 78
    comp_expr                      shift and go to state 21
    random_statement               shift and go to state 24

state 51

    (38) comp_expr -> expression LE . expression
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression POWER expression
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . YES
    (33) expression -> . NO
    (44) expression -> . comp_expr
    (45) expression -> . NUMBER
    (46) expression -> . IDENTIFIER
    (47) expression -> . random_statement
    (48) expression -> . TEXT
    (49) expression -> . INPUT
    (34) comp_expr -> . expression EQ expression
    (35) comp_expr -> . expression GT expression
    (36) comp_expr -> . expression LT expression
    (37) comp_expr -> . expression GE expression
    (38) comp_expr -> . expression LE expression
    (39) comp_expr -> . expression NE expression
    (40) comp_expr -> . comp_expr AND comp_expr
    (41) comp_expr -> . comp_expr OR comp_expr
    (42) comp_expr -> . NOT expression
    (43) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LPAREN          shift and go to state 18
    YES             shift and go to state 19
    NO              shift and go to state 20
    NUMBER          shift and go to state 22
    IDENTIFIER      shift and go to state 23
    TEXT            shift and go to state 35
    INPUT           shift and go to state 26
    NOT             shift and go to state 27
    RANDOM          shift and go to state 28

    expression                     shift and go to state 79
    comp_expr                      shift and go to state 21
    random_statement               shift and go to state 24

state 52

    (39) comp_expr -> expression NE . expression
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression POWER expression
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . YES
    (33) expression -> . NO
    (44) expression -> . comp_expr
    (45) expression -> . NUMBER
    (46) expression -> . IDENTIFIER
    (47) expression -> . random_statement
    (48) expression -> . TEXT
    (49) expression -> . INPUT
    (34) comp_expr -> . expression EQ expression
    (35) comp_expr -> . expression GT expression
    (36) comp_expr -> . expression LT expression
    (37) comp_expr -> . expression GE expression
    (38) comp_expr -> . expression LE expression
    (39) comp_expr -> . expression NE expression
    (40) comp_expr -> . comp_expr AND comp_expr
    (41) comp_expr -> . comp_expr OR comp_expr
    (42) comp_expr -> . NOT expression
    (43) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LPAREN          shift and go to state 18
    YES             shift and go to state 19
    NO              shift and go to state 20
    NUMBER          shift and go to state 22
    IDENTIFIER      shift and go to state 23
    TEXT            shift and go to state 35
    INPUT           shift and go to state 26
    NOT             shift and go to state 27
    RANDOM          shift and go to state 28

    expression                     shift and go to state 80
    comp_expr                      shift and go to state 21
    random_statement               shift and go to state 24

state 53

    (43) comp_expr -> expression IN . expression
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression POWER expression
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . YES
    (33) expression -> . NO
    (44) expression -> . comp_expr
    (45) expression -> . NUMBER
    (46) expression -> . IDENTIFIER
    (47) expression -> . random_statement
    (48) expression -> . TEXT
    (49) expression -> . INPUT
    (34) comp_expr -> . expression EQ expression
    (35) comp_expr -> . expression GT expression
    (36) comp_expr -> . expression LT expression
    (37) comp_expr -> . expression GE expression
    (38) comp_expr -> . expression LE expression
    (39) comp_expr -> . expression NE expression
    (40) comp_expr -> . comp_expr AND comp_expr
    (41) comp_expr -> . comp_expr OR comp_expr
    (42) comp_expr -> . NOT expression
    (43) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LPAREN          shift and go to state 18
    YES             shift and go to state 19
    NO              shift and go to state 20
    NUMBER          shift and go to state 22
    IDENTIFIER      shift and go to state 23
    TEXT            shift and go to state 35
    INPUT           shift and go to state 26
    NOT             shift and go to state 27
    RANDOM          shift and go to state 28

    expression                     shift and go to state 81
    comp_expr                      shift and go to state 21
    random_statement               shift and go to state 24

state 54

    (23) expression -> DATATYPE FROM . expression TO expression FROM expression
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression POWER expression
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . YES
    (33) expression -> . NO
    (44) expression -> . comp_expr
    (45) expression -> . NUMBER
    (46) expression -> . IDENTIFIER
    (47) expression -> . random_statement
    (48) expression -> . TEXT
    (49) expression -> . INPUT
    (34) comp_expr -> . expression EQ expression
    (35) comp_expr -> . expression GT expression
    (36) comp_expr -> . expression LT expression
    (37) comp_expr -> . expression GE expression
    (38) comp_expr -> . expression LE expression
    (39) comp_expr -> . expression NE expression
    (40) comp_expr -> . comp_expr AND comp_expr
    (41) comp_expr -> . comp_expr OR comp_expr
    (42) comp_expr -> . NOT expression
    (43) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LPAREN          shift and go to state 18
    YES             shift and go to state 19
    NO              shift and go to state 20
    NUMBER          shift and go to state 22
    IDENTIFIER      shift and go to state 23
    TEXT            shift and go to state 35
    INPUT           shift and go to state 26
    NOT             shift and go to state 27
    RANDOM          shift and go to state 28

    expression                     shift and go to state 82
    comp_expr                      shift and go to state 21
    random_statement               shift and go to state 24

state 55

    (31) expression -> LPAREN expression . RPAREN
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . POWER expression
    (34) comp_expr -> expression . EQ expression
    (35) comp_expr -> expression . GT expression
    (36) comp_expr -> expression . LT expression
    (37) comp_expr -> expression . GE expression
    (38) comp_expr -> expression . LE expression
    (39) comp_expr -> expression . NE expression
    (43) comp_expr -> expression . IN expression

    RPAREN          shift and go to state 83
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    POWER           shift and go to state 46
    EQ              shift and go to state 47
    GT              shift and go to state 48
    LT              shift and go to state 49
    GE              shift and go to state 50
    LE              shift and go to state 51
    NE              shift and go to state 52
    IN              shift and go to state 53


state 56

    (40) comp_expr -> comp_expr AND . comp_expr
    (34) comp_expr -> . expression EQ expression
    (35) comp_expr -> . expression GT expression
    (36) comp_expr -> . expression LT expression
    (37) comp_expr -> . expression GE expression
    (38) comp_expr -> . expression LE expression
    (39) comp_expr -> . expression NE expression
    (40) comp_expr -> . comp_expr AND comp_expr
    (41) comp_expr -> . comp_expr OR comp_expr
    (42) comp_expr -> . NOT expression
    (43) comp_expr -> . expression IN expression
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression POWER expression
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . YES
    (33) expression -> . NO
    (44) expression -> . comp_expr
    (45) expression -> . NUMBER
    (46) expression -> . IDENTIFIER
    (47) expression -> . random_statement
    (48) expression -> . TEXT
    (49) expression -> . INPUT
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    NOT             shift and go to state 27
    DATATYPE        shift and go to state 17
    LPAREN          shift and go to state 18
    YES             shift and go to state 19
    NO              shift and go to state 20
    NUMBER          shift and go to state 22
    IDENTIFIER      shift and go to state 23
    TEXT            shift and go to state 35
    INPUT           shift and go to state 26
    RANDOM          shift and go to state 28

    comp_expr                      shift and go to state 84
    expression                     shift and go to state 85
    random_statement               shift and go to state 24

state 57

    (41) comp_expr -> comp_expr OR . comp_expr
    (34) comp_expr -> . expression EQ expression
    (35) comp_expr -> . expression GT expression
    (36) comp_expr -> . expression LT expression
    (37) comp_expr -> . expression GE expression
    (38) comp_expr -> . expression LE expression
    (39) comp_expr -> . expression NE expression
    (40) comp_expr -> . comp_expr AND comp_expr
    (41) comp_expr -> . comp_expr OR comp_expr
    (42) comp_expr -> . NOT expression
    (43) comp_expr -> . expression IN expression
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression POWER expression
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . YES
    (33) expression -> . NO
    (44) expression -> . comp_expr
    (45) expression -> . NUMBER
    (46) expression -> . IDENTIFIER
    (47) expression -> . random_statement
    (48) expression -> . TEXT
    (49) expression -> . INPUT
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    NOT             shift and go to state 27
    DATATYPE        shift and go to state 17
    LPAREN          shift and go to state 18
    YES             shift and go to state 19
    NO              shift and go to state 20
    NUMBER          shift and go to state 22
    IDENTIFIER      shift and go to state 23
    TEXT            shift and go to state 35
    INPUT           shift and go to state 26
    RANDOM          shift and go to state 28

    comp_expr                      shift and go to state 86
    expression                     shift and go to state 85
    random_statement               shift and go to state 24

state 58

    (6) ask -> TEXT EXPECTING . INPUT AND DATATYPE

    INPUT           shift and go to state 87


state 59

    (42) comp_expr -> NOT expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . POWER expression
    (34) comp_expr -> expression . EQ expression
    (35) comp_expr -> expression . GT expression
    (36) comp_expr -> expression . LT expression
    (37) comp_expr -> expression . GE expression
    (38) comp_expr -> expression . LE expression
    (39) comp_expr -> expression . NE expression
    (43) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    AND             reduce using rule 42 (comp_expr -> NOT expression .)
    OR              reduce using rule 42 (comp_expr -> NOT expression .)
    OUTPUT          reduce using rule 42 (comp_expr -> NOT expression .)
    REPEAT          reduce using rule 42 (comp_expr -> NOT expression .)
    PAUSE           reduce using rule 42 (comp_expr -> NOT expression .)
    FUNCTION        reduce using rule 42 (comp_expr -> NOT expression .)
    WHILE           reduce using rule 42 (comp_expr -> NOT expression .)
    FOREVER         reduce using rule 42 (comp_expr -> NOT expression .)
    EXIT            reduce using rule 42 (comp_expr -> NOT expression .)
    SET             reduce using rule 42 (comp_expr -> NOT expression .)
    IF              reduce using rule 42 (comp_expr -> NOT expression .)
    $end            reduce using rule 42 (comp_expr -> NOT expression .)
    UNTIL           reduce using rule 42 (comp_expr -> NOT expression .)
    END             reduce using rule 42 (comp_expr -> NOT expression .)
    ELSE            reduce using rule 42 (comp_expr -> NOT expression .)
    DO              reduce using rule 42 (comp_expr -> NOT expression .)
    THEN            reduce using rule 42 (comp_expr -> NOT expression .)
    RPAREN          reduce using rule 42 (comp_expr -> NOT expression .)
    TYPE            reduce using rule 42 (comp_expr -> NOT expression .)
    DATATYPE        reduce using rule 42 (comp_expr -> NOT expression .)
    LPAREN          reduce using rule 42 (comp_expr -> NOT expression .)
    YES             reduce using rule 42 (comp_expr -> NOT expression .)
    NO              reduce using rule 42 (comp_expr -> NOT expression .)
    NUMBER          reduce using rule 42 (comp_expr -> NOT expression .)
    IDENTIFIER      reduce using rule 42 (comp_expr -> NOT expression .)
    TEXT            reduce using rule 42 (comp_expr -> NOT expression .)
    INPUT           reduce using rule 42 (comp_expr -> NOT expression .)
    NOT             reduce using rule 42 (comp_expr -> NOT expression .)
    RANDOM          reduce using rule 42 (comp_expr -> NOT expression .)
    TO              reduce using rule 42 (comp_expr -> NOT expression .)
    FROM            reduce using rule 42 (comp_expr -> NOT expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    POWER           shift and go to state 46
    EQ              shift and go to state 47
    GT              shift and go to state 48
    LT              shift and go to state 49
    GE              shift and go to state 50
    LE              shift and go to state 51
    NE              shift and go to state 52
    IN              shift and go to state 53

  ! PLUS            [ reduce using rule 42 (comp_expr -> NOT expression .) ]
  ! MINUS           [ reduce using rule 42 (comp_expr -> NOT expression .) ]
  ! TIMES           [ reduce using rule 42 (comp_expr -> NOT expression .) ]
  ! DIVIDE          [ reduce using rule 42 (comp_expr -> NOT expression .) ]
  ! POWER           [ reduce using rule 42 (comp_expr -> NOT expression .) ]
  ! EQ              [ reduce using rule 42 (comp_expr -> NOT expression .) ]
  ! GT              [ reduce using rule 42 (comp_expr -> NOT expression .) ]
  ! LT              [ reduce using rule 42 (comp_expr -> NOT expression .) ]
  ! GE              [ reduce using rule 42 (comp_expr -> NOT expression .) ]
  ! LE              [ reduce using rule 42 (comp_expr -> NOT expression .) ]
  ! NE              [ reduce using rule 42 (comp_expr -> NOT expression .) ]
  ! IN              [ reduce using rule 42 (comp_expr -> NOT expression .) ]


state 60

    (7) random_statement -> RANDOM DATATYPE . FROM expression TO expression

    FROM            shift and go to state 88


state 61

    (9) statement -> var_assignment TO expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . POWER expression
    (24) items -> expression .
    (34) comp_expr -> expression . EQ expression
    (35) comp_expr -> expression . GT expression
    (36) comp_expr -> expression . LT expression
    (37) comp_expr -> expression . GE expression
    (38) comp_expr -> expression . LE expression
    (39) comp_expr -> expression . NE expression
    (43) comp_expr -> expression . IN expression

    OUTPUT          reduce using rule 9 (statement -> var_assignment TO expression .)
    REPEAT          reduce using rule 9 (statement -> var_assignment TO expression .)
    PAUSE           reduce using rule 9 (statement -> var_assignment TO expression .)
    FUNCTION        reduce using rule 9 (statement -> var_assignment TO expression .)
    WHILE           reduce using rule 9 (statement -> var_assignment TO expression .)
    FOREVER         reduce using rule 9 (statement -> var_assignment TO expression .)
    EXIT            reduce using rule 9 (statement -> var_assignment TO expression .)
    SET             reduce using rule 9 (statement -> var_assignment TO expression .)
    IF              reduce using rule 9 (statement -> var_assignment TO expression .)
    $end            reduce using rule 9 (statement -> var_assignment TO expression .)
    UNTIL           reduce using rule 9 (statement -> var_assignment TO expression .)
    END             reduce using rule 9 (statement -> var_assignment TO expression .)
    ELSE            reduce using rule 9 (statement -> var_assignment TO expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    POWER           shift and go to state 46
    TYPE            reduce using rule 24 (items -> expression .)
    DATATYPE        reduce using rule 24 (items -> expression .)
    LPAREN          reduce using rule 24 (items -> expression .)
    YES             reduce using rule 24 (items -> expression .)
    NO              reduce using rule 24 (items -> expression .)
    NUMBER          reduce using rule 24 (items -> expression .)
    IDENTIFIER      reduce using rule 24 (items -> expression .)
    TEXT            reduce using rule 24 (items -> expression .)
    INPUT           reduce using rule 24 (items -> expression .)
    NOT             reduce using rule 24 (items -> expression .)
    RANDOM          reduce using rule 24 (items -> expression .)
    EQ              shift and go to state 47
    GT              shift and go to state 48
    LT              shift and go to state 49
    GE              shift and go to state 50
    LE              shift and go to state 51
    NE              shift and go to state 52
    IN              shift and go to state 53


state 62

    (11) statement -> var_assignment TO ask .

    OUTPUT          reduce using rule 11 (statement -> var_assignment TO ask .)
    REPEAT          reduce using rule 11 (statement -> var_assignment TO ask .)
    PAUSE           reduce using rule 11 (statement -> var_assignment TO ask .)
    FUNCTION        reduce using rule 11 (statement -> var_assignment TO ask .)
    WHILE           reduce using rule 11 (statement -> var_assignment TO ask .)
    FOREVER         reduce using rule 11 (statement -> var_assignment TO ask .)
    EXIT            reduce using rule 11 (statement -> var_assignment TO ask .)
    SET             reduce using rule 11 (statement -> var_assignment TO ask .)
    IF              reduce using rule 11 (statement -> var_assignment TO ask .)
    $end            reduce using rule 11 (statement -> var_assignment TO ask .)
    UNTIL           reduce using rule 11 (statement -> var_assignment TO ask .)
    END             reduce using rule 11 (statement -> var_assignment TO ask .)
    ELSE            reduce using rule 11 (statement -> var_assignment TO ask .)


state 63

    (12) statement -> var_assignment TO items . type_stmt
    (25) items -> items . expression
    (18) type_stmt -> . TYPE DATATYPE
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression POWER expression
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . YES
    (33) expression -> . NO
    (44) expression -> . comp_expr
    (45) expression -> . NUMBER
    (46) expression -> . IDENTIFIER
    (47) expression -> . random_statement
    (48) expression -> . TEXT
    (49) expression -> . INPUT
    (34) comp_expr -> . expression EQ expression
    (35) comp_expr -> . expression GT expression
    (36) comp_expr -> . expression LT expression
    (37) comp_expr -> . expression GE expression
    (38) comp_expr -> . expression LE expression
    (39) comp_expr -> . expression NE expression
    (40) comp_expr -> . comp_expr AND comp_expr
    (41) comp_expr -> . comp_expr OR comp_expr
    (42) comp_expr -> . NOT expression
    (43) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    TYPE            shift and go to state 91
    DATATYPE        shift and go to state 17
    LPAREN          shift and go to state 18
    YES             shift and go to state 19
    NO              shift and go to state 20
    NUMBER          shift and go to state 22
    IDENTIFIER      shift and go to state 23
    TEXT            shift and go to state 35
    INPUT           shift and go to state 26
    NOT             shift and go to state 27
    RANDOM          shift and go to state 28

    type_stmt                      shift and go to state 89
    expression                     shift and go to state 90
    comp_expr                      shift and go to state 21
    random_statement               shift and go to state 24

state 64

    (15) statement -> if_then ELSE THEN . statements end_statement
    (1) statements -> . statement
    (2) statements -> . statements statement
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . WHILE expression DO statements end_statement
    (21) statement -> . FOREVER DO statements end_statement
    (22) statement -> . EXIT LOOP
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    FOREVER         shift and go to state 10
    EXIT            shift and go to state 11
    SET             shift and go to state 12
    IF              shift and go to state 13

    if_then                        shift and go to state 5
    statements                     shift and go to state 92
    statement                      shift and go to state 2
    var_assignment                 shift and go to state 4

state 65

    (16) statement -> REPEAT statements UNTIL . expression
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression POWER expression
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . YES
    (33) expression -> . NO
    (44) expression -> . comp_expr
    (45) expression -> . NUMBER
    (46) expression -> . IDENTIFIER
    (47) expression -> . random_statement
    (48) expression -> . TEXT
    (49) expression -> . INPUT
    (34) comp_expr -> . expression EQ expression
    (35) comp_expr -> . expression GT expression
    (36) comp_expr -> . expression LT expression
    (37) comp_expr -> . expression GE expression
    (38) comp_expr -> . expression LE expression
    (39) comp_expr -> . expression NE expression
    (40) comp_expr -> . comp_expr AND comp_expr
    (41) comp_expr -> . comp_expr OR comp_expr
    (42) comp_expr -> . NOT expression
    (43) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LPAREN          shift and go to state 18
    YES             shift and go to state 19
    NO              shift and go to state 20
    NUMBER          shift and go to state 22
    IDENTIFIER      shift and go to state 23
    TEXT            shift and go to state 35
    INPUT           shift and go to state 26
    NOT             shift and go to state 27
    RANDOM          shift and go to state 28

    expression                     shift and go to state 93
    comp_expr                      shift and go to state 21
    random_statement               shift and go to state 24

state 66

    (19) statement -> FUNCTION IDENTIFIER MEANS . statements end_statement
    (1) statements -> . statement
    (2) statements -> . statements statement
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . WHILE expression DO statements end_statement
    (21) statement -> . FOREVER DO statements end_statement
    (22) statement -> . EXIT LOOP
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    FOREVER         shift and go to state 10
    EXIT            shift and go to state 11
    SET             shift and go to state 12
    IF              shift and go to state 13

    statements                     shift and go to state 94
    statement                      shift and go to state 2
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 67

    (20) statement -> WHILE expression DO . statements end_statement
    (1) statements -> . statement
    (2) statements -> . statements statement
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . WHILE expression DO statements end_statement
    (21) statement -> . FOREVER DO statements end_statement
    (22) statement -> . EXIT LOOP
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    FOREVER         shift and go to state 10
    EXIT            shift and go to state 11
    SET             shift and go to state 12
    IF              shift and go to state 13

    statements                     shift and go to state 95
    statement                      shift and go to state 2
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 68

    (21) statement -> FOREVER DO statements . end_statement
    (2) statements -> statements . statement
    (3) end_statement -> . END
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . WHILE expression DO statements end_statement
    (21) statement -> . FOREVER DO statements end_statement
    (22) statement -> . EXIT LOOP
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    END             shift and go to state 32
    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    FOREVER         shift and go to state 10
    EXIT            shift and go to state 11
    SET             shift and go to state 12
    IF              shift and go to state 13

    end_statement                  shift and go to state 96
    statement                      shift and go to state 14
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 69

    (13) if_then -> IF expression THEN . statements
    (1) statements -> . statement
    (2) statements -> . statements statement
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . WHILE expression DO statements end_statement
    (21) statement -> . FOREVER DO statements end_statement
    (22) statement -> . EXIT LOOP
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    FOREVER         shift and go to state 10
    EXIT            shift and go to state 11
    SET             shift and go to state 12
    IF              shift and go to state 13

    statements                     shift and go to state 97
    statement                      shift and go to state 2
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 70

    (26) expression -> expression PLUS expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . POWER expression
    (34) comp_expr -> expression . EQ expression
    (35) comp_expr -> expression . GT expression
    (36) comp_expr -> expression . LT expression
    (37) comp_expr -> expression . GE expression
    (38) comp_expr -> expression . LE expression
    (39) comp_expr -> expression . NE expression
    (43) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    OUTPUT          reduce using rule 26 (expression -> expression PLUS expression .)
    REPEAT          reduce using rule 26 (expression -> expression PLUS expression .)
    PAUSE           reduce using rule 26 (expression -> expression PLUS expression .)
    FUNCTION        reduce using rule 26 (expression -> expression PLUS expression .)
    WHILE           reduce using rule 26 (expression -> expression PLUS expression .)
    FOREVER         reduce using rule 26 (expression -> expression PLUS expression .)
    EXIT            reduce using rule 26 (expression -> expression PLUS expression .)
    SET             reduce using rule 26 (expression -> expression PLUS expression .)
    IF              reduce using rule 26 (expression -> expression PLUS expression .)
    $end            reduce using rule 26 (expression -> expression PLUS expression .)
    UNTIL           reduce using rule 26 (expression -> expression PLUS expression .)
    END             reduce using rule 26 (expression -> expression PLUS expression .)
    ELSE            reduce using rule 26 (expression -> expression PLUS expression .)
    DO              reduce using rule 26 (expression -> expression PLUS expression .)
    THEN            reduce using rule 26 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 26 (expression -> expression PLUS expression .)
    AND             reduce using rule 26 (expression -> expression PLUS expression .)
    OR              reduce using rule 26 (expression -> expression PLUS expression .)
    TYPE            reduce using rule 26 (expression -> expression PLUS expression .)
    DATATYPE        reduce using rule 26 (expression -> expression PLUS expression .)
    LPAREN          reduce using rule 26 (expression -> expression PLUS expression .)
    YES             reduce using rule 26 (expression -> expression PLUS expression .)
    NO              reduce using rule 26 (expression -> expression PLUS expression .)
    NUMBER          reduce using rule 26 (expression -> expression PLUS expression .)
    IDENTIFIER      reduce using rule 26 (expression -> expression PLUS expression .)
    TEXT            reduce using rule 26 (expression -> expression PLUS expression .)
    INPUT           reduce using rule 26 (expression -> expression PLUS expression .)
    NOT             reduce using rule 26 (expression -> expression PLUS expression .)
    RANDOM          reduce using rule 26 (expression -> expression PLUS expression .)
    TO              reduce using rule 26 (expression -> expression PLUS expression .)
    FROM            reduce using rule 26 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    POWER           shift and go to state 46
    EQ              shift and go to state 47
    GT              shift and go to state 48
    LT              shift and go to state 49
    GE              shift and go to state 50
    LE              shift and go to state 51
    NE              shift and go to state 52
    IN              shift and go to state 53

  ! PLUS            [ reduce using rule 26 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 26 (expression -> expression PLUS expression .) ]
  ! TIMES           [ reduce using rule 26 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 26 (expression -> expression PLUS expression .) ]
  ! POWER           [ reduce using rule 26 (expression -> expression PLUS expression .) ]
  ! EQ              [ reduce using rule 26 (expression -> expression PLUS expression .) ]
  ! GT              [ reduce using rule 26 (expression -> expression PLUS expression .) ]
  ! LT              [ reduce using rule 26 (expression -> expression PLUS expression .) ]
  ! GE              [ reduce using rule 26 (expression -> expression PLUS expression .) ]
  ! LE              [ reduce using rule 26 (expression -> expression PLUS expression .) ]
  ! NE              [ reduce using rule 26 (expression -> expression PLUS expression .) ]
  ! IN              [ reduce using rule 26 (expression -> expression PLUS expression .) ]


state 71

    (27) expression -> expression MINUS expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . POWER expression
    (34) comp_expr -> expression . EQ expression
    (35) comp_expr -> expression . GT expression
    (36) comp_expr -> expression . LT expression
    (37) comp_expr -> expression . GE expression
    (38) comp_expr -> expression . LE expression
    (39) comp_expr -> expression . NE expression
    (43) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    OUTPUT          reduce using rule 27 (expression -> expression MINUS expression .)
    REPEAT          reduce using rule 27 (expression -> expression MINUS expression .)
    PAUSE           reduce using rule 27 (expression -> expression MINUS expression .)
    FUNCTION        reduce using rule 27 (expression -> expression MINUS expression .)
    WHILE           reduce using rule 27 (expression -> expression MINUS expression .)
    FOREVER         reduce using rule 27 (expression -> expression MINUS expression .)
    EXIT            reduce using rule 27 (expression -> expression MINUS expression .)
    SET             reduce using rule 27 (expression -> expression MINUS expression .)
    IF              reduce using rule 27 (expression -> expression MINUS expression .)
    $end            reduce using rule 27 (expression -> expression MINUS expression .)
    UNTIL           reduce using rule 27 (expression -> expression MINUS expression .)
    END             reduce using rule 27 (expression -> expression MINUS expression .)
    ELSE            reduce using rule 27 (expression -> expression MINUS expression .)
    DO              reduce using rule 27 (expression -> expression MINUS expression .)
    THEN            reduce using rule 27 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 27 (expression -> expression MINUS expression .)
    AND             reduce using rule 27 (expression -> expression MINUS expression .)
    OR              reduce using rule 27 (expression -> expression MINUS expression .)
    TYPE            reduce using rule 27 (expression -> expression MINUS expression .)
    DATATYPE        reduce using rule 27 (expression -> expression MINUS expression .)
    LPAREN          reduce using rule 27 (expression -> expression MINUS expression .)
    YES             reduce using rule 27 (expression -> expression MINUS expression .)
    NO              reduce using rule 27 (expression -> expression MINUS expression .)
    NUMBER          reduce using rule 27 (expression -> expression MINUS expression .)
    IDENTIFIER      reduce using rule 27 (expression -> expression MINUS expression .)
    TEXT            reduce using rule 27 (expression -> expression MINUS expression .)
    INPUT           reduce using rule 27 (expression -> expression MINUS expression .)
    NOT             reduce using rule 27 (expression -> expression MINUS expression .)
    RANDOM          reduce using rule 27 (expression -> expression MINUS expression .)
    TO              reduce using rule 27 (expression -> expression MINUS expression .)
    FROM            reduce using rule 27 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    POWER           shift and go to state 46
    EQ              shift and go to state 47
    GT              shift and go to state 48
    LT              shift and go to state 49
    GE              shift and go to state 50
    LE              shift and go to state 51
    NE              shift and go to state 52
    IN              shift and go to state 53

  ! PLUS            [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! TIMES           [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! POWER           [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! EQ              [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! GT              [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! LT              [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! GE              [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! LE              [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! NE              [ reduce using rule 27 (expression -> expression MINUS expression .) ]
  ! IN              [ reduce using rule 27 (expression -> expression MINUS expression .) ]


state 72

    (28) expression -> expression TIMES expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . POWER expression
    (34) comp_expr -> expression . EQ expression
    (35) comp_expr -> expression . GT expression
    (36) comp_expr -> expression . LT expression
    (37) comp_expr -> expression . GE expression
    (38) comp_expr -> expression . LE expression
    (39) comp_expr -> expression . NE expression
    (43) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    OUTPUT          reduce using rule 28 (expression -> expression TIMES expression .)
    REPEAT          reduce using rule 28 (expression -> expression TIMES expression .)
    PAUSE           reduce using rule 28 (expression -> expression TIMES expression .)
    FUNCTION        reduce using rule 28 (expression -> expression TIMES expression .)
    WHILE           reduce using rule 28 (expression -> expression TIMES expression .)
    FOREVER         reduce using rule 28 (expression -> expression TIMES expression .)
    EXIT            reduce using rule 28 (expression -> expression TIMES expression .)
    SET             reduce using rule 28 (expression -> expression TIMES expression .)
    IF              reduce using rule 28 (expression -> expression TIMES expression .)
    $end            reduce using rule 28 (expression -> expression TIMES expression .)
    UNTIL           reduce using rule 28 (expression -> expression TIMES expression .)
    END             reduce using rule 28 (expression -> expression TIMES expression .)
    ELSE            reduce using rule 28 (expression -> expression TIMES expression .)
    DO              reduce using rule 28 (expression -> expression TIMES expression .)
    THEN            reduce using rule 28 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 28 (expression -> expression TIMES expression .)
    AND             reduce using rule 28 (expression -> expression TIMES expression .)
    OR              reduce using rule 28 (expression -> expression TIMES expression .)
    TYPE            reduce using rule 28 (expression -> expression TIMES expression .)
    DATATYPE        reduce using rule 28 (expression -> expression TIMES expression .)
    LPAREN          reduce using rule 28 (expression -> expression TIMES expression .)
    YES             reduce using rule 28 (expression -> expression TIMES expression .)
    NO              reduce using rule 28 (expression -> expression TIMES expression .)
    NUMBER          reduce using rule 28 (expression -> expression TIMES expression .)
    IDENTIFIER      reduce using rule 28 (expression -> expression TIMES expression .)
    TEXT            reduce using rule 28 (expression -> expression TIMES expression .)
    INPUT           reduce using rule 28 (expression -> expression TIMES expression .)
    NOT             reduce using rule 28 (expression -> expression TIMES expression .)
    RANDOM          reduce using rule 28 (expression -> expression TIMES expression .)
    TO              reduce using rule 28 (expression -> expression TIMES expression .)
    FROM            reduce using rule 28 (expression -> expression TIMES expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    POWER           shift and go to state 46
    EQ              shift and go to state 47
    GT              shift and go to state 48
    LT              shift and go to state 49
    GE              shift and go to state 50
    LE              shift and go to state 51
    NE              shift and go to state 52
    IN              shift and go to state 53

  ! PLUS            [ reduce using rule 28 (expression -> expression TIMES expression .) ]
  ! MINUS           [ reduce using rule 28 (expression -> expression TIMES expression .) ]
  ! TIMES           [ reduce using rule 28 (expression -> expression TIMES expression .) ]
  ! DIVIDE          [ reduce using rule 28 (expression -> expression TIMES expression .) ]
  ! POWER           [ reduce using rule 28 (expression -> expression TIMES expression .) ]
  ! EQ              [ reduce using rule 28 (expression -> expression TIMES expression .) ]
  ! GT              [ reduce using rule 28 (expression -> expression TIMES expression .) ]
  ! LT              [ reduce using rule 28 (expression -> expression TIMES expression .) ]
  ! GE              [ reduce using rule 28 (expression -> expression TIMES expression .) ]
  ! LE              [ reduce using rule 28 (expression -> expression TIMES expression .) ]
  ! NE              [ reduce using rule 28 (expression -> expression TIMES expression .) ]
  ! IN              [ reduce using rule 28 (expression -> expression TIMES expression .) ]


state 73

    (29) expression -> expression DIVIDE expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . POWER expression
    (34) comp_expr -> expression . EQ expression
    (35) comp_expr -> expression . GT expression
    (36) comp_expr -> expression . LT expression
    (37) comp_expr -> expression . GE expression
    (38) comp_expr -> expression . LE expression
    (39) comp_expr -> expression . NE expression
    (43) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    OUTPUT          reduce using rule 29 (expression -> expression DIVIDE expression .)
    REPEAT          reduce using rule 29 (expression -> expression DIVIDE expression .)
    PAUSE           reduce using rule 29 (expression -> expression DIVIDE expression .)
    FUNCTION        reduce using rule 29 (expression -> expression DIVIDE expression .)
    WHILE           reduce using rule 29 (expression -> expression DIVIDE expression .)
    FOREVER         reduce using rule 29 (expression -> expression DIVIDE expression .)
    EXIT            reduce using rule 29 (expression -> expression DIVIDE expression .)
    SET             reduce using rule 29 (expression -> expression DIVIDE expression .)
    IF              reduce using rule 29 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 29 (expression -> expression DIVIDE expression .)
    UNTIL           reduce using rule 29 (expression -> expression DIVIDE expression .)
    END             reduce using rule 29 (expression -> expression DIVIDE expression .)
    ELSE            reduce using rule 29 (expression -> expression DIVIDE expression .)
    DO              reduce using rule 29 (expression -> expression DIVIDE expression .)
    THEN            reduce using rule 29 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 29 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 29 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 29 (expression -> expression DIVIDE expression .)
    TYPE            reduce using rule 29 (expression -> expression DIVIDE expression .)
    DATATYPE        reduce using rule 29 (expression -> expression DIVIDE expression .)
    LPAREN          reduce using rule 29 (expression -> expression DIVIDE expression .)
    YES             reduce using rule 29 (expression -> expression DIVIDE expression .)
    NO              reduce using rule 29 (expression -> expression DIVIDE expression .)
    NUMBER          reduce using rule 29 (expression -> expression DIVIDE expression .)
    IDENTIFIER      reduce using rule 29 (expression -> expression DIVIDE expression .)
    TEXT            reduce using rule 29 (expression -> expression DIVIDE expression .)
    INPUT           reduce using rule 29 (expression -> expression DIVIDE expression .)
    NOT             reduce using rule 29 (expression -> expression DIVIDE expression .)
    RANDOM          reduce using rule 29 (expression -> expression DIVIDE expression .)
    TO              reduce using rule 29 (expression -> expression DIVIDE expression .)
    FROM            reduce using rule 29 (expression -> expression DIVIDE expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    POWER           shift and go to state 46
    EQ              shift and go to state 47
    GT              shift and go to state 48
    LT              shift and go to state 49
    GE              shift and go to state 50
    LE              shift and go to state 51
    NE              shift and go to state 52
    IN              shift and go to state 53

  ! PLUS            [ reduce using rule 29 (expression -> expression DIVIDE expression .) ]
  ! MINUS           [ reduce using rule 29 (expression -> expression DIVIDE expression .) ]
  ! TIMES           [ reduce using rule 29 (expression -> expression DIVIDE expression .) ]
  ! DIVIDE          [ reduce using rule 29 (expression -> expression DIVIDE expression .) ]
  ! POWER           [ reduce using rule 29 (expression -> expression DIVIDE expression .) ]
  ! EQ              [ reduce using rule 29 (expression -> expression DIVIDE expression .) ]
  ! GT              [ reduce using rule 29 (expression -> expression DIVIDE expression .) ]
  ! LT              [ reduce using rule 29 (expression -> expression DIVIDE expression .) ]
  ! GE              [ reduce using rule 29 (expression -> expression DIVIDE expression .) ]
  ! LE              [ reduce using rule 29 (expression -> expression DIVIDE expression .) ]
  ! NE              [ reduce using rule 29 (expression -> expression DIVIDE expression .) ]
  ! IN              [ reduce using rule 29 (expression -> expression DIVIDE expression .) ]


state 74

    (30) expression -> expression POWER expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . POWER expression
    (34) comp_expr -> expression . EQ expression
    (35) comp_expr -> expression . GT expression
    (36) comp_expr -> expression . LT expression
    (37) comp_expr -> expression . GE expression
    (38) comp_expr -> expression . LE expression
    (39) comp_expr -> expression . NE expression
    (43) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    OUTPUT          reduce using rule 30 (expression -> expression POWER expression .)
    REPEAT          reduce using rule 30 (expression -> expression POWER expression .)
    PAUSE           reduce using rule 30 (expression -> expression POWER expression .)
    FUNCTION        reduce using rule 30 (expression -> expression POWER expression .)
    WHILE           reduce using rule 30 (expression -> expression POWER expression .)
    FOREVER         reduce using rule 30 (expression -> expression POWER expression .)
    EXIT            reduce using rule 30 (expression -> expression POWER expression .)
    SET             reduce using rule 30 (expression -> expression POWER expression .)
    IF              reduce using rule 30 (expression -> expression POWER expression .)
    $end            reduce using rule 30 (expression -> expression POWER expression .)
    UNTIL           reduce using rule 30 (expression -> expression POWER expression .)
    END             reduce using rule 30 (expression -> expression POWER expression .)
    ELSE            reduce using rule 30 (expression -> expression POWER expression .)
    DO              reduce using rule 30 (expression -> expression POWER expression .)
    THEN            reduce using rule 30 (expression -> expression POWER expression .)
    RPAREN          reduce using rule 30 (expression -> expression POWER expression .)
    AND             reduce using rule 30 (expression -> expression POWER expression .)
    OR              reduce using rule 30 (expression -> expression POWER expression .)
    TYPE            reduce using rule 30 (expression -> expression POWER expression .)
    DATATYPE        reduce using rule 30 (expression -> expression POWER expression .)
    LPAREN          reduce using rule 30 (expression -> expression POWER expression .)
    YES             reduce using rule 30 (expression -> expression POWER expression .)
    NO              reduce using rule 30 (expression -> expression POWER expression .)
    NUMBER          reduce using rule 30 (expression -> expression POWER expression .)
    IDENTIFIER      reduce using rule 30 (expression -> expression POWER expression .)
    TEXT            reduce using rule 30 (expression -> expression POWER expression .)
    INPUT           reduce using rule 30 (expression -> expression POWER expression .)
    NOT             reduce using rule 30 (expression -> expression POWER expression .)
    RANDOM          reduce using rule 30 (expression -> expression POWER expression .)
    TO              reduce using rule 30 (expression -> expression POWER expression .)
    FROM            reduce using rule 30 (expression -> expression POWER expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    POWER           shift and go to state 46
    EQ              shift and go to state 47
    GT              shift and go to state 48
    LT              shift and go to state 49
    GE              shift and go to state 50
    LE              shift and go to state 51
    NE              shift and go to state 52
    IN              shift and go to state 53

  ! PLUS            [ reduce using rule 30 (expression -> expression POWER expression .) ]
  ! MINUS           [ reduce using rule 30 (expression -> expression POWER expression .) ]
  ! TIMES           [ reduce using rule 30 (expression -> expression POWER expression .) ]
  ! DIVIDE          [ reduce using rule 30 (expression -> expression POWER expression .) ]
  ! POWER           [ reduce using rule 30 (expression -> expression POWER expression .) ]
  ! EQ              [ reduce using rule 30 (expression -> expression POWER expression .) ]
  ! GT              [ reduce using rule 30 (expression -> expression POWER expression .) ]
  ! LT              [ reduce using rule 30 (expression -> expression POWER expression .) ]
  ! GE              [ reduce using rule 30 (expression -> expression POWER expression .) ]
  ! LE              [ reduce using rule 30 (expression -> expression POWER expression .) ]
  ! NE              [ reduce using rule 30 (expression -> expression POWER expression .) ]
  ! IN              [ reduce using rule 30 (expression -> expression POWER expression .) ]


state 75

    (34) comp_expr -> expression EQ expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . POWER expression
    (34) comp_expr -> expression . EQ expression
    (35) comp_expr -> expression . GT expression
    (36) comp_expr -> expression . LT expression
    (37) comp_expr -> expression . GE expression
    (38) comp_expr -> expression . LE expression
    (39) comp_expr -> expression . NE expression
    (43) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    AND             reduce using rule 34 (comp_expr -> expression EQ expression .)
    OR              reduce using rule 34 (comp_expr -> expression EQ expression .)
    OUTPUT          reduce using rule 34 (comp_expr -> expression EQ expression .)
    REPEAT          reduce using rule 34 (comp_expr -> expression EQ expression .)
    PAUSE           reduce using rule 34 (comp_expr -> expression EQ expression .)
    FUNCTION        reduce using rule 34 (comp_expr -> expression EQ expression .)
    WHILE           reduce using rule 34 (comp_expr -> expression EQ expression .)
    FOREVER         reduce using rule 34 (comp_expr -> expression EQ expression .)
    EXIT            reduce using rule 34 (comp_expr -> expression EQ expression .)
    SET             reduce using rule 34 (comp_expr -> expression EQ expression .)
    IF              reduce using rule 34 (comp_expr -> expression EQ expression .)
    $end            reduce using rule 34 (comp_expr -> expression EQ expression .)
    UNTIL           reduce using rule 34 (comp_expr -> expression EQ expression .)
    END             reduce using rule 34 (comp_expr -> expression EQ expression .)
    ELSE            reduce using rule 34 (comp_expr -> expression EQ expression .)
    DO              reduce using rule 34 (comp_expr -> expression EQ expression .)
    THEN            reduce using rule 34 (comp_expr -> expression EQ expression .)
    RPAREN          reduce using rule 34 (comp_expr -> expression EQ expression .)
    TYPE            reduce using rule 34 (comp_expr -> expression EQ expression .)
    DATATYPE        reduce using rule 34 (comp_expr -> expression EQ expression .)
    LPAREN          reduce using rule 34 (comp_expr -> expression EQ expression .)
    YES             reduce using rule 34 (comp_expr -> expression EQ expression .)
    NO              reduce using rule 34 (comp_expr -> expression EQ expression .)
    NUMBER          reduce using rule 34 (comp_expr -> expression EQ expression .)
    IDENTIFIER      reduce using rule 34 (comp_expr -> expression EQ expression .)
    TEXT            reduce using rule 34 (comp_expr -> expression EQ expression .)
    INPUT           reduce using rule 34 (comp_expr -> expression EQ expression .)
    NOT             reduce using rule 34 (comp_expr -> expression EQ expression .)
    RANDOM          reduce using rule 34 (comp_expr -> expression EQ expression .)
    TO              reduce using rule 34 (comp_expr -> expression EQ expression .)
    FROM            reduce using rule 34 (comp_expr -> expression EQ expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    POWER           shift and go to state 46
    EQ              shift and go to state 47
    GT              shift and go to state 48
    LT              shift and go to state 49
    GE              shift and go to state 50
    LE              shift and go to state 51
    NE              shift and go to state 52
    IN              shift and go to state 53

  ! PLUS            [ reduce using rule 34 (comp_expr -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 34 (comp_expr -> expression EQ expression .) ]
  ! TIMES           [ reduce using rule 34 (comp_expr -> expression EQ expression .) ]
  ! DIVIDE          [ reduce using rule 34 (comp_expr -> expression EQ expression .) ]
  ! POWER           [ reduce using rule 34 (comp_expr -> expression EQ expression .) ]
  ! EQ              [ reduce using rule 34 (comp_expr -> expression EQ expression .) ]
  ! GT              [ reduce using rule 34 (comp_expr -> expression EQ expression .) ]
  ! LT              [ reduce using rule 34 (comp_expr -> expression EQ expression .) ]
  ! GE              [ reduce using rule 34 (comp_expr -> expression EQ expression .) ]
  ! LE              [ reduce using rule 34 (comp_expr -> expression EQ expression .) ]
  ! NE              [ reduce using rule 34 (comp_expr -> expression EQ expression .) ]
  ! IN              [ reduce using rule 34 (comp_expr -> expression EQ expression .) ]


state 76

    (35) comp_expr -> expression GT expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . POWER expression
    (34) comp_expr -> expression . EQ expression
    (35) comp_expr -> expression . GT expression
    (36) comp_expr -> expression . LT expression
    (37) comp_expr -> expression . GE expression
    (38) comp_expr -> expression . LE expression
    (39) comp_expr -> expression . NE expression
    (43) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    AND             reduce using rule 35 (comp_expr -> expression GT expression .)
    OR              reduce using rule 35 (comp_expr -> expression GT expression .)
    OUTPUT          reduce using rule 35 (comp_expr -> expression GT expression .)
    REPEAT          reduce using rule 35 (comp_expr -> expression GT expression .)
    PAUSE           reduce using rule 35 (comp_expr -> expression GT expression .)
    FUNCTION        reduce using rule 35 (comp_expr -> expression GT expression .)
    WHILE           reduce using rule 35 (comp_expr -> expression GT expression .)
    FOREVER         reduce using rule 35 (comp_expr -> expression GT expression .)
    EXIT            reduce using rule 35 (comp_expr -> expression GT expression .)
    SET             reduce using rule 35 (comp_expr -> expression GT expression .)
    IF              reduce using rule 35 (comp_expr -> expression GT expression .)
    $end            reduce using rule 35 (comp_expr -> expression GT expression .)
    UNTIL           reduce using rule 35 (comp_expr -> expression GT expression .)
    END             reduce using rule 35 (comp_expr -> expression GT expression .)
    ELSE            reduce using rule 35 (comp_expr -> expression GT expression .)
    DO              reduce using rule 35 (comp_expr -> expression GT expression .)
    THEN            reduce using rule 35 (comp_expr -> expression GT expression .)
    RPAREN          reduce using rule 35 (comp_expr -> expression GT expression .)
    TYPE            reduce using rule 35 (comp_expr -> expression GT expression .)
    DATATYPE        reduce using rule 35 (comp_expr -> expression GT expression .)
    LPAREN          reduce using rule 35 (comp_expr -> expression GT expression .)
    YES             reduce using rule 35 (comp_expr -> expression GT expression .)
    NO              reduce using rule 35 (comp_expr -> expression GT expression .)
    NUMBER          reduce using rule 35 (comp_expr -> expression GT expression .)
    IDENTIFIER      reduce using rule 35 (comp_expr -> expression GT expression .)
    TEXT            reduce using rule 35 (comp_expr -> expression GT expression .)
    INPUT           reduce using rule 35 (comp_expr -> expression GT expression .)
    NOT             reduce using rule 35 (comp_expr -> expression GT expression .)
    RANDOM          reduce using rule 35 (comp_expr -> expression GT expression .)
    TO              reduce using rule 35 (comp_expr -> expression GT expression .)
    FROM            reduce using rule 35 (comp_expr -> expression GT expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    POWER           shift and go to state 46
    EQ              shift and go to state 47
    GT              shift and go to state 48
    LT              shift and go to state 49
    GE              shift and go to state 50
    LE              shift and go to state 51
    NE              shift and go to state 52
    IN              shift and go to state 53

  ! PLUS            [ reduce using rule 35 (comp_expr -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 35 (comp_expr -> expression GT expression .) ]
  ! TIMES           [ reduce using rule 35 (comp_expr -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 35 (comp_expr -> expression GT expression .) ]
  ! POWER           [ reduce using rule 35 (comp_expr -> expression GT expression .) ]
  ! EQ              [ reduce using rule 35 (comp_expr -> expression GT expression .) ]
  ! GT              [ reduce using rule 35 (comp_expr -> expression GT expression .) ]
  ! LT              [ reduce using rule 35 (comp_expr -> expression GT expression .) ]
  ! GE              [ reduce using rule 35 (comp_expr -> expression GT expression .) ]
  ! LE              [ reduce using rule 35 (comp_expr -> expression GT expression .) ]
  ! NE              [ reduce using rule 35 (comp_expr -> expression GT expression .) ]
  ! IN              [ reduce using rule 35 (comp_expr -> expression GT expression .) ]


state 77

    (36) comp_expr -> expression LT expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . POWER expression
    (34) comp_expr -> expression . EQ expression
    (35) comp_expr -> expression . GT expression
    (36) comp_expr -> expression . LT expression
    (37) comp_expr -> expression . GE expression
    (38) comp_expr -> expression . LE expression
    (39) comp_expr -> expression . NE expression
    (43) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    AND             reduce using rule 36 (comp_expr -> expression LT expression .)
    OR              reduce using rule 36 (comp_expr -> expression LT expression .)
    OUTPUT          reduce using rule 36 (comp_expr -> expression LT expression .)
    REPEAT          reduce using rule 36 (comp_expr -> expression LT expression .)
    PAUSE           reduce using rule 36 (comp_expr -> expression LT expression .)
    FUNCTION        reduce using rule 36 (comp_expr -> expression LT expression .)
    WHILE           reduce using rule 36 (comp_expr -> expression LT expression .)
    FOREVER         reduce using rule 36 (comp_expr -> expression LT expression .)
    EXIT            reduce using rule 36 (comp_expr -> expression LT expression .)
    SET             reduce using rule 36 (comp_expr -> expression LT expression .)
    IF              reduce using rule 36 (comp_expr -> expression LT expression .)
    $end            reduce using rule 36 (comp_expr -> expression LT expression .)
    UNTIL           reduce using rule 36 (comp_expr -> expression LT expression .)
    END             reduce using rule 36 (comp_expr -> expression LT expression .)
    ELSE            reduce using rule 36 (comp_expr -> expression LT expression .)
    DO              reduce using rule 36 (comp_expr -> expression LT expression .)
    THEN            reduce using rule 36 (comp_expr -> expression LT expression .)
    RPAREN          reduce using rule 36 (comp_expr -> expression LT expression .)
    TYPE            reduce using rule 36 (comp_expr -> expression LT expression .)
    DATATYPE        reduce using rule 36 (comp_expr -> expression LT expression .)
    LPAREN          reduce using rule 36 (comp_expr -> expression LT expression .)
    YES             reduce using rule 36 (comp_expr -> expression LT expression .)
    NO              reduce using rule 36 (comp_expr -> expression LT expression .)
    NUMBER          reduce using rule 36 (comp_expr -> expression LT expression .)
    IDENTIFIER      reduce using rule 36 (comp_expr -> expression LT expression .)
    TEXT            reduce using rule 36 (comp_expr -> expression LT expression .)
    INPUT           reduce using rule 36 (comp_expr -> expression LT expression .)
    NOT             reduce using rule 36 (comp_expr -> expression LT expression .)
    RANDOM          reduce using rule 36 (comp_expr -> expression LT expression .)
    TO              reduce using rule 36 (comp_expr -> expression LT expression .)
    FROM            reduce using rule 36 (comp_expr -> expression LT expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    POWER           shift and go to state 46
    EQ              shift and go to state 47
    GT              shift and go to state 48
    LT              shift and go to state 49
    GE              shift and go to state 50
    LE              shift and go to state 51
    NE              shift and go to state 52
    IN              shift and go to state 53

  ! PLUS            [ reduce using rule 36 (comp_expr -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 36 (comp_expr -> expression LT expression .) ]
  ! TIMES           [ reduce using rule 36 (comp_expr -> expression LT expression .) ]
  ! DIVIDE          [ reduce using rule 36 (comp_expr -> expression LT expression .) ]
  ! POWER           [ reduce using rule 36 (comp_expr -> expression LT expression .) ]
  ! EQ              [ reduce using rule 36 (comp_expr -> expression LT expression .) ]
  ! GT              [ reduce using rule 36 (comp_expr -> expression LT expression .) ]
  ! LT              [ reduce using rule 36 (comp_expr -> expression LT expression .) ]
  ! GE              [ reduce using rule 36 (comp_expr -> expression LT expression .) ]
  ! LE              [ reduce using rule 36 (comp_expr -> expression LT expression .) ]
  ! NE              [ reduce using rule 36 (comp_expr -> expression LT expression .) ]
  ! IN              [ reduce using rule 36 (comp_expr -> expression LT expression .) ]


state 78

    (37) comp_expr -> expression GE expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . POWER expression
    (34) comp_expr -> expression . EQ expression
    (35) comp_expr -> expression . GT expression
    (36) comp_expr -> expression . LT expression
    (37) comp_expr -> expression . GE expression
    (38) comp_expr -> expression . LE expression
    (39) comp_expr -> expression . NE expression
    (43) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    AND             reduce using rule 37 (comp_expr -> expression GE expression .)
    OR              reduce using rule 37 (comp_expr -> expression GE expression .)
    OUTPUT          reduce using rule 37 (comp_expr -> expression GE expression .)
    REPEAT          reduce using rule 37 (comp_expr -> expression GE expression .)
    PAUSE           reduce using rule 37 (comp_expr -> expression GE expression .)
    FUNCTION        reduce using rule 37 (comp_expr -> expression GE expression .)
    WHILE           reduce using rule 37 (comp_expr -> expression GE expression .)
    FOREVER         reduce using rule 37 (comp_expr -> expression GE expression .)
    EXIT            reduce using rule 37 (comp_expr -> expression GE expression .)
    SET             reduce using rule 37 (comp_expr -> expression GE expression .)
    IF              reduce using rule 37 (comp_expr -> expression GE expression .)
    $end            reduce using rule 37 (comp_expr -> expression GE expression .)
    UNTIL           reduce using rule 37 (comp_expr -> expression GE expression .)
    END             reduce using rule 37 (comp_expr -> expression GE expression .)
    ELSE            reduce using rule 37 (comp_expr -> expression GE expression .)
    DO              reduce using rule 37 (comp_expr -> expression GE expression .)
    THEN            reduce using rule 37 (comp_expr -> expression GE expression .)
    RPAREN          reduce using rule 37 (comp_expr -> expression GE expression .)
    TYPE            reduce using rule 37 (comp_expr -> expression GE expression .)
    DATATYPE        reduce using rule 37 (comp_expr -> expression GE expression .)
    LPAREN          reduce using rule 37 (comp_expr -> expression GE expression .)
    YES             reduce using rule 37 (comp_expr -> expression GE expression .)
    NO              reduce using rule 37 (comp_expr -> expression GE expression .)
    NUMBER          reduce using rule 37 (comp_expr -> expression GE expression .)
    IDENTIFIER      reduce using rule 37 (comp_expr -> expression GE expression .)
    TEXT            reduce using rule 37 (comp_expr -> expression GE expression .)
    INPUT           reduce using rule 37 (comp_expr -> expression GE expression .)
    NOT             reduce using rule 37 (comp_expr -> expression GE expression .)
    RANDOM          reduce using rule 37 (comp_expr -> expression GE expression .)
    TO              reduce using rule 37 (comp_expr -> expression GE expression .)
    FROM            reduce using rule 37 (comp_expr -> expression GE expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    POWER           shift and go to state 46
    EQ              shift and go to state 47
    GT              shift and go to state 48
    LT              shift and go to state 49
    GE              shift and go to state 50
    LE              shift and go to state 51
    NE              shift and go to state 52
    IN              shift and go to state 53

  ! PLUS            [ reduce using rule 37 (comp_expr -> expression GE expression .) ]
  ! MINUS           [ reduce using rule 37 (comp_expr -> expression GE expression .) ]
  ! TIMES           [ reduce using rule 37 (comp_expr -> expression GE expression .) ]
  ! DIVIDE          [ reduce using rule 37 (comp_expr -> expression GE expression .) ]
  ! POWER           [ reduce using rule 37 (comp_expr -> expression GE expression .) ]
  ! EQ              [ reduce using rule 37 (comp_expr -> expression GE expression .) ]
  ! GT              [ reduce using rule 37 (comp_expr -> expression GE expression .) ]
  ! LT              [ reduce using rule 37 (comp_expr -> expression GE expression .) ]
  ! GE              [ reduce using rule 37 (comp_expr -> expression GE expression .) ]
  ! LE              [ reduce using rule 37 (comp_expr -> expression GE expression .) ]
  ! NE              [ reduce using rule 37 (comp_expr -> expression GE expression .) ]
  ! IN              [ reduce using rule 37 (comp_expr -> expression GE expression .) ]


state 79

    (38) comp_expr -> expression LE expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . POWER expression
    (34) comp_expr -> expression . EQ expression
    (35) comp_expr -> expression . GT expression
    (36) comp_expr -> expression . LT expression
    (37) comp_expr -> expression . GE expression
    (38) comp_expr -> expression . LE expression
    (39) comp_expr -> expression . NE expression
    (43) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    AND             reduce using rule 38 (comp_expr -> expression LE expression .)
    OR              reduce using rule 38 (comp_expr -> expression LE expression .)
    OUTPUT          reduce using rule 38 (comp_expr -> expression LE expression .)
    REPEAT          reduce using rule 38 (comp_expr -> expression LE expression .)
    PAUSE           reduce using rule 38 (comp_expr -> expression LE expression .)
    FUNCTION        reduce using rule 38 (comp_expr -> expression LE expression .)
    WHILE           reduce using rule 38 (comp_expr -> expression LE expression .)
    FOREVER         reduce using rule 38 (comp_expr -> expression LE expression .)
    EXIT            reduce using rule 38 (comp_expr -> expression LE expression .)
    SET             reduce using rule 38 (comp_expr -> expression LE expression .)
    IF              reduce using rule 38 (comp_expr -> expression LE expression .)
    $end            reduce using rule 38 (comp_expr -> expression LE expression .)
    UNTIL           reduce using rule 38 (comp_expr -> expression LE expression .)
    END             reduce using rule 38 (comp_expr -> expression LE expression .)
    ELSE            reduce using rule 38 (comp_expr -> expression LE expression .)
    DO              reduce using rule 38 (comp_expr -> expression LE expression .)
    THEN            reduce using rule 38 (comp_expr -> expression LE expression .)
    RPAREN          reduce using rule 38 (comp_expr -> expression LE expression .)
    TYPE            reduce using rule 38 (comp_expr -> expression LE expression .)
    DATATYPE        reduce using rule 38 (comp_expr -> expression LE expression .)
    LPAREN          reduce using rule 38 (comp_expr -> expression LE expression .)
    YES             reduce using rule 38 (comp_expr -> expression LE expression .)
    NO              reduce using rule 38 (comp_expr -> expression LE expression .)
    NUMBER          reduce using rule 38 (comp_expr -> expression LE expression .)
    IDENTIFIER      reduce using rule 38 (comp_expr -> expression LE expression .)
    TEXT            reduce using rule 38 (comp_expr -> expression LE expression .)
    INPUT           reduce using rule 38 (comp_expr -> expression LE expression .)
    NOT             reduce using rule 38 (comp_expr -> expression LE expression .)
    RANDOM          reduce using rule 38 (comp_expr -> expression LE expression .)
    TO              reduce using rule 38 (comp_expr -> expression LE expression .)
    FROM            reduce using rule 38 (comp_expr -> expression LE expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    POWER           shift and go to state 46
    EQ              shift and go to state 47
    GT              shift and go to state 48
    LT              shift and go to state 49
    GE              shift and go to state 50
    LE              shift and go to state 51
    NE              shift and go to state 52
    IN              shift and go to state 53

  ! PLUS            [ reduce using rule 38 (comp_expr -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 38 (comp_expr -> expression LE expression .) ]
  ! TIMES           [ reduce using rule 38 (comp_expr -> expression LE expression .) ]
  ! DIVIDE          [ reduce using rule 38 (comp_expr -> expression LE expression .) ]
  ! POWER           [ reduce using rule 38 (comp_expr -> expression LE expression .) ]
  ! EQ              [ reduce using rule 38 (comp_expr -> expression LE expression .) ]
  ! GT              [ reduce using rule 38 (comp_expr -> expression LE expression .) ]
  ! LT              [ reduce using rule 38 (comp_expr -> expression LE expression .) ]
  ! GE              [ reduce using rule 38 (comp_expr -> expression LE expression .) ]
  ! LE              [ reduce using rule 38 (comp_expr -> expression LE expression .) ]
  ! NE              [ reduce using rule 38 (comp_expr -> expression LE expression .) ]
  ! IN              [ reduce using rule 38 (comp_expr -> expression LE expression .) ]


state 80

    (39) comp_expr -> expression NE expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . POWER expression
    (34) comp_expr -> expression . EQ expression
    (35) comp_expr -> expression . GT expression
    (36) comp_expr -> expression . LT expression
    (37) comp_expr -> expression . GE expression
    (38) comp_expr -> expression . LE expression
    (39) comp_expr -> expression . NE expression
    (43) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    AND             reduce using rule 39 (comp_expr -> expression NE expression .)
    OR              reduce using rule 39 (comp_expr -> expression NE expression .)
    OUTPUT          reduce using rule 39 (comp_expr -> expression NE expression .)
    REPEAT          reduce using rule 39 (comp_expr -> expression NE expression .)
    PAUSE           reduce using rule 39 (comp_expr -> expression NE expression .)
    FUNCTION        reduce using rule 39 (comp_expr -> expression NE expression .)
    WHILE           reduce using rule 39 (comp_expr -> expression NE expression .)
    FOREVER         reduce using rule 39 (comp_expr -> expression NE expression .)
    EXIT            reduce using rule 39 (comp_expr -> expression NE expression .)
    SET             reduce using rule 39 (comp_expr -> expression NE expression .)
    IF              reduce using rule 39 (comp_expr -> expression NE expression .)
    $end            reduce using rule 39 (comp_expr -> expression NE expression .)
    UNTIL           reduce using rule 39 (comp_expr -> expression NE expression .)
    END             reduce using rule 39 (comp_expr -> expression NE expression .)
    ELSE            reduce using rule 39 (comp_expr -> expression NE expression .)
    DO              reduce using rule 39 (comp_expr -> expression NE expression .)
    THEN            reduce using rule 39 (comp_expr -> expression NE expression .)
    RPAREN          reduce using rule 39 (comp_expr -> expression NE expression .)
    TYPE            reduce using rule 39 (comp_expr -> expression NE expression .)
    DATATYPE        reduce using rule 39 (comp_expr -> expression NE expression .)
    LPAREN          reduce using rule 39 (comp_expr -> expression NE expression .)
    YES             reduce using rule 39 (comp_expr -> expression NE expression .)
    NO              reduce using rule 39 (comp_expr -> expression NE expression .)
    NUMBER          reduce using rule 39 (comp_expr -> expression NE expression .)
    IDENTIFIER      reduce using rule 39 (comp_expr -> expression NE expression .)
    TEXT            reduce using rule 39 (comp_expr -> expression NE expression .)
    INPUT           reduce using rule 39 (comp_expr -> expression NE expression .)
    NOT             reduce using rule 39 (comp_expr -> expression NE expression .)
    RANDOM          reduce using rule 39 (comp_expr -> expression NE expression .)
    TO              reduce using rule 39 (comp_expr -> expression NE expression .)
    FROM            reduce using rule 39 (comp_expr -> expression NE expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    POWER           shift and go to state 46
    EQ              shift and go to state 47
    GT              shift and go to state 48
    LT              shift and go to state 49
    GE              shift and go to state 50
    LE              shift and go to state 51
    NE              shift and go to state 52
    IN              shift and go to state 53

  ! PLUS            [ reduce using rule 39 (comp_expr -> expression NE expression .) ]
  ! MINUS           [ reduce using rule 39 (comp_expr -> expression NE expression .) ]
  ! TIMES           [ reduce using rule 39 (comp_expr -> expression NE expression .) ]
  ! DIVIDE          [ reduce using rule 39 (comp_expr -> expression NE expression .) ]
  ! POWER           [ reduce using rule 39 (comp_expr -> expression NE expression .) ]
  ! EQ              [ reduce using rule 39 (comp_expr -> expression NE expression .) ]
  ! GT              [ reduce using rule 39 (comp_expr -> expression NE expression .) ]
  ! LT              [ reduce using rule 39 (comp_expr -> expression NE expression .) ]
  ! GE              [ reduce using rule 39 (comp_expr -> expression NE expression .) ]
  ! LE              [ reduce using rule 39 (comp_expr -> expression NE expression .) ]
  ! NE              [ reduce using rule 39 (comp_expr -> expression NE expression .) ]
  ! IN              [ reduce using rule 39 (comp_expr -> expression NE expression .) ]


state 81

    (43) comp_expr -> expression IN expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . POWER expression
    (34) comp_expr -> expression . EQ expression
    (35) comp_expr -> expression . GT expression
    (36) comp_expr -> expression . LT expression
    (37) comp_expr -> expression . GE expression
    (38) comp_expr -> expression . LE expression
    (39) comp_expr -> expression . NE expression
    (43) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    AND             reduce using rule 43 (comp_expr -> expression IN expression .)
    OR              reduce using rule 43 (comp_expr -> expression IN expression .)
    OUTPUT          reduce using rule 43 (comp_expr -> expression IN expression .)
    REPEAT          reduce using rule 43 (comp_expr -> expression IN expression .)
    PAUSE           reduce using rule 43 (comp_expr -> expression IN expression .)
    FUNCTION        reduce using rule 43 (comp_expr -> expression IN expression .)
    WHILE           reduce using rule 43 (comp_expr -> expression IN expression .)
    FOREVER         reduce using rule 43 (comp_expr -> expression IN expression .)
    EXIT            reduce using rule 43 (comp_expr -> expression IN expression .)
    SET             reduce using rule 43 (comp_expr -> expression IN expression .)
    IF              reduce using rule 43 (comp_expr -> expression IN expression .)
    $end            reduce using rule 43 (comp_expr -> expression IN expression .)
    UNTIL           reduce using rule 43 (comp_expr -> expression IN expression .)
    END             reduce using rule 43 (comp_expr -> expression IN expression .)
    ELSE            reduce using rule 43 (comp_expr -> expression IN expression .)
    DO              reduce using rule 43 (comp_expr -> expression IN expression .)
    THEN            reduce using rule 43 (comp_expr -> expression IN expression .)
    RPAREN          reduce using rule 43 (comp_expr -> expression IN expression .)
    TYPE            reduce using rule 43 (comp_expr -> expression IN expression .)
    DATATYPE        reduce using rule 43 (comp_expr -> expression IN expression .)
    LPAREN          reduce using rule 43 (comp_expr -> expression IN expression .)
    YES             reduce using rule 43 (comp_expr -> expression IN expression .)
    NO              reduce using rule 43 (comp_expr -> expression IN expression .)
    NUMBER          reduce using rule 43 (comp_expr -> expression IN expression .)
    IDENTIFIER      reduce using rule 43 (comp_expr -> expression IN expression .)
    TEXT            reduce using rule 43 (comp_expr -> expression IN expression .)
    INPUT           reduce using rule 43 (comp_expr -> expression IN expression .)
    NOT             reduce using rule 43 (comp_expr -> expression IN expression .)
    RANDOM          reduce using rule 43 (comp_expr -> expression IN expression .)
    TO              reduce using rule 43 (comp_expr -> expression IN expression .)
    FROM            reduce using rule 43 (comp_expr -> expression IN expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    POWER           shift and go to state 46
    EQ              shift and go to state 47
    GT              shift and go to state 48
    LT              shift and go to state 49
    GE              shift and go to state 50
    LE              shift and go to state 51
    NE              shift and go to state 52
    IN              shift and go to state 53

  ! PLUS            [ reduce using rule 43 (comp_expr -> expression IN expression .) ]
  ! MINUS           [ reduce using rule 43 (comp_expr -> expression IN expression .) ]
  ! TIMES           [ reduce using rule 43 (comp_expr -> expression IN expression .) ]
  ! DIVIDE          [ reduce using rule 43 (comp_expr -> expression IN expression .) ]
  ! POWER           [ reduce using rule 43 (comp_expr -> expression IN expression .) ]
  ! EQ              [ reduce using rule 43 (comp_expr -> expression IN expression .) ]
  ! GT              [ reduce using rule 43 (comp_expr -> expression IN expression .) ]
  ! LT              [ reduce using rule 43 (comp_expr -> expression IN expression .) ]
  ! GE              [ reduce using rule 43 (comp_expr -> expression IN expression .) ]
  ! LE              [ reduce using rule 43 (comp_expr -> expression IN expression .) ]
  ! NE              [ reduce using rule 43 (comp_expr -> expression IN expression .) ]
  ! IN              [ reduce using rule 43 (comp_expr -> expression IN expression .) ]


state 82

    (23) expression -> DATATYPE FROM expression . TO expression FROM expression
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . POWER expression
    (34) comp_expr -> expression . EQ expression
    (35) comp_expr -> expression . GT expression
    (36) comp_expr -> expression . LT expression
    (37) comp_expr -> expression . GE expression
    (38) comp_expr -> expression . LE expression
    (39) comp_expr -> expression . NE expression
    (43) comp_expr -> expression . IN expression

    TO              shift and go to state 98
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    POWER           shift and go to state 46
    EQ              shift and go to state 47
    GT              shift and go to state 48
    LT              shift and go to state 49
    GE              shift and go to state 50
    LE              shift and go to state 51
    NE              shift and go to state 52
    IN              shift and go to state 53


state 83

    (31) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    POWER           reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    IN              reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    OUTPUT          reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    REPEAT          reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    PAUSE           reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    FUNCTION        reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    FOREVER         reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    EXIT            reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    SET             reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    UNTIL           reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    END             reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    DO              reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    THEN            reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    TYPE            reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    DATATYPE        reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    YES             reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    NO              reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    NUMBER          reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    TEXT            reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    INPUT           reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    NOT             reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    RANDOM          reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    TO              reduce using rule 31 (expression -> LPAREN expression RPAREN .)
    FROM            reduce using rule 31 (expression -> LPAREN expression RPAREN .)


state 84

    (40) comp_expr -> comp_expr AND comp_expr .
    (40) comp_expr -> comp_expr . AND comp_expr
    (41) comp_expr -> comp_expr . OR comp_expr
    (44) expression -> comp_expr .

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! reduce/reduce conflict for EQ resolved using rule 40 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for GT resolved using rule 40 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for LT resolved using rule 40 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for GE resolved using rule 40 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for LE resolved using rule 40 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for NE resolved using rule 40 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for IN resolved using rule 40 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for PLUS resolved using rule 40 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for MINUS resolved using rule 40 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for TIMES resolved using rule 40 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 40 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for POWER resolved using rule 40 (comp_expr -> comp_expr AND comp_expr .)
    PLUS            reduce using rule 40 (comp_expr -> comp_expr AND comp_expr .)
    MINUS           reduce using rule 40 (comp_expr -> comp_expr AND comp_expr .)
    TIMES           reduce using rule 40 (comp_expr -> comp_expr AND comp_expr .)
    DIVIDE          reduce using rule 40 (comp_expr -> comp_expr AND comp_expr .)
    POWER           reduce using rule 40 (comp_expr -> comp_expr AND comp_expr .)
    EQ              reduce using rule 40 (comp_expr -> comp_expr AND comp_expr .)
    GT              reduce using rule 40 (comp_expr -> comp_expr AND comp_expr .)
    LT              reduce using rule 40 (comp_expr -> comp_expr AND comp_expr .)
    GE              reduce using rule 40 (comp_expr -> comp_expr AND comp_expr .)
    LE              reduce using rule 40 (comp_expr -> comp_expr AND comp_expr .)
    NE              reduce using rule 40 (comp_expr -> comp_expr AND comp_expr .)
    IN              reduce using rule 40 (comp_expr -> comp_expr AND comp_expr .)
    OUTPUT          reduce using rule 40 (comp_expr -> comp_expr AND comp_expr .)
    REPEAT          reduce using rule 40 (comp_expr -> comp_expr AND comp_expr .)
    PAUSE           reduce using rule 40 (comp_expr -> comp_expr AND comp_expr .)
    FUNCTION        reduce using rule 40 (comp_expr -> comp_expr AND comp_expr .)
    WHILE           reduce using rule 40 (comp_expr -> comp_expr AND comp_expr .)
    FOREVER         reduce using rule 40 (comp_expr -> comp_expr AND comp_expr .)
    EXIT            reduce using rule 40 (comp_expr -> comp_expr AND comp_expr .)
    SET             reduce using rule 40 (comp_expr -> comp_expr AND comp_expr .)
    IF              reduce using rule 40 (comp_expr -> comp_expr AND comp_expr .)
    $end            reduce using rule 40 (comp_expr -> comp_expr AND comp_expr .)
    UNTIL           reduce using rule 40 (comp_expr -> comp_expr AND comp_expr .)
    END             reduce using rule 40 (comp_expr -> comp_expr AND comp_expr .)
    ELSE            reduce using rule 40 (comp_expr -> comp_expr AND comp_expr .)
    DO              reduce using rule 40 (comp_expr -> comp_expr AND comp_expr .)
    THEN            reduce using rule 40 (comp_expr -> comp_expr AND comp_expr .)
    RPAREN          reduce using rule 40 (comp_expr -> comp_expr AND comp_expr .)
    TYPE            reduce using rule 40 (comp_expr -> comp_expr AND comp_expr .)
    DATATYPE        reduce using rule 40 (comp_expr -> comp_expr AND comp_expr .)
    LPAREN          reduce using rule 40 (comp_expr -> comp_expr AND comp_expr .)
    YES             reduce using rule 40 (comp_expr -> comp_expr AND comp_expr .)
    NO              reduce using rule 40 (comp_expr -> comp_expr AND comp_expr .)
    NUMBER          reduce using rule 40 (comp_expr -> comp_expr AND comp_expr .)
    IDENTIFIER      reduce using rule 40 (comp_expr -> comp_expr AND comp_expr .)
    TEXT            reduce using rule 40 (comp_expr -> comp_expr AND comp_expr .)
    INPUT           reduce using rule 40 (comp_expr -> comp_expr AND comp_expr .)
    NOT             reduce using rule 40 (comp_expr -> comp_expr AND comp_expr .)
    RANDOM          reduce using rule 40 (comp_expr -> comp_expr AND comp_expr .)
    TO              reduce using rule 40 (comp_expr -> comp_expr AND comp_expr .)
    FROM            reduce using rule 40 (comp_expr -> comp_expr AND comp_expr .)
    AND             shift and go to state 56
    OR              shift and go to state 57

  ! AND             [ reduce using rule 40 (comp_expr -> comp_expr AND comp_expr .) ]
  ! OR              [ reduce using rule 40 (comp_expr -> comp_expr AND comp_expr .) ]
  ! EQ              [ reduce using rule 44 (expression -> comp_expr .) ]
  ! GT              [ reduce using rule 44 (expression -> comp_expr .) ]
  ! LT              [ reduce using rule 44 (expression -> comp_expr .) ]
  ! GE              [ reduce using rule 44 (expression -> comp_expr .) ]
  ! LE              [ reduce using rule 44 (expression -> comp_expr .) ]
  ! NE              [ reduce using rule 44 (expression -> comp_expr .) ]
  ! IN              [ reduce using rule 44 (expression -> comp_expr .) ]
  ! PLUS            [ reduce using rule 44 (expression -> comp_expr .) ]
  ! MINUS           [ reduce using rule 44 (expression -> comp_expr .) ]
  ! TIMES           [ reduce using rule 44 (expression -> comp_expr .) ]
  ! DIVIDE          [ reduce using rule 44 (expression -> comp_expr .) ]
  ! POWER           [ reduce using rule 44 (expression -> comp_expr .) ]


state 85

    (34) comp_expr -> expression . EQ expression
    (35) comp_expr -> expression . GT expression
    (36) comp_expr -> expression . LT expression
    (37) comp_expr -> expression . GE expression
    (38) comp_expr -> expression . LE expression
    (39) comp_expr -> expression . NE expression
    (43) comp_expr -> expression . IN expression
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . POWER expression

    EQ              shift and go to state 47
    GT              shift and go to state 48
    LT              shift and go to state 49
    GE              shift and go to state 50
    LE              shift and go to state 51
    NE              shift and go to state 52
    IN              shift and go to state 53
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    POWER           shift and go to state 46


state 86

    (41) comp_expr -> comp_expr OR comp_expr .
    (40) comp_expr -> comp_expr . AND comp_expr
    (41) comp_expr -> comp_expr . OR comp_expr
    (44) expression -> comp_expr .

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! reduce/reduce conflict for EQ resolved using rule 41 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for GT resolved using rule 41 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for LT resolved using rule 41 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for GE resolved using rule 41 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for LE resolved using rule 41 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for NE resolved using rule 41 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for IN resolved using rule 41 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for PLUS resolved using rule 41 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for MINUS resolved using rule 41 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for TIMES resolved using rule 41 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 41 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for POWER resolved using rule 41 (comp_expr -> comp_expr OR comp_expr .)
    PLUS            reduce using rule 41 (comp_expr -> comp_expr OR comp_expr .)
    MINUS           reduce using rule 41 (comp_expr -> comp_expr OR comp_expr .)
    TIMES           reduce using rule 41 (comp_expr -> comp_expr OR comp_expr .)
    DIVIDE          reduce using rule 41 (comp_expr -> comp_expr OR comp_expr .)
    POWER           reduce using rule 41 (comp_expr -> comp_expr OR comp_expr .)
    EQ              reduce using rule 41 (comp_expr -> comp_expr OR comp_expr .)
    GT              reduce using rule 41 (comp_expr -> comp_expr OR comp_expr .)
    LT              reduce using rule 41 (comp_expr -> comp_expr OR comp_expr .)
    GE              reduce using rule 41 (comp_expr -> comp_expr OR comp_expr .)
    LE              reduce using rule 41 (comp_expr -> comp_expr OR comp_expr .)
    NE              reduce using rule 41 (comp_expr -> comp_expr OR comp_expr .)
    IN              reduce using rule 41 (comp_expr -> comp_expr OR comp_expr .)
    OUTPUT          reduce using rule 41 (comp_expr -> comp_expr OR comp_expr .)
    REPEAT          reduce using rule 41 (comp_expr -> comp_expr OR comp_expr .)
    PAUSE           reduce using rule 41 (comp_expr -> comp_expr OR comp_expr .)
    FUNCTION        reduce using rule 41 (comp_expr -> comp_expr OR comp_expr .)
    WHILE           reduce using rule 41 (comp_expr -> comp_expr OR comp_expr .)
    FOREVER         reduce using rule 41 (comp_expr -> comp_expr OR comp_expr .)
    EXIT            reduce using rule 41 (comp_expr -> comp_expr OR comp_expr .)
    SET             reduce using rule 41 (comp_expr -> comp_expr OR comp_expr .)
    IF              reduce using rule 41 (comp_expr -> comp_expr OR comp_expr .)
    $end            reduce using rule 41 (comp_expr -> comp_expr OR comp_expr .)
    UNTIL           reduce using rule 41 (comp_expr -> comp_expr OR comp_expr .)
    END             reduce using rule 41 (comp_expr -> comp_expr OR comp_expr .)
    ELSE            reduce using rule 41 (comp_expr -> comp_expr OR comp_expr .)
    DO              reduce using rule 41 (comp_expr -> comp_expr OR comp_expr .)
    THEN            reduce using rule 41 (comp_expr -> comp_expr OR comp_expr .)
    RPAREN          reduce using rule 41 (comp_expr -> comp_expr OR comp_expr .)
    TYPE            reduce using rule 41 (comp_expr -> comp_expr OR comp_expr .)
    DATATYPE        reduce using rule 41 (comp_expr -> comp_expr OR comp_expr .)
    LPAREN          reduce using rule 41 (comp_expr -> comp_expr OR comp_expr .)
    YES             reduce using rule 41 (comp_expr -> comp_expr OR comp_expr .)
    NO              reduce using rule 41 (comp_expr -> comp_expr OR comp_expr .)
    NUMBER          reduce using rule 41 (comp_expr -> comp_expr OR comp_expr .)
    IDENTIFIER      reduce using rule 41 (comp_expr -> comp_expr OR comp_expr .)
    TEXT            reduce using rule 41 (comp_expr -> comp_expr OR comp_expr .)
    INPUT           reduce using rule 41 (comp_expr -> comp_expr OR comp_expr .)
    NOT             reduce using rule 41 (comp_expr -> comp_expr OR comp_expr .)
    RANDOM          reduce using rule 41 (comp_expr -> comp_expr OR comp_expr .)
    TO              reduce using rule 41 (comp_expr -> comp_expr OR comp_expr .)
    FROM            reduce using rule 41 (comp_expr -> comp_expr OR comp_expr .)
    AND             shift and go to state 56
    OR              shift and go to state 57

  ! AND             [ reduce using rule 41 (comp_expr -> comp_expr OR comp_expr .) ]
  ! OR              [ reduce using rule 41 (comp_expr -> comp_expr OR comp_expr .) ]
  ! EQ              [ reduce using rule 44 (expression -> comp_expr .) ]
  ! GT              [ reduce using rule 44 (expression -> comp_expr .) ]
  ! LT              [ reduce using rule 44 (expression -> comp_expr .) ]
  ! GE              [ reduce using rule 44 (expression -> comp_expr .) ]
  ! LE              [ reduce using rule 44 (expression -> comp_expr .) ]
  ! NE              [ reduce using rule 44 (expression -> comp_expr .) ]
  ! IN              [ reduce using rule 44 (expression -> comp_expr .) ]
  ! PLUS            [ reduce using rule 44 (expression -> comp_expr .) ]
  ! MINUS           [ reduce using rule 44 (expression -> comp_expr .) ]
  ! TIMES           [ reduce using rule 44 (expression -> comp_expr .) ]
  ! DIVIDE          [ reduce using rule 44 (expression -> comp_expr .) ]
  ! POWER           [ reduce using rule 44 (expression -> comp_expr .) ]


state 87

    (6) ask -> TEXT EXPECTING INPUT . AND DATATYPE

    AND             shift and go to state 99


state 88

    (7) random_statement -> RANDOM DATATYPE FROM . expression TO expression
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression POWER expression
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . YES
    (33) expression -> . NO
    (44) expression -> . comp_expr
    (45) expression -> . NUMBER
    (46) expression -> . IDENTIFIER
    (47) expression -> . random_statement
    (48) expression -> . TEXT
    (49) expression -> . INPUT
    (34) comp_expr -> . expression EQ expression
    (35) comp_expr -> . expression GT expression
    (36) comp_expr -> . expression LT expression
    (37) comp_expr -> . expression GE expression
    (38) comp_expr -> . expression LE expression
    (39) comp_expr -> . expression NE expression
    (40) comp_expr -> . comp_expr AND comp_expr
    (41) comp_expr -> . comp_expr OR comp_expr
    (42) comp_expr -> . NOT expression
    (43) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LPAREN          shift and go to state 18
    YES             shift and go to state 19
    NO              shift and go to state 20
    NUMBER          shift and go to state 22
    IDENTIFIER      shift and go to state 23
    TEXT            shift and go to state 35
    INPUT           shift and go to state 26
    NOT             shift and go to state 27
    RANDOM          shift and go to state 28

    expression                     shift and go to state 100
    comp_expr                      shift and go to state 21
    random_statement               shift and go to state 24

state 89

    (12) statement -> var_assignment TO items type_stmt .

    OUTPUT          reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    REPEAT          reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    PAUSE           reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    FUNCTION        reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    WHILE           reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    FOREVER         reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    EXIT            reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    SET             reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    IF              reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    $end            reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    UNTIL           reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    END             reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    ELSE            reduce using rule 12 (statement -> var_assignment TO items type_stmt .)


state 90

    (25) items -> items expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . POWER expression
    (34) comp_expr -> expression . EQ expression
    (35) comp_expr -> expression . GT expression
    (36) comp_expr -> expression . LT expression
    (37) comp_expr -> expression . GE expression
    (38) comp_expr -> expression . LE expression
    (39) comp_expr -> expression . NE expression
    (43) comp_expr -> expression . IN expression

    TYPE            reduce using rule 25 (items -> items expression .)
    DATATYPE        reduce using rule 25 (items -> items expression .)
    LPAREN          reduce using rule 25 (items -> items expression .)
    YES             reduce using rule 25 (items -> items expression .)
    NO              reduce using rule 25 (items -> items expression .)
    NUMBER          reduce using rule 25 (items -> items expression .)
    IDENTIFIER      reduce using rule 25 (items -> items expression .)
    TEXT            reduce using rule 25 (items -> items expression .)
    INPUT           reduce using rule 25 (items -> items expression .)
    NOT             reduce using rule 25 (items -> items expression .)
    RANDOM          reduce using rule 25 (items -> items expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    POWER           shift and go to state 46
    EQ              shift and go to state 47
    GT              shift and go to state 48
    LT              shift and go to state 49
    GE              shift and go to state 50
    LE              shift and go to state 51
    NE              shift and go to state 52
    IN              shift and go to state 53


state 91

    (18) type_stmt -> TYPE . DATATYPE

    DATATYPE        shift and go to state 101


state 92

    (15) statement -> if_then ELSE THEN statements . end_statement
    (2) statements -> statements . statement
    (3) end_statement -> . END
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . WHILE expression DO statements end_statement
    (21) statement -> . FOREVER DO statements end_statement
    (22) statement -> . EXIT LOOP
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    END             shift and go to state 32
    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    FOREVER         shift and go to state 10
    EXIT            shift and go to state 11
    SET             shift and go to state 12
    IF              shift and go to state 13

    if_then                        shift and go to state 5
    end_statement                  shift and go to state 102
    statement                      shift and go to state 14
    var_assignment                 shift and go to state 4

state 93

    (16) statement -> REPEAT statements UNTIL expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . POWER expression
    (34) comp_expr -> expression . EQ expression
    (35) comp_expr -> expression . GT expression
    (36) comp_expr -> expression . LT expression
    (37) comp_expr -> expression . GE expression
    (38) comp_expr -> expression . LE expression
    (39) comp_expr -> expression . NE expression
    (43) comp_expr -> expression . IN expression

    OUTPUT          reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    REPEAT          reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    PAUSE           reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    FUNCTION        reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    WHILE           reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    FOREVER         reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    EXIT            reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    SET             reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    IF              reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    $end            reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    UNTIL           reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    END             reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    ELSE            reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    POWER           shift and go to state 46
    EQ              shift and go to state 47
    GT              shift and go to state 48
    LT              shift and go to state 49
    GE              shift and go to state 50
    LE              shift and go to state 51
    NE              shift and go to state 52
    IN              shift and go to state 53


state 94

    (19) statement -> FUNCTION IDENTIFIER MEANS statements . end_statement
    (2) statements -> statements . statement
    (3) end_statement -> . END
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . WHILE expression DO statements end_statement
    (21) statement -> . FOREVER DO statements end_statement
    (22) statement -> . EXIT LOOP
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    END             shift and go to state 32
    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    FOREVER         shift and go to state 10
    EXIT            shift and go to state 11
    SET             shift and go to state 12
    IF              shift and go to state 13

    end_statement                  shift and go to state 103
    statement                      shift and go to state 14
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 95

    (20) statement -> WHILE expression DO statements . end_statement
    (2) statements -> statements . statement
    (3) end_statement -> . END
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . WHILE expression DO statements end_statement
    (21) statement -> . FOREVER DO statements end_statement
    (22) statement -> . EXIT LOOP
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    END             shift and go to state 32
    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    FOREVER         shift and go to state 10
    EXIT            shift and go to state 11
    SET             shift and go to state 12
    IF              shift and go to state 13

    end_statement                  shift and go to state 104
    statement                      shift and go to state 14
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 96

    (21) statement -> FOREVER DO statements end_statement .

    OUTPUT          reduce using rule 21 (statement -> FOREVER DO statements end_statement .)
    REPEAT          reduce using rule 21 (statement -> FOREVER DO statements end_statement .)
    PAUSE           reduce using rule 21 (statement -> FOREVER DO statements end_statement .)
    FUNCTION        reduce using rule 21 (statement -> FOREVER DO statements end_statement .)
    WHILE           reduce using rule 21 (statement -> FOREVER DO statements end_statement .)
    FOREVER         reduce using rule 21 (statement -> FOREVER DO statements end_statement .)
    EXIT            reduce using rule 21 (statement -> FOREVER DO statements end_statement .)
    SET             reduce using rule 21 (statement -> FOREVER DO statements end_statement .)
    IF              reduce using rule 21 (statement -> FOREVER DO statements end_statement .)
    $end            reduce using rule 21 (statement -> FOREVER DO statements end_statement .)
    UNTIL           reduce using rule 21 (statement -> FOREVER DO statements end_statement .)
    END             reduce using rule 21 (statement -> FOREVER DO statements end_statement .)
    ELSE            reduce using rule 21 (statement -> FOREVER DO statements end_statement .)


state 97

    (13) if_then -> IF expression THEN statements .
    (2) statements -> statements . statement
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . WHILE expression DO statements end_statement
    (21) statement -> . FOREVER DO statements end_statement
    (22) statement -> . EXIT LOOP
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    ELSE            reduce using rule 13 (if_then -> IF expression THEN statements .)
    END             reduce using rule 13 (if_then -> IF expression THEN statements .)
    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    FOREVER         shift and go to state 10
    EXIT            shift and go to state 11
    SET             shift and go to state 12
    IF              shift and go to state 13

    statement                      shift and go to state 14
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 98

    (23) expression -> DATATYPE FROM expression TO . expression FROM expression
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression POWER expression
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . YES
    (33) expression -> . NO
    (44) expression -> . comp_expr
    (45) expression -> . NUMBER
    (46) expression -> . IDENTIFIER
    (47) expression -> . random_statement
    (48) expression -> . TEXT
    (49) expression -> . INPUT
    (34) comp_expr -> . expression EQ expression
    (35) comp_expr -> . expression GT expression
    (36) comp_expr -> . expression LT expression
    (37) comp_expr -> . expression GE expression
    (38) comp_expr -> . expression LE expression
    (39) comp_expr -> . expression NE expression
    (40) comp_expr -> . comp_expr AND comp_expr
    (41) comp_expr -> . comp_expr OR comp_expr
    (42) comp_expr -> . NOT expression
    (43) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LPAREN          shift and go to state 18
    YES             shift and go to state 19
    NO              shift and go to state 20
    NUMBER          shift and go to state 22
    IDENTIFIER      shift and go to state 23
    TEXT            shift and go to state 35
    INPUT           shift and go to state 26
    NOT             shift and go to state 27
    RANDOM          shift and go to state 28

    expression                     shift and go to state 105
    comp_expr                      shift and go to state 21
    random_statement               shift and go to state 24

state 99

    (6) ask -> TEXT EXPECTING INPUT AND . DATATYPE

    DATATYPE        shift and go to state 106


state 100

    (7) random_statement -> RANDOM DATATYPE FROM expression . TO expression
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . POWER expression
    (34) comp_expr -> expression . EQ expression
    (35) comp_expr -> expression . GT expression
    (36) comp_expr -> expression . LT expression
    (37) comp_expr -> expression . GE expression
    (38) comp_expr -> expression . LE expression
    (39) comp_expr -> expression . NE expression
    (43) comp_expr -> expression . IN expression

    TO              shift and go to state 107
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    POWER           shift and go to state 46
    EQ              shift and go to state 47
    GT              shift and go to state 48
    LT              shift and go to state 49
    GE              shift and go to state 50
    LE              shift and go to state 51
    NE              shift and go to state 52
    IN              shift and go to state 53


state 101

    (18) type_stmt -> TYPE DATATYPE .

    OUTPUT          reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    REPEAT          reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    PAUSE           reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    FUNCTION        reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    WHILE           reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    FOREVER         reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    EXIT            reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    SET             reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    IF              reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    $end            reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    UNTIL           reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    END             reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    ELSE            reduce using rule 18 (type_stmt -> TYPE DATATYPE .)


state 102

    (15) statement -> if_then ELSE THEN statements end_statement .

    OUTPUT          reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    REPEAT          reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    PAUSE           reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    FUNCTION        reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    WHILE           reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    FOREVER         reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    EXIT            reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    SET             reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    IF              reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    $end            reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    UNTIL           reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    END             reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    ELSE            reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)


state 103

    (19) statement -> FUNCTION IDENTIFIER MEANS statements end_statement .

    OUTPUT          reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    REPEAT          reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    PAUSE           reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    FUNCTION        reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    WHILE           reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    FOREVER         reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    EXIT            reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    SET             reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    IF              reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    $end            reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    UNTIL           reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    END             reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    ELSE            reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)


state 104

    (20) statement -> WHILE expression DO statements end_statement .

    OUTPUT          reduce using rule 20 (statement -> WHILE expression DO statements end_statement .)
    REPEAT          reduce using rule 20 (statement -> WHILE expression DO statements end_statement .)
    PAUSE           reduce using rule 20 (statement -> WHILE expression DO statements end_statement .)
    FUNCTION        reduce using rule 20 (statement -> WHILE expression DO statements end_statement .)
    WHILE           reduce using rule 20 (statement -> WHILE expression DO statements end_statement .)
    FOREVER         reduce using rule 20 (statement -> WHILE expression DO statements end_statement .)
    EXIT            reduce using rule 20 (statement -> WHILE expression DO statements end_statement .)
    SET             reduce using rule 20 (statement -> WHILE expression DO statements end_statement .)
    IF              reduce using rule 20 (statement -> WHILE expression DO statements end_statement .)
    $end            reduce using rule 20 (statement -> WHILE expression DO statements end_statement .)
    UNTIL           reduce using rule 20 (statement -> WHILE expression DO statements end_statement .)
    END             reduce using rule 20 (statement -> WHILE expression DO statements end_statement .)
    ELSE            reduce using rule 20 (statement -> WHILE expression DO statements end_statement .)


state 105

    (23) expression -> DATATYPE FROM expression TO expression . FROM expression
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . POWER expression
    (34) comp_expr -> expression . EQ expression
    (35) comp_expr -> expression . GT expression
    (36) comp_expr -> expression . LT expression
    (37) comp_expr -> expression . GE expression
    (38) comp_expr -> expression . LE expression
    (39) comp_expr -> expression . NE expression
    (43) comp_expr -> expression . IN expression

    FROM            shift and go to state 108
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    POWER           shift and go to state 46
    EQ              shift and go to state 47
    GT              shift and go to state 48
    LT              shift and go to state 49
    GE              shift and go to state 50
    LE              shift and go to state 51
    NE              shift and go to state 52
    IN              shift and go to state 53


state 106

    (6) ask -> TEXT EXPECTING INPUT AND DATATYPE .

    OUTPUT          reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    REPEAT          reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    PAUSE           reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    FUNCTION        reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    WHILE           reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    FOREVER         reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    EXIT            reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    SET             reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    IF              reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    $end            reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    UNTIL           reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    END             reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    ELSE            reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)


state 107

    (7) random_statement -> RANDOM DATATYPE FROM expression TO . expression
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression POWER expression
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . YES
    (33) expression -> . NO
    (44) expression -> . comp_expr
    (45) expression -> . NUMBER
    (46) expression -> . IDENTIFIER
    (47) expression -> . random_statement
    (48) expression -> . TEXT
    (49) expression -> . INPUT
    (34) comp_expr -> . expression EQ expression
    (35) comp_expr -> . expression GT expression
    (36) comp_expr -> . expression LT expression
    (37) comp_expr -> . expression GE expression
    (38) comp_expr -> . expression LE expression
    (39) comp_expr -> . expression NE expression
    (40) comp_expr -> . comp_expr AND comp_expr
    (41) comp_expr -> . comp_expr OR comp_expr
    (42) comp_expr -> . NOT expression
    (43) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LPAREN          shift and go to state 18
    YES             shift and go to state 19
    NO              shift and go to state 20
    NUMBER          shift and go to state 22
    IDENTIFIER      shift and go to state 23
    TEXT            shift and go to state 35
    INPUT           shift and go to state 26
    NOT             shift and go to state 27
    RANDOM          shift and go to state 28

    expression                     shift and go to state 109
    comp_expr                      shift and go to state 21
    random_statement               shift and go to state 24

state 108

    (23) expression -> DATATYPE FROM expression TO expression FROM . expression
    (23) expression -> . DATATYPE FROM expression TO expression FROM expression
    (26) expression -> . expression PLUS expression
    (27) expression -> . expression MINUS expression
    (28) expression -> . expression TIMES expression
    (29) expression -> . expression DIVIDE expression
    (30) expression -> . expression POWER expression
    (31) expression -> . LPAREN expression RPAREN
    (32) expression -> . YES
    (33) expression -> . NO
    (44) expression -> . comp_expr
    (45) expression -> . NUMBER
    (46) expression -> . IDENTIFIER
    (47) expression -> . random_statement
    (48) expression -> . TEXT
    (49) expression -> . INPUT
    (34) comp_expr -> . expression EQ expression
    (35) comp_expr -> . expression GT expression
    (36) comp_expr -> . expression LT expression
    (37) comp_expr -> . expression GE expression
    (38) comp_expr -> . expression LE expression
    (39) comp_expr -> . expression NE expression
    (40) comp_expr -> . comp_expr AND comp_expr
    (41) comp_expr -> . comp_expr OR comp_expr
    (42) comp_expr -> . NOT expression
    (43) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 17
    LPAREN          shift and go to state 18
    YES             shift and go to state 19
    NO              shift and go to state 20
    NUMBER          shift and go to state 22
    IDENTIFIER      shift and go to state 23
    TEXT            shift and go to state 35
    INPUT           shift and go to state 26
    NOT             shift and go to state 27
    RANDOM          shift and go to state 28

    expression                     shift and go to state 110
    comp_expr                      shift and go to state 21
    random_statement               shift and go to state 24

state 109

    (7) random_statement -> RANDOM DATATYPE FROM expression TO expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . POWER expression
    (34) comp_expr -> expression . EQ expression
    (35) comp_expr -> expression . GT expression
    (36) comp_expr -> expression . LT expression
    (37) comp_expr -> expression . GE expression
    (38) comp_expr -> expression . LE expression
    (39) comp_expr -> expression . NE expression
    (43) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    OUTPUT          reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    REPEAT          reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    PAUSE           reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    FUNCTION        reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    WHILE           reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    FOREVER         reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    EXIT            reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    SET             reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    IF              reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    $end            reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    UNTIL           reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    END             reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    ELSE            reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    DO              reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    THEN            reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    RPAREN          reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    AND             reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    OR              reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    TYPE            reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    DATATYPE        reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    LPAREN          reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    YES             reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    NO              reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    NUMBER          reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    IDENTIFIER      reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    TEXT            reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    INPUT           reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    NOT             reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    RANDOM          reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    TO              reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    FROM            reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    POWER           shift and go to state 46
    EQ              shift and go to state 47
    GT              shift and go to state 48
    LT              shift and go to state 49
    GE              shift and go to state 50
    LE              shift and go to state 51
    NE              shift and go to state 52
    IN              shift and go to state 53

  ! PLUS            [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! MINUS           [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! TIMES           [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! DIVIDE          [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! POWER           [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! EQ              [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! GT              [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! LT              [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! GE              [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! LE              [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! NE              [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! IN              [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]


state 110

    (23) expression -> DATATYPE FROM expression TO expression FROM expression .
    (26) expression -> expression . PLUS expression
    (27) expression -> expression . MINUS expression
    (28) expression -> expression . TIMES expression
    (29) expression -> expression . DIVIDE expression
    (30) expression -> expression . POWER expression
    (34) comp_expr -> expression . EQ expression
    (35) comp_expr -> expression . GT expression
    (36) comp_expr -> expression . LT expression
    (37) comp_expr -> expression . GE expression
    (38) comp_expr -> expression . LE expression
    (39) comp_expr -> expression . NE expression
    (43) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    OUTPUT          reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    REPEAT          reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    PAUSE           reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    FUNCTION        reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    WHILE           reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    FOREVER         reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    EXIT            reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    SET             reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    IF              reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    $end            reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    UNTIL           reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    END             reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    ELSE            reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    DO              reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    THEN            reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    RPAREN          reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    AND             reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    OR              reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    TYPE            reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    DATATYPE        reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    LPAREN          reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    YES             reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    NO              reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    NUMBER          reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    IDENTIFIER      reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    TEXT            reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    INPUT           reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    NOT             reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    RANDOM          reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    TO              reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    FROM            reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    POWER           shift and go to state 46
    EQ              shift and go to state 47
    GT              shift and go to state 48
    LT              shift and go to state 49
    GE              shift and go to state 50
    LE              shift and go to state 51
    NE              shift and go to state 52
    IN              shift and go to state 53

  ! PLUS            [ reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .) ]
  ! MINUS           [ reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .) ]
  ! TIMES           [ reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .) ]
  ! DIVIDE          [ reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .) ]
  ! POWER           [ reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .) ]
  ! EQ              [ reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .) ]
  ! GT              [ reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .) ]
  ! LT              [ reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .) ]
  ! GE              [ reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .) ]
  ! LE              [ reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .) ]
  ! NE              [ reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .) ]
  ! IN              [ reduce using rule 23 (expression -> DATATYPE FROM expression TO expression FROM expression .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for AND in state 21 resolved as shift
WARNING: shift/reduce conflict for OR in state 21 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 59 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 59 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 59 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 59 resolved as shift
WARNING: shift/reduce conflict for POWER in state 59 resolved as shift
WARNING: shift/reduce conflict for EQ in state 59 resolved as shift
WARNING: shift/reduce conflict for GT in state 59 resolved as shift
WARNING: shift/reduce conflict for LT in state 59 resolved as shift
WARNING: shift/reduce conflict for GE in state 59 resolved as shift
WARNING: shift/reduce conflict for LE in state 59 resolved as shift
WARNING: shift/reduce conflict for NE in state 59 resolved as shift
WARNING: shift/reduce conflict for IN in state 59 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 70 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 70 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 70 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 70 resolved as shift
WARNING: shift/reduce conflict for POWER in state 70 resolved as shift
WARNING: shift/reduce conflict for EQ in state 70 resolved as shift
WARNING: shift/reduce conflict for GT in state 70 resolved as shift
WARNING: shift/reduce conflict for LT in state 70 resolved as shift
WARNING: shift/reduce conflict for GE in state 70 resolved as shift
WARNING: shift/reduce conflict for LE in state 70 resolved as shift
WARNING: shift/reduce conflict for NE in state 70 resolved as shift
WARNING: shift/reduce conflict for IN in state 70 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 71 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 71 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 71 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 71 resolved as shift
WARNING: shift/reduce conflict for POWER in state 71 resolved as shift
WARNING: shift/reduce conflict for EQ in state 71 resolved as shift
WARNING: shift/reduce conflict for GT in state 71 resolved as shift
WARNING: shift/reduce conflict for LT in state 71 resolved as shift
WARNING: shift/reduce conflict for GE in state 71 resolved as shift
WARNING: shift/reduce conflict for LE in state 71 resolved as shift
WARNING: shift/reduce conflict for NE in state 71 resolved as shift
WARNING: shift/reduce conflict for IN in state 71 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 72 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 72 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 72 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 72 resolved as shift
WARNING: shift/reduce conflict for POWER in state 72 resolved as shift
WARNING: shift/reduce conflict for EQ in state 72 resolved as shift
WARNING: shift/reduce conflict for GT in state 72 resolved as shift
WARNING: shift/reduce conflict for LT in state 72 resolved as shift
WARNING: shift/reduce conflict for GE in state 72 resolved as shift
WARNING: shift/reduce conflict for LE in state 72 resolved as shift
WARNING: shift/reduce conflict for NE in state 72 resolved as shift
WARNING: shift/reduce conflict for IN in state 72 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 73 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 73 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 73 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 73 resolved as shift
WARNING: shift/reduce conflict for POWER in state 73 resolved as shift
WARNING: shift/reduce conflict for EQ in state 73 resolved as shift
WARNING: shift/reduce conflict for GT in state 73 resolved as shift
WARNING: shift/reduce conflict for LT in state 73 resolved as shift
WARNING: shift/reduce conflict for GE in state 73 resolved as shift
WARNING: shift/reduce conflict for LE in state 73 resolved as shift
WARNING: shift/reduce conflict for NE in state 73 resolved as shift
WARNING: shift/reduce conflict for IN in state 73 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 74 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 74 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 74 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 74 resolved as shift
WARNING: shift/reduce conflict for POWER in state 74 resolved as shift
WARNING: shift/reduce conflict for EQ in state 74 resolved as shift
WARNING: shift/reduce conflict for GT in state 74 resolved as shift
WARNING: shift/reduce conflict for LT in state 74 resolved as shift
WARNING: shift/reduce conflict for GE in state 74 resolved as shift
WARNING: shift/reduce conflict for LE in state 74 resolved as shift
WARNING: shift/reduce conflict for NE in state 74 resolved as shift
WARNING: shift/reduce conflict for IN in state 74 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 75 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 75 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 75 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 75 resolved as shift
WARNING: shift/reduce conflict for POWER in state 75 resolved as shift
WARNING: shift/reduce conflict for EQ in state 75 resolved as shift
WARNING: shift/reduce conflict for GT in state 75 resolved as shift
WARNING: shift/reduce conflict for LT in state 75 resolved as shift
WARNING: shift/reduce conflict for GE in state 75 resolved as shift
WARNING: shift/reduce conflict for LE in state 75 resolved as shift
WARNING: shift/reduce conflict for NE in state 75 resolved as shift
WARNING: shift/reduce conflict for IN in state 75 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 76 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 76 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 76 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 76 resolved as shift
WARNING: shift/reduce conflict for POWER in state 76 resolved as shift
WARNING: shift/reduce conflict for EQ in state 76 resolved as shift
WARNING: shift/reduce conflict for GT in state 76 resolved as shift
WARNING: shift/reduce conflict for LT in state 76 resolved as shift
WARNING: shift/reduce conflict for GE in state 76 resolved as shift
WARNING: shift/reduce conflict for LE in state 76 resolved as shift
WARNING: shift/reduce conflict for NE in state 76 resolved as shift
WARNING: shift/reduce conflict for IN in state 76 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 77 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 77 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 77 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 77 resolved as shift
WARNING: shift/reduce conflict for POWER in state 77 resolved as shift
WARNING: shift/reduce conflict for EQ in state 77 resolved as shift
WARNING: shift/reduce conflict for GT in state 77 resolved as shift
WARNING: shift/reduce conflict for LT in state 77 resolved as shift
WARNING: shift/reduce conflict for GE in state 77 resolved as shift
WARNING: shift/reduce conflict for LE in state 77 resolved as shift
WARNING: shift/reduce conflict for NE in state 77 resolved as shift
WARNING: shift/reduce conflict for IN in state 77 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 78 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 78 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 78 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 78 resolved as shift
WARNING: shift/reduce conflict for POWER in state 78 resolved as shift
WARNING: shift/reduce conflict for EQ in state 78 resolved as shift
WARNING: shift/reduce conflict for GT in state 78 resolved as shift
WARNING: shift/reduce conflict for LT in state 78 resolved as shift
WARNING: shift/reduce conflict for GE in state 78 resolved as shift
WARNING: shift/reduce conflict for LE in state 78 resolved as shift
WARNING: shift/reduce conflict for NE in state 78 resolved as shift
WARNING: shift/reduce conflict for IN in state 78 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 79 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 79 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 79 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 79 resolved as shift
WARNING: shift/reduce conflict for POWER in state 79 resolved as shift
WARNING: shift/reduce conflict for EQ in state 79 resolved as shift
WARNING: shift/reduce conflict for GT in state 79 resolved as shift
WARNING: shift/reduce conflict for LT in state 79 resolved as shift
WARNING: shift/reduce conflict for GE in state 79 resolved as shift
WARNING: shift/reduce conflict for LE in state 79 resolved as shift
WARNING: shift/reduce conflict for NE in state 79 resolved as shift
WARNING: shift/reduce conflict for IN in state 79 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 80 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 80 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 80 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 80 resolved as shift
WARNING: shift/reduce conflict for POWER in state 80 resolved as shift
WARNING: shift/reduce conflict for EQ in state 80 resolved as shift
WARNING: shift/reduce conflict for GT in state 80 resolved as shift
WARNING: shift/reduce conflict for LT in state 80 resolved as shift
WARNING: shift/reduce conflict for GE in state 80 resolved as shift
WARNING: shift/reduce conflict for LE in state 80 resolved as shift
WARNING: shift/reduce conflict for NE in state 80 resolved as shift
WARNING: shift/reduce conflict for IN in state 80 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 81 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 81 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 81 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 81 resolved as shift
WARNING: shift/reduce conflict for POWER in state 81 resolved as shift
WARNING: shift/reduce conflict for EQ in state 81 resolved as shift
WARNING: shift/reduce conflict for GT in state 81 resolved as shift
WARNING: shift/reduce conflict for LT in state 81 resolved as shift
WARNING: shift/reduce conflict for GE in state 81 resolved as shift
WARNING: shift/reduce conflict for LE in state 81 resolved as shift
WARNING: shift/reduce conflict for NE in state 81 resolved as shift
WARNING: shift/reduce conflict for IN in state 81 resolved as shift
WARNING: shift/reduce conflict for AND in state 84 resolved as shift
WARNING: shift/reduce conflict for OR in state 84 resolved as shift
WARNING: shift/reduce conflict for AND in state 86 resolved as shift
WARNING: shift/reduce conflict for OR in state 86 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 109 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 109 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 109 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 109 resolved as shift
WARNING: shift/reduce conflict for POWER in state 109 resolved as shift
WARNING: shift/reduce conflict for EQ in state 109 resolved as shift
WARNING: shift/reduce conflict for GT in state 109 resolved as shift
WARNING: shift/reduce conflict for LT in state 109 resolved as shift
WARNING: shift/reduce conflict for GE in state 109 resolved as shift
WARNING: shift/reduce conflict for LE in state 109 resolved as shift
WARNING: shift/reduce conflict for NE in state 109 resolved as shift
WARNING: shift/reduce conflict for IN in state 109 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 110 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 110 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 110 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 110 resolved as shift
WARNING: shift/reduce conflict for POWER in state 110 resolved as shift
WARNING: shift/reduce conflict for EQ in state 110 resolved as shift
WARNING: shift/reduce conflict for GT in state 110 resolved as shift
WARNING: shift/reduce conflict for LT in state 110 resolved as shift
WARNING: shift/reduce conflict for GE in state 110 resolved as shift
WARNING: shift/reduce conflict for LE in state 110 resolved as shift
WARNING: shift/reduce conflict for NE in state 110 resolved as shift
WARNING: shift/reduce conflict for IN in state 110 resolved as shift
WARNING: reduce/reduce conflict in state 84 resolved using rule (comp_expr -> comp_expr AND comp_expr)
WARNING: rejected rule (expression -> comp_expr) in state 84
WARNING: reduce/reduce conflict in state 86 resolved using rule (comp_expr -> comp_expr OR comp_expr)
WARNING: rejected rule (expression -> comp_expr) in state 86
