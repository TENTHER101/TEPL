Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> OUTPUT expression
Rule 2     statement -> OUTPUT ask
Rule 3     ask -> TEXT EXPECTING INPUT AND DATATYPE
Rule 4     random_statement -> RANDOM DATATYPE FROM expression TO expression
Rule 5     var_assignment -> SET IDENTIFIER
Rule 6     statement -> var_assignment TO expression
Rule 7     statement -> var_assignment
Rule 8     statement -> var_assignment TO ask
Rule 9     statement -> IF comp_expr THEN statement
Rule 10    expression -> expression IF comp_expr
Rule 11    expression -> expression PLUS expression
Rule 12    expression -> expression MINUS expression
Rule 13    expression -> expression TIMES expression
Rule 14    expression -> expression DIVIDE expression
Rule 15    expression -> expression POWER expression
Rule 16    expression -> LPAREN expression RPAREN
Rule 17    expression -> YES
Rule 18    expression -> NO
Rule 19    comp_expr -> expression EQ expression
Rule 20    comp_expr -> expression GT expression
Rule 21    comp_expr -> expression LT expression
Rule 22    comp_expr -> expression GE expression
Rule 23    comp_expr -> expression LE expression
Rule 24    comp_expr -> expression NE expression
Rule 25    expression -> comp_expr
Rule 26    expression -> NUMBER
Rule 27    expression -> IDENTIFIER
Rule 28    expression -> random_statement
Rule 29    expression -> TEXT
Rule 30    expression -> INPUT

Terminals, with rules where they appear

AND                  : 3
DATATYPE             : 3 4
DIVIDE               : 14
EQ                   : 19
EXPECTING            : 3
FROM                 : 4
GE                   : 22
GT                   : 20
IDENTIFIER           : 5 27
IF                   : 9 10
INPUT                : 3 30
LE                   : 23
LPAREN               : 16
LT                   : 21
MINUS                : 12
NE                   : 24
NO                   : 18
NUMBER               : 26
OUTPUT               : 1 2
PLUS                 : 11
POWER                : 15
RANDOM               : 4
RPAREN               : 16
SET                  : 5
TEXT                 : 3 29
THEN                 : 9
TIMES                : 13
TO                   : 4 6 8
YES                  : 17
error                : 

Nonterminals, with rules where they appear

ask                  : 2 8
comp_expr            : 9 10 25
expression           : 1 4 4 6 10 11 11 12 12 13 13 14 14 15 15 16 19 19 20 20 21 21 22 22 23 23 24 24
random_statement     : 28
statement            : 9 0
var_assignment       : 6 7 8

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . OUTPUT expression
    (2) statement -> . OUTPUT ask
    (6) statement -> . var_assignment TO expression
    (7) statement -> . var_assignment
    (8) statement -> . var_assignment TO ask
    (9) statement -> . IF comp_expr THEN statement
    (5) var_assignment -> . SET IDENTIFIER

    OUTPUT          shift and go to state 2
    IF              shift and go to state 4
    SET             shift and go to state 5

    statement                      shift and go to state 1
    var_assignment                 shift and go to state 3

state 1

    (0) S' -> statement .



state 2

    (1) statement -> OUTPUT . expression
    (2) statement -> OUTPUT . ask
    (10) expression -> . expression IF comp_expr
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression TIMES expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression POWER expression
    (16) expression -> . LPAREN expression RPAREN
    (17) expression -> . YES
    (18) expression -> . NO
    (25) expression -> . comp_expr
    (26) expression -> . NUMBER
    (27) expression -> . IDENTIFIER
    (28) expression -> . random_statement
    (29) expression -> . TEXT
    (30) expression -> . INPUT
    (3) ask -> . TEXT EXPECTING INPUT AND DATATYPE
    (19) comp_expr -> . expression EQ expression
    (20) comp_expr -> . expression GT expression
    (21) comp_expr -> . expression LT expression
    (22) comp_expr -> . expression GE expression
    (23) comp_expr -> . expression LE expression
    (24) comp_expr -> . expression NE expression
    (4) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 9
    YES             shift and go to state 10
    NO              shift and go to state 11
    NUMBER          shift and go to state 12
    IDENTIFIER      shift and go to state 13
    TEXT            shift and go to state 15
    INPUT           shift and go to state 16
    RANDOM          shift and go to state 17

    expression                     shift and go to state 6
    ask                            shift and go to state 7
    comp_expr                      shift and go to state 8
    random_statement               shift and go to state 14

state 3

    (6) statement -> var_assignment . TO expression
    (7) statement -> var_assignment .
    (8) statement -> var_assignment . TO ask

    TO              shift and go to state 18
    $end            reduce using rule 7 (statement -> var_assignment .)


state 4

    (9) statement -> IF . comp_expr THEN statement
    (19) comp_expr -> . expression EQ expression
    (20) comp_expr -> . expression GT expression
    (21) comp_expr -> . expression LT expression
    (22) comp_expr -> . expression GE expression
    (23) comp_expr -> . expression LE expression
    (24) comp_expr -> . expression NE expression
    (10) expression -> . expression IF comp_expr
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression TIMES expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression POWER expression
    (16) expression -> . LPAREN expression RPAREN
    (17) expression -> . YES
    (18) expression -> . NO
    (25) expression -> . comp_expr
    (26) expression -> . NUMBER
    (27) expression -> . IDENTIFIER
    (28) expression -> . random_statement
    (29) expression -> . TEXT
    (30) expression -> . INPUT
    (4) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 9
    YES             shift and go to state 10
    NO              shift and go to state 11
    NUMBER          shift and go to state 12
    IDENTIFIER      shift and go to state 13
    TEXT            shift and go to state 21
    INPUT           shift and go to state 16
    RANDOM          shift and go to state 17

    comp_expr                      shift and go to state 19
    expression                     shift and go to state 20
    random_statement               shift and go to state 14

state 5

    (5) var_assignment -> SET . IDENTIFIER

    IDENTIFIER      shift and go to state 22


state 6

    (1) statement -> OUTPUT expression .
    (10) expression -> expression . IF comp_expr
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . TIMES expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . POWER expression
    (19) comp_expr -> expression . EQ expression
    (20) comp_expr -> expression . GT expression
    (21) comp_expr -> expression . LT expression
    (22) comp_expr -> expression . GE expression
    (23) comp_expr -> expression . LE expression
    (24) comp_expr -> expression . NE expression

    $end            reduce using rule 1 (statement -> OUTPUT expression .)
    IF              shift and go to state 23
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27
    POWER           shift and go to state 28
    EQ              shift and go to state 29
    GT              shift and go to state 30
    LT              shift and go to state 31
    GE              shift and go to state 32
    LE              shift and go to state 33
    NE              shift and go to state 34


state 7

    (2) statement -> OUTPUT ask .

    $end            reduce using rule 2 (statement -> OUTPUT ask .)


state 8

    (25) expression -> comp_expr .

    IF              reduce using rule 25 (expression -> comp_expr .)
    PLUS            reduce using rule 25 (expression -> comp_expr .)
    MINUS           reduce using rule 25 (expression -> comp_expr .)
    TIMES           reduce using rule 25 (expression -> comp_expr .)
    DIVIDE          reduce using rule 25 (expression -> comp_expr .)
    POWER           reduce using rule 25 (expression -> comp_expr .)
    EQ              reduce using rule 25 (expression -> comp_expr .)
    GT              reduce using rule 25 (expression -> comp_expr .)
    LT              reduce using rule 25 (expression -> comp_expr .)
    GE              reduce using rule 25 (expression -> comp_expr .)
    LE              reduce using rule 25 (expression -> comp_expr .)
    NE              reduce using rule 25 (expression -> comp_expr .)
    $end            reduce using rule 25 (expression -> comp_expr .)
    RPAREN          reduce using rule 25 (expression -> comp_expr .)
    THEN            reduce using rule 25 (expression -> comp_expr .)
    TO              reduce using rule 25 (expression -> comp_expr .)


state 9

    (16) expression -> LPAREN . expression RPAREN
    (10) expression -> . expression IF comp_expr
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression TIMES expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression POWER expression
    (16) expression -> . LPAREN expression RPAREN
    (17) expression -> . YES
    (18) expression -> . NO
    (25) expression -> . comp_expr
    (26) expression -> . NUMBER
    (27) expression -> . IDENTIFIER
    (28) expression -> . random_statement
    (29) expression -> . TEXT
    (30) expression -> . INPUT
    (19) comp_expr -> . expression EQ expression
    (20) comp_expr -> . expression GT expression
    (21) comp_expr -> . expression LT expression
    (22) comp_expr -> . expression GE expression
    (23) comp_expr -> . expression LE expression
    (24) comp_expr -> . expression NE expression
    (4) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 9
    YES             shift and go to state 10
    NO              shift and go to state 11
    NUMBER          shift and go to state 12
    IDENTIFIER      shift and go to state 13
    TEXT            shift and go to state 21
    INPUT           shift and go to state 16
    RANDOM          shift and go to state 17

    expression                     shift and go to state 35
    comp_expr                      shift and go to state 8
    random_statement               shift and go to state 14

state 10

    (17) expression -> YES .

    IF              reduce using rule 17 (expression -> YES .)
    PLUS            reduce using rule 17 (expression -> YES .)
    MINUS           reduce using rule 17 (expression -> YES .)
    TIMES           reduce using rule 17 (expression -> YES .)
    DIVIDE          reduce using rule 17 (expression -> YES .)
    POWER           reduce using rule 17 (expression -> YES .)
    EQ              reduce using rule 17 (expression -> YES .)
    GT              reduce using rule 17 (expression -> YES .)
    LT              reduce using rule 17 (expression -> YES .)
    GE              reduce using rule 17 (expression -> YES .)
    LE              reduce using rule 17 (expression -> YES .)
    NE              reduce using rule 17 (expression -> YES .)
    $end            reduce using rule 17 (expression -> YES .)
    RPAREN          reduce using rule 17 (expression -> YES .)
    THEN            reduce using rule 17 (expression -> YES .)
    TO              reduce using rule 17 (expression -> YES .)


state 11

    (18) expression -> NO .

    IF              reduce using rule 18 (expression -> NO .)
    PLUS            reduce using rule 18 (expression -> NO .)
    MINUS           reduce using rule 18 (expression -> NO .)
    TIMES           reduce using rule 18 (expression -> NO .)
    DIVIDE          reduce using rule 18 (expression -> NO .)
    POWER           reduce using rule 18 (expression -> NO .)
    EQ              reduce using rule 18 (expression -> NO .)
    GT              reduce using rule 18 (expression -> NO .)
    LT              reduce using rule 18 (expression -> NO .)
    GE              reduce using rule 18 (expression -> NO .)
    LE              reduce using rule 18 (expression -> NO .)
    NE              reduce using rule 18 (expression -> NO .)
    $end            reduce using rule 18 (expression -> NO .)
    RPAREN          reduce using rule 18 (expression -> NO .)
    THEN            reduce using rule 18 (expression -> NO .)
    TO              reduce using rule 18 (expression -> NO .)


state 12

    (26) expression -> NUMBER .

    IF              reduce using rule 26 (expression -> NUMBER .)
    PLUS            reduce using rule 26 (expression -> NUMBER .)
    MINUS           reduce using rule 26 (expression -> NUMBER .)
    TIMES           reduce using rule 26 (expression -> NUMBER .)
    DIVIDE          reduce using rule 26 (expression -> NUMBER .)
    POWER           reduce using rule 26 (expression -> NUMBER .)
    EQ              reduce using rule 26 (expression -> NUMBER .)
    GT              reduce using rule 26 (expression -> NUMBER .)
    LT              reduce using rule 26 (expression -> NUMBER .)
    GE              reduce using rule 26 (expression -> NUMBER .)
    LE              reduce using rule 26 (expression -> NUMBER .)
    NE              reduce using rule 26 (expression -> NUMBER .)
    $end            reduce using rule 26 (expression -> NUMBER .)
    RPAREN          reduce using rule 26 (expression -> NUMBER .)
    THEN            reduce using rule 26 (expression -> NUMBER .)
    TO              reduce using rule 26 (expression -> NUMBER .)


state 13

    (27) expression -> IDENTIFIER .

    IF              reduce using rule 27 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 27 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 27 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 27 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 27 (expression -> IDENTIFIER .)
    POWER           reduce using rule 27 (expression -> IDENTIFIER .)
    EQ              reduce using rule 27 (expression -> IDENTIFIER .)
    GT              reduce using rule 27 (expression -> IDENTIFIER .)
    LT              reduce using rule 27 (expression -> IDENTIFIER .)
    GE              reduce using rule 27 (expression -> IDENTIFIER .)
    LE              reduce using rule 27 (expression -> IDENTIFIER .)
    NE              reduce using rule 27 (expression -> IDENTIFIER .)
    $end            reduce using rule 27 (expression -> IDENTIFIER .)
    RPAREN          reduce using rule 27 (expression -> IDENTIFIER .)
    THEN            reduce using rule 27 (expression -> IDENTIFIER .)
    TO              reduce using rule 27 (expression -> IDENTIFIER .)


state 14

    (28) expression -> random_statement .

    IF              reduce using rule 28 (expression -> random_statement .)
    PLUS            reduce using rule 28 (expression -> random_statement .)
    MINUS           reduce using rule 28 (expression -> random_statement .)
    TIMES           reduce using rule 28 (expression -> random_statement .)
    DIVIDE          reduce using rule 28 (expression -> random_statement .)
    POWER           reduce using rule 28 (expression -> random_statement .)
    EQ              reduce using rule 28 (expression -> random_statement .)
    GT              reduce using rule 28 (expression -> random_statement .)
    LT              reduce using rule 28 (expression -> random_statement .)
    GE              reduce using rule 28 (expression -> random_statement .)
    LE              reduce using rule 28 (expression -> random_statement .)
    NE              reduce using rule 28 (expression -> random_statement .)
    $end            reduce using rule 28 (expression -> random_statement .)
    RPAREN          reduce using rule 28 (expression -> random_statement .)
    THEN            reduce using rule 28 (expression -> random_statement .)
    TO              reduce using rule 28 (expression -> random_statement .)


state 15

    (29) expression -> TEXT .
    (3) ask -> TEXT . EXPECTING INPUT AND DATATYPE

    IF              reduce using rule 29 (expression -> TEXT .)
    PLUS            reduce using rule 29 (expression -> TEXT .)
    MINUS           reduce using rule 29 (expression -> TEXT .)
    TIMES           reduce using rule 29 (expression -> TEXT .)
    DIVIDE          reduce using rule 29 (expression -> TEXT .)
    POWER           reduce using rule 29 (expression -> TEXT .)
    EQ              reduce using rule 29 (expression -> TEXT .)
    GT              reduce using rule 29 (expression -> TEXT .)
    LT              reduce using rule 29 (expression -> TEXT .)
    GE              reduce using rule 29 (expression -> TEXT .)
    LE              reduce using rule 29 (expression -> TEXT .)
    NE              reduce using rule 29 (expression -> TEXT .)
    $end            reduce using rule 29 (expression -> TEXT .)
    EXPECTING       shift and go to state 36


state 16

    (30) expression -> INPUT .

    IF              reduce using rule 30 (expression -> INPUT .)
    PLUS            reduce using rule 30 (expression -> INPUT .)
    MINUS           reduce using rule 30 (expression -> INPUT .)
    TIMES           reduce using rule 30 (expression -> INPUT .)
    DIVIDE          reduce using rule 30 (expression -> INPUT .)
    POWER           reduce using rule 30 (expression -> INPUT .)
    EQ              reduce using rule 30 (expression -> INPUT .)
    GT              reduce using rule 30 (expression -> INPUT .)
    LT              reduce using rule 30 (expression -> INPUT .)
    GE              reduce using rule 30 (expression -> INPUT .)
    LE              reduce using rule 30 (expression -> INPUT .)
    NE              reduce using rule 30 (expression -> INPUT .)
    $end            reduce using rule 30 (expression -> INPUT .)
    RPAREN          reduce using rule 30 (expression -> INPUT .)
    THEN            reduce using rule 30 (expression -> INPUT .)
    TO              reduce using rule 30 (expression -> INPUT .)


state 17

    (4) random_statement -> RANDOM . DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 37


state 18

    (6) statement -> var_assignment TO . expression
    (8) statement -> var_assignment TO . ask
    (10) expression -> . expression IF comp_expr
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression TIMES expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression POWER expression
    (16) expression -> . LPAREN expression RPAREN
    (17) expression -> . YES
    (18) expression -> . NO
    (25) expression -> . comp_expr
    (26) expression -> . NUMBER
    (27) expression -> . IDENTIFIER
    (28) expression -> . random_statement
    (29) expression -> . TEXT
    (30) expression -> . INPUT
    (3) ask -> . TEXT EXPECTING INPUT AND DATATYPE
    (19) comp_expr -> . expression EQ expression
    (20) comp_expr -> . expression GT expression
    (21) comp_expr -> . expression LT expression
    (22) comp_expr -> . expression GE expression
    (23) comp_expr -> . expression LE expression
    (24) comp_expr -> . expression NE expression
    (4) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 9
    YES             shift and go to state 10
    NO              shift and go to state 11
    NUMBER          shift and go to state 12
    IDENTIFIER      shift and go to state 13
    TEXT            shift and go to state 15
    INPUT           shift and go to state 16
    RANDOM          shift and go to state 17

    expression                     shift and go to state 38
    ask                            shift and go to state 39
    comp_expr                      shift and go to state 8
    random_statement               shift and go to state 14

state 19

    (9) statement -> IF comp_expr . THEN statement
    (25) expression -> comp_expr .

    THEN            shift and go to state 40
    EQ              reduce using rule 25 (expression -> comp_expr .)
    GT              reduce using rule 25 (expression -> comp_expr .)
    LT              reduce using rule 25 (expression -> comp_expr .)
    GE              reduce using rule 25 (expression -> comp_expr .)
    LE              reduce using rule 25 (expression -> comp_expr .)
    NE              reduce using rule 25 (expression -> comp_expr .)
    IF              reduce using rule 25 (expression -> comp_expr .)
    PLUS            reduce using rule 25 (expression -> comp_expr .)
    MINUS           reduce using rule 25 (expression -> comp_expr .)
    TIMES           reduce using rule 25 (expression -> comp_expr .)
    DIVIDE          reduce using rule 25 (expression -> comp_expr .)
    POWER           reduce using rule 25 (expression -> comp_expr .)


state 20

    (19) comp_expr -> expression . EQ expression
    (20) comp_expr -> expression . GT expression
    (21) comp_expr -> expression . LT expression
    (22) comp_expr -> expression . GE expression
    (23) comp_expr -> expression . LE expression
    (24) comp_expr -> expression . NE expression
    (10) expression -> expression . IF comp_expr
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . TIMES expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . POWER expression

    EQ              shift and go to state 29
    GT              shift and go to state 30
    LT              shift and go to state 31
    GE              shift and go to state 32
    LE              shift and go to state 33
    NE              shift and go to state 34
    IF              shift and go to state 23
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27
    POWER           shift and go to state 28


state 21

    (29) expression -> TEXT .

    EQ              reduce using rule 29 (expression -> TEXT .)
    GT              reduce using rule 29 (expression -> TEXT .)
    LT              reduce using rule 29 (expression -> TEXT .)
    GE              reduce using rule 29 (expression -> TEXT .)
    LE              reduce using rule 29 (expression -> TEXT .)
    NE              reduce using rule 29 (expression -> TEXT .)
    IF              reduce using rule 29 (expression -> TEXT .)
    PLUS            reduce using rule 29 (expression -> TEXT .)
    MINUS           reduce using rule 29 (expression -> TEXT .)
    TIMES           reduce using rule 29 (expression -> TEXT .)
    DIVIDE          reduce using rule 29 (expression -> TEXT .)
    POWER           reduce using rule 29 (expression -> TEXT .)
    RPAREN          reduce using rule 29 (expression -> TEXT .)
    $end            reduce using rule 29 (expression -> TEXT .)
    THEN            reduce using rule 29 (expression -> TEXT .)
    TO              reduce using rule 29 (expression -> TEXT .)


state 22

    (5) var_assignment -> SET IDENTIFIER .

    TO              reduce using rule 5 (var_assignment -> SET IDENTIFIER .)
    $end            reduce using rule 5 (var_assignment -> SET IDENTIFIER .)


state 23

    (10) expression -> expression IF . comp_expr
    (19) comp_expr -> . expression EQ expression
    (20) comp_expr -> . expression GT expression
    (21) comp_expr -> . expression LT expression
    (22) comp_expr -> . expression GE expression
    (23) comp_expr -> . expression LE expression
    (24) comp_expr -> . expression NE expression
    (10) expression -> . expression IF comp_expr
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression TIMES expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression POWER expression
    (16) expression -> . LPAREN expression RPAREN
    (17) expression -> . YES
    (18) expression -> . NO
    (25) expression -> . comp_expr
    (26) expression -> . NUMBER
    (27) expression -> . IDENTIFIER
    (28) expression -> . random_statement
    (29) expression -> . TEXT
    (30) expression -> . INPUT
    (4) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 9
    YES             shift and go to state 10
    NO              shift and go to state 11
    NUMBER          shift and go to state 12
    IDENTIFIER      shift and go to state 13
    TEXT            shift and go to state 21
    INPUT           shift and go to state 16
    RANDOM          shift and go to state 17

    expression                     shift and go to state 20
    comp_expr                      shift and go to state 41
    random_statement               shift and go to state 14

state 24

    (11) expression -> expression PLUS . expression
    (10) expression -> . expression IF comp_expr
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression TIMES expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression POWER expression
    (16) expression -> . LPAREN expression RPAREN
    (17) expression -> . YES
    (18) expression -> . NO
    (25) expression -> . comp_expr
    (26) expression -> . NUMBER
    (27) expression -> . IDENTIFIER
    (28) expression -> . random_statement
    (29) expression -> . TEXT
    (30) expression -> . INPUT
    (19) comp_expr -> . expression EQ expression
    (20) comp_expr -> . expression GT expression
    (21) comp_expr -> . expression LT expression
    (22) comp_expr -> . expression GE expression
    (23) comp_expr -> . expression LE expression
    (24) comp_expr -> . expression NE expression
    (4) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 9
    YES             shift and go to state 10
    NO              shift and go to state 11
    NUMBER          shift and go to state 12
    IDENTIFIER      shift and go to state 13
    TEXT            shift and go to state 21
    INPUT           shift and go to state 16
    RANDOM          shift and go to state 17

    expression                     shift and go to state 42
    comp_expr                      shift and go to state 8
    random_statement               shift and go to state 14

state 25

    (12) expression -> expression MINUS . expression
    (10) expression -> . expression IF comp_expr
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression TIMES expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression POWER expression
    (16) expression -> . LPAREN expression RPAREN
    (17) expression -> . YES
    (18) expression -> . NO
    (25) expression -> . comp_expr
    (26) expression -> . NUMBER
    (27) expression -> . IDENTIFIER
    (28) expression -> . random_statement
    (29) expression -> . TEXT
    (30) expression -> . INPUT
    (19) comp_expr -> . expression EQ expression
    (20) comp_expr -> . expression GT expression
    (21) comp_expr -> . expression LT expression
    (22) comp_expr -> . expression GE expression
    (23) comp_expr -> . expression LE expression
    (24) comp_expr -> . expression NE expression
    (4) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 9
    YES             shift and go to state 10
    NO              shift and go to state 11
    NUMBER          shift and go to state 12
    IDENTIFIER      shift and go to state 13
    TEXT            shift and go to state 21
    INPUT           shift and go to state 16
    RANDOM          shift and go to state 17

    expression                     shift and go to state 43
    comp_expr                      shift and go to state 8
    random_statement               shift and go to state 14

state 26

    (13) expression -> expression TIMES . expression
    (10) expression -> . expression IF comp_expr
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression TIMES expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression POWER expression
    (16) expression -> . LPAREN expression RPAREN
    (17) expression -> . YES
    (18) expression -> . NO
    (25) expression -> . comp_expr
    (26) expression -> . NUMBER
    (27) expression -> . IDENTIFIER
    (28) expression -> . random_statement
    (29) expression -> . TEXT
    (30) expression -> . INPUT
    (19) comp_expr -> . expression EQ expression
    (20) comp_expr -> . expression GT expression
    (21) comp_expr -> . expression LT expression
    (22) comp_expr -> . expression GE expression
    (23) comp_expr -> . expression LE expression
    (24) comp_expr -> . expression NE expression
    (4) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 9
    YES             shift and go to state 10
    NO              shift and go to state 11
    NUMBER          shift and go to state 12
    IDENTIFIER      shift and go to state 13
    TEXT            shift and go to state 21
    INPUT           shift and go to state 16
    RANDOM          shift and go to state 17

    expression                     shift and go to state 44
    comp_expr                      shift and go to state 8
    random_statement               shift and go to state 14

state 27

    (14) expression -> expression DIVIDE . expression
    (10) expression -> . expression IF comp_expr
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression TIMES expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression POWER expression
    (16) expression -> . LPAREN expression RPAREN
    (17) expression -> . YES
    (18) expression -> . NO
    (25) expression -> . comp_expr
    (26) expression -> . NUMBER
    (27) expression -> . IDENTIFIER
    (28) expression -> . random_statement
    (29) expression -> . TEXT
    (30) expression -> . INPUT
    (19) comp_expr -> . expression EQ expression
    (20) comp_expr -> . expression GT expression
    (21) comp_expr -> . expression LT expression
    (22) comp_expr -> . expression GE expression
    (23) comp_expr -> . expression LE expression
    (24) comp_expr -> . expression NE expression
    (4) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 9
    YES             shift and go to state 10
    NO              shift and go to state 11
    NUMBER          shift and go to state 12
    IDENTIFIER      shift and go to state 13
    TEXT            shift and go to state 21
    INPUT           shift and go to state 16
    RANDOM          shift and go to state 17

    expression                     shift and go to state 45
    comp_expr                      shift and go to state 8
    random_statement               shift and go to state 14

state 28

    (15) expression -> expression POWER . expression
    (10) expression -> . expression IF comp_expr
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression TIMES expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression POWER expression
    (16) expression -> . LPAREN expression RPAREN
    (17) expression -> . YES
    (18) expression -> . NO
    (25) expression -> . comp_expr
    (26) expression -> . NUMBER
    (27) expression -> . IDENTIFIER
    (28) expression -> . random_statement
    (29) expression -> . TEXT
    (30) expression -> . INPUT
    (19) comp_expr -> . expression EQ expression
    (20) comp_expr -> . expression GT expression
    (21) comp_expr -> . expression LT expression
    (22) comp_expr -> . expression GE expression
    (23) comp_expr -> . expression LE expression
    (24) comp_expr -> . expression NE expression
    (4) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 9
    YES             shift and go to state 10
    NO              shift and go to state 11
    NUMBER          shift and go to state 12
    IDENTIFIER      shift and go to state 13
    TEXT            shift and go to state 21
    INPUT           shift and go to state 16
    RANDOM          shift and go to state 17

    expression                     shift and go to state 46
    comp_expr                      shift and go to state 8
    random_statement               shift and go to state 14

state 29

    (19) comp_expr -> expression EQ . expression
    (10) expression -> . expression IF comp_expr
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression TIMES expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression POWER expression
    (16) expression -> . LPAREN expression RPAREN
    (17) expression -> . YES
    (18) expression -> . NO
    (25) expression -> . comp_expr
    (26) expression -> . NUMBER
    (27) expression -> . IDENTIFIER
    (28) expression -> . random_statement
    (29) expression -> . TEXT
    (30) expression -> . INPUT
    (19) comp_expr -> . expression EQ expression
    (20) comp_expr -> . expression GT expression
    (21) comp_expr -> . expression LT expression
    (22) comp_expr -> . expression GE expression
    (23) comp_expr -> . expression LE expression
    (24) comp_expr -> . expression NE expression
    (4) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 9
    YES             shift and go to state 10
    NO              shift and go to state 11
    NUMBER          shift and go to state 12
    IDENTIFIER      shift and go to state 13
    TEXT            shift and go to state 21
    INPUT           shift and go to state 16
    RANDOM          shift and go to state 17

    expression                     shift and go to state 47
    comp_expr                      shift and go to state 8
    random_statement               shift and go to state 14

state 30

    (20) comp_expr -> expression GT . expression
    (10) expression -> . expression IF comp_expr
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression TIMES expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression POWER expression
    (16) expression -> . LPAREN expression RPAREN
    (17) expression -> . YES
    (18) expression -> . NO
    (25) expression -> . comp_expr
    (26) expression -> . NUMBER
    (27) expression -> . IDENTIFIER
    (28) expression -> . random_statement
    (29) expression -> . TEXT
    (30) expression -> . INPUT
    (19) comp_expr -> . expression EQ expression
    (20) comp_expr -> . expression GT expression
    (21) comp_expr -> . expression LT expression
    (22) comp_expr -> . expression GE expression
    (23) comp_expr -> . expression LE expression
    (24) comp_expr -> . expression NE expression
    (4) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 9
    YES             shift and go to state 10
    NO              shift and go to state 11
    NUMBER          shift and go to state 12
    IDENTIFIER      shift and go to state 13
    TEXT            shift and go to state 21
    INPUT           shift and go to state 16
    RANDOM          shift and go to state 17

    expression                     shift and go to state 48
    comp_expr                      shift and go to state 8
    random_statement               shift and go to state 14

state 31

    (21) comp_expr -> expression LT . expression
    (10) expression -> . expression IF comp_expr
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression TIMES expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression POWER expression
    (16) expression -> . LPAREN expression RPAREN
    (17) expression -> . YES
    (18) expression -> . NO
    (25) expression -> . comp_expr
    (26) expression -> . NUMBER
    (27) expression -> . IDENTIFIER
    (28) expression -> . random_statement
    (29) expression -> . TEXT
    (30) expression -> . INPUT
    (19) comp_expr -> . expression EQ expression
    (20) comp_expr -> . expression GT expression
    (21) comp_expr -> . expression LT expression
    (22) comp_expr -> . expression GE expression
    (23) comp_expr -> . expression LE expression
    (24) comp_expr -> . expression NE expression
    (4) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 9
    YES             shift and go to state 10
    NO              shift and go to state 11
    NUMBER          shift and go to state 12
    IDENTIFIER      shift and go to state 13
    TEXT            shift and go to state 21
    INPUT           shift and go to state 16
    RANDOM          shift and go to state 17

    expression                     shift and go to state 49
    comp_expr                      shift and go to state 8
    random_statement               shift and go to state 14

state 32

    (22) comp_expr -> expression GE . expression
    (10) expression -> . expression IF comp_expr
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression TIMES expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression POWER expression
    (16) expression -> . LPAREN expression RPAREN
    (17) expression -> . YES
    (18) expression -> . NO
    (25) expression -> . comp_expr
    (26) expression -> . NUMBER
    (27) expression -> . IDENTIFIER
    (28) expression -> . random_statement
    (29) expression -> . TEXT
    (30) expression -> . INPUT
    (19) comp_expr -> . expression EQ expression
    (20) comp_expr -> . expression GT expression
    (21) comp_expr -> . expression LT expression
    (22) comp_expr -> . expression GE expression
    (23) comp_expr -> . expression LE expression
    (24) comp_expr -> . expression NE expression
    (4) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 9
    YES             shift and go to state 10
    NO              shift and go to state 11
    NUMBER          shift and go to state 12
    IDENTIFIER      shift and go to state 13
    TEXT            shift and go to state 21
    INPUT           shift and go to state 16
    RANDOM          shift and go to state 17

    expression                     shift and go to state 50
    comp_expr                      shift and go to state 8
    random_statement               shift and go to state 14

state 33

    (23) comp_expr -> expression LE . expression
    (10) expression -> . expression IF comp_expr
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression TIMES expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression POWER expression
    (16) expression -> . LPAREN expression RPAREN
    (17) expression -> . YES
    (18) expression -> . NO
    (25) expression -> . comp_expr
    (26) expression -> . NUMBER
    (27) expression -> . IDENTIFIER
    (28) expression -> . random_statement
    (29) expression -> . TEXT
    (30) expression -> . INPUT
    (19) comp_expr -> . expression EQ expression
    (20) comp_expr -> . expression GT expression
    (21) comp_expr -> . expression LT expression
    (22) comp_expr -> . expression GE expression
    (23) comp_expr -> . expression LE expression
    (24) comp_expr -> . expression NE expression
    (4) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 9
    YES             shift and go to state 10
    NO              shift and go to state 11
    NUMBER          shift and go to state 12
    IDENTIFIER      shift and go to state 13
    TEXT            shift and go to state 21
    INPUT           shift and go to state 16
    RANDOM          shift and go to state 17

    expression                     shift and go to state 51
    comp_expr                      shift and go to state 8
    random_statement               shift and go to state 14

state 34

    (24) comp_expr -> expression NE . expression
    (10) expression -> . expression IF comp_expr
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression TIMES expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression POWER expression
    (16) expression -> . LPAREN expression RPAREN
    (17) expression -> . YES
    (18) expression -> . NO
    (25) expression -> . comp_expr
    (26) expression -> . NUMBER
    (27) expression -> . IDENTIFIER
    (28) expression -> . random_statement
    (29) expression -> . TEXT
    (30) expression -> . INPUT
    (19) comp_expr -> . expression EQ expression
    (20) comp_expr -> . expression GT expression
    (21) comp_expr -> . expression LT expression
    (22) comp_expr -> . expression GE expression
    (23) comp_expr -> . expression LE expression
    (24) comp_expr -> . expression NE expression
    (4) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 9
    YES             shift and go to state 10
    NO              shift and go to state 11
    NUMBER          shift and go to state 12
    IDENTIFIER      shift and go to state 13
    TEXT            shift and go to state 21
    INPUT           shift and go to state 16
    RANDOM          shift and go to state 17

    expression                     shift and go to state 52
    comp_expr                      shift and go to state 8
    random_statement               shift and go to state 14

state 35

    (16) expression -> LPAREN expression . RPAREN
    (10) expression -> expression . IF comp_expr
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . TIMES expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . POWER expression
    (19) comp_expr -> expression . EQ expression
    (20) comp_expr -> expression . GT expression
    (21) comp_expr -> expression . LT expression
    (22) comp_expr -> expression . GE expression
    (23) comp_expr -> expression . LE expression
    (24) comp_expr -> expression . NE expression

    RPAREN          shift and go to state 53
    IF              shift and go to state 23
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27
    POWER           shift and go to state 28
    EQ              shift and go to state 29
    GT              shift and go to state 30
    LT              shift and go to state 31
    GE              shift and go to state 32
    LE              shift and go to state 33
    NE              shift and go to state 34


state 36

    (3) ask -> TEXT EXPECTING . INPUT AND DATATYPE

    INPUT           shift and go to state 54


state 37

    (4) random_statement -> RANDOM DATATYPE . FROM expression TO expression

    FROM            shift and go to state 55


state 38

    (6) statement -> var_assignment TO expression .
    (10) expression -> expression . IF comp_expr
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . TIMES expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . POWER expression
    (19) comp_expr -> expression . EQ expression
    (20) comp_expr -> expression . GT expression
    (21) comp_expr -> expression . LT expression
    (22) comp_expr -> expression . GE expression
    (23) comp_expr -> expression . LE expression
    (24) comp_expr -> expression . NE expression

    $end            reduce using rule 6 (statement -> var_assignment TO expression .)
    IF              shift and go to state 23
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27
    POWER           shift and go to state 28
    EQ              shift and go to state 29
    GT              shift and go to state 30
    LT              shift and go to state 31
    GE              shift and go to state 32
    LE              shift and go to state 33
    NE              shift and go to state 34


state 39

    (8) statement -> var_assignment TO ask .

    $end            reduce using rule 8 (statement -> var_assignment TO ask .)


state 40

    (9) statement -> IF comp_expr THEN . statement
    (1) statement -> . OUTPUT expression
    (2) statement -> . OUTPUT ask
    (6) statement -> . var_assignment TO expression
    (7) statement -> . var_assignment
    (8) statement -> . var_assignment TO ask
    (9) statement -> . IF comp_expr THEN statement
    (5) var_assignment -> . SET IDENTIFIER

    OUTPUT          shift and go to state 2
    IF              shift and go to state 4
    SET             shift and go to state 5

    statement                      shift and go to state 56
    var_assignment                 shift and go to state 3

state 41

    (10) expression -> expression IF comp_expr .
    (25) expression -> comp_expr .

  ! reduce/reduce conflict for EQ resolved using rule 10 (expression -> expression IF comp_expr .)
  ! reduce/reduce conflict for GT resolved using rule 10 (expression -> expression IF comp_expr .)
  ! reduce/reduce conflict for LT resolved using rule 10 (expression -> expression IF comp_expr .)
  ! reduce/reduce conflict for GE resolved using rule 10 (expression -> expression IF comp_expr .)
  ! reduce/reduce conflict for LE resolved using rule 10 (expression -> expression IF comp_expr .)
  ! reduce/reduce conflict for NE resolved using rule 10 (expression -> expression IF comp_expr .)
  ! reduce/reduce conflict for IF resolved using rule 10 (expression -> expression IF comp_expr .)
  ! reduce/reduce conflict for PLUS resolved using rule 10 (expression -> expression IF comp_expr .)
  ! reduce/reduce conflict for MINUS resolved using rule 10 (expression -> expression IF comp_expr .)
  ! reduce/reduce conflict for TIMES resolved using rule 10 (expression -> expression IF comp_expr .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 10 (expression -> expression IF comp_expr .)
  ! reduce/reduce conflict for POWER resolved using rule 10 (expression -> expression IF comp_expr .)
    IF              reduce using rule 10 (expression -> expression IF comp_expr .)
    PLUS            reduce using rule 10 (expression -> expression IF comp_expr .)
    MINUS           reduce using rule 10 (expression -> expression IF comp_expr .)
    TIMES           reduce using rule 10 (expression -> expression IF comp_expr .)
    DIVIDE          reduce using rule 10 (expression -> expression IF comp_expr .)
    POWER           reduce using rule 10 (expression -> expression IF comp_expr .)
    EQ              reduce using rule 10 (expression -> expression IF comp_expr .)
    GT              reduce using rule 10 (expression -> expression IF comp_expr .)
    LT              reduce using rule 10 (expression -> expression IF comp_expr .)
    GE              reduce using rule 10 (expression -> expression IF comp_expr .)
    LE              reduce using rule 10 (expression -> expression IF comp_expr .)
    NE              reduce using rule 10 (expression -> expression IF comp_expr .)
    $end            reduce using rule 10 (expression -> expression IF comp_expr .)
    RPAREN          reduce using rule 10 (expression -> expression IF comp_expr .)
    THEN            reduce using rule 10 (expression -> expression IF comp_expr .)
    TO              reduce using rule 10 (expression -> expression IF comp_expr .)

  ! EQ              [ reduce using rule 25 (expression -> comp_expr .) ]
  ! GT              [ reduce using rule 25 (expression -> comp_expr .) ]
  ! LT              [ reduce using rule 25 (expression -> comp_expr .) ]
  ! GE              [ reduce using rule 25 (expression -> comp_expr .) ]
  ! LE              [ reduce using rule 25 (expression -> comp_expr .) ]
  ! NE              [ reduce using rule 25 (expression -> comp_expr .) ]
  ! IF              [ reduce using rule 25 (expression -> comp_expr .) ]
  ! PLUS            [ reduce using rule 25 (expression -> comp_expr .) ]
  ! MINUS           [ reduce using rule 25 (expression -> comp_expr .) ]
  ! TIMES           [ reduce using rule 25 (expression -> comp_expr .) ]
  ! DIVIDE          [ reduce using rule 25 (expression -> comp_expr .) ]
  ! POWER           [ reduce using rule 25 (expression -> comp_expr .) ]


state 42

    (11) expression -> expression PLUS expression .
    (10) expression -> expression . IF comp_expr
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . TIMES expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . POWER expression
    (19) comp_expr -> expression . EQ expression
    (20) comp_expr -> expression . GT expression
    (21) comp_expr -> expression . LT expression
    (22) comp_expr -> expression . GE expression
    (23) comp_expr -> expression . LE expression
    (24) comp_expr -> expression . NE expression

    IF              reduce using rule 11 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 11 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 11 (expression -> expression PLUS expression .)
    EQ              reduce using rule 11 (expression -> expression PLUS expression .)
    GT              reduce using rule 11 (expression -> expression PLUS expression .)
    LT              reduce using rule 11 (expression -> expression PLUS expression .)
    GE              reduce using rule 11 (expression -> expression PLUS expression .)
    LE              reduce using rule 11 (expression -> expression PLUS expression .)
    NE              reduce using rule 11 (expression -> expression PLUS expression .)
    $end            reduce using rule 11 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 11 (expression -> expression PLUS expression .)
    THEN            reduce using rule 11 (expression -> expression PLUS expression .)
    TO              reduce using rule 11 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27
    POWER           shift and go to state 28

  ! TIMES           [ reduce using rule 11 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 11 (expression -> expression PLUS expression .) ]
  ! POWER           [ reduce using rule 11 (expression -> expression PLUS expression .) ]
  ! IF              [ shift and go to state 23 ]
  ! PLUS            [ shift and go to state 24 ]
  ! MINUS           [ shift and go to state 25 ]
  ! EQ              [ shift and go to state 29 ]
  ! GT              [ shift and go to state 30 ]
  ! LT              [ shift and go to state 31 ]
  ! GE              [ shift and go to state 32 ]
  ! LE              [ shift and go to state 33 ]
  ! NE              [ shift and go to state 34 ]


state 43

    (12) expression -> expression MINUS expression .
    (10) expression -> expression . IF comp_expr
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . TIMES expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . POWER expression
    (19) comp_expr -> expression . EQ expression
    (20) comp_expr -> expression . GT expression
    (21) comp_expr -> expression . LT expression
    (22) comp_expr -> expression . GE expression
    (23) comp_expr -> expression . LE expression
    (24) comp_expr -> expression . NE expression

    IF              reduce using rule 12 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 12 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 12 (expression -> expression MINUS expression .)
    EQ              reduce using rule 12 (expression -> expression MINUS expression .)
    GT              reduce using rule 12 (expression -> expression MINUS expression .)
    LT              reduce using rule 12 (expression -> expression MINUS expression .)
    GE              reduce using rule 12 (expression -> expression MINUS expression .)
    LE              reduce using rule 12 (expression -> expression MINUS expression .)
    NE              reduce using rule 12 (expression -> expression MINUS expression .)
    $end            reduce using rule 12 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 12 (expression -> expression MINUS expression .)
    THEN            reduce using rule 12 (expression -> expression MINUS expression .)
    TO              reduce using rule 12 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27
    POWER           shift and go to state 28

  ! TIMES           [ reduce using rule 12 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 12 (expression -> expression MINUS expression .) ]
  ! POWER           [ reduce using rule 12 (expression -> expression MINUS expression .) ]
  ! IF              [ shift and go to state 23 ]
  ! PLUS            [ shift and go to state 24 ]
  ! MINUS           [ shift and go to state 25 ]
  ! EQ              [ shift and go to state 29 ]
  ! GT              [ shift and go to state 30 ]
  ! LT              [ shift and go to state 31 ]
  ! GE              [ shift and go to state 32 ]
  ! LE              [ shift and go to state 33 ]
  ! NE              [ shift and go to state 34 ]


state 44

    (13) expression -> expression TIMES expression .
    (10) expression -> expression . IF comp_expr
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . TIMES expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . POWER expression
    (19) comp_expr -> expression . EQ expression
    (20) comp_expr -> expression . GT expression
    (21) comp_expr -> expression . LT expression
    (22) comp_expr -> expression . GE expression
    (23) comp_expr -> expression . LE expression
    (24) comp_expr -> expression . NE expression

    IF              reduce using rule 13 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 13 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 13 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 13 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 13 (expression -> expression TIMES expression .)
    EQ              reduce using rule 13 (expression -> expression TIMES expression .)
    GT              reduce using rule 13 (expression -> expression TIMES expression .)
    LT              reduce using rule 13 (expression -> expression TIMES expression .)
    GE              reduce using rule 13 (expression -> expression TIMES expression .)
    LE              reduce using rule 13 (expression -> expression TIMES expression .)
    NE              reduce using rule 13 (expression -> expression TIMES expression .)
    $end            reduce using rule 13 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 13 (expression -> expression TIMES expression .)
    THEN            reduce using rule 13 (expression -> expression TIMES expression .)
    TO              reduce using rule 13 (expression -> expression TIMES expression .)
    POWER           shift and go to state 28

  ! POWER           [ reduce using rule 13 (expression -> expression TIMES expression .) ]
  ! IF              [ shift and go to state 23 ]
  ! PLUS            [ shift and go to state 24 ]
  ! MINUS           [ shift and go to state 25 ]
  ! TIMES           [ shift and go to state 26 ]
  ! DIVIDE          [ shift and go to state 27 ]
  ! EQ              [ shift and go to state 29 ]
  ! GT              [ shift and go to state 30 ]
  ! LT              [ shift and go to state 31 ]
  ! GE              [ shift and go to state 32 ]
  ! LE              [ shift and go to state 33 ]
  ! NE              [ shift and go to state 34 ]


state 45

    (14) expression -> expression DIVIDE expression .
    (10) expression -> expression . IF comp_expr
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . TIMES expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . POWER expression
    (19) comp_expr -> expression . EQ expression
    (20) comp_expr -> expression . GT expression
    (21) comp_expr -> expression . LT expression
    (22) comp_expr -> expression . GE expression
    (23) comp_expr -> expression . LE expression
    (24) comp_expr -> expression . NE expression

    IF              reduce using rule 14 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 14 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 14 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 14 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 14 (expression -> expression DIVIDE expression .)
    EQ              reduce using rule 14 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 14 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 14 (expression -> expression DIVIDE expression .)
    GE              reduce using rule 14 (expression -> expression DIVIDE expression .)
    LE              reduce using rule 14 (expression -> expression DIVIDE expression .)
    NE              reduce using rule 14 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 14 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 14 (expression -> expression DIVIDE expression .)
    THEN            reduce using rule 14 (expression -> expression DIVIDE expression .)
    TO              reduce using rule 14 (expression -> expression DIVIDE expression .)
    POWER           shift and go to state 28

  ! POWER           [ reduce using rule 14 (expression -> expression DIVIDE expression .) ]
  ! IF              [ shift and go to state 23 ]
  ! PLUS            [ shift and go to state 24 ]
  ! MINUS           [ shift and go to state 25 ]
  ! TIMES           [ shift and go to state 26 ]
  ! DIVIDE          [ shift and go to state 27 ]
  ! EQ              [ shift and go to state 29 ]
  ! GT              [ shift and go to state 30 ]
  ! LT              [ shift and go to state 31 ]
  ! GE              [ shift and go to state 32 ]
  ! LE              [ shift and go to state 33 ]
  ! NE              [ shift and go to state 34 ]


state 46

    (15) expression -> expression POWER expression .
    (10) expression -> expression . IF comp_expr
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . TIMES expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . POWER expression
    (19) comp_expr -> expression . EQ expression
    (20) comp_expr -> expression . GT expression
    (21) comp_expr -> expression . LT expression
    (22) comp_expr -> expression . GE expression
    (23) comp_expr -> expression . LE expression
    (24) comp_expr -> expression . NE expression

    IF              reduce using rule 15 (expression -> expression POWER expression .)
    PLUS            reduce using rule 15 (expression -> expression POWER expression .)
    MINUS           reduce using rule 15 (expression -> expression POWER expression .)
    TIMES           reduce using rule 15 (expression -> expression POWER expression .)
    DIVIDE          reduce using rule 15 (expression -> expression POWER expression .)
    EQ              reduce using rule 15 (expression -> expression POWER expression .)
    GT              reduce using rule 15 (expression -> expression POWER expression .)
    LT              reduce using rule 15 (expression -> expression POWER expression .)
    GE              reduce using rule 15 (expression -> expression POWER expression .)
    LE              reduce using rule 15 (expression -> expression POWER expression .)
    NE              reduce using rule 15 (expression -> expression POWER expression .)
    $end            reduce using rule 15 (expression -> expression POWER expression .)
    RPAREN          reduce using rule 15 (expression -> expression POWER expression .)
    THEN            reduce using rule 15 (expression -> expression POWER expression .)
    TO              reduce using rule 15 (expression -> expression POWER expression .)
    POWER           shift and go to state 28

  ! POWER           [ reduce using rule 15 (expression -> expression POWER expression .) ]
  ! IF              [ shift and go to state 23 ]
  ! PLUS            [ shift and go to state 24 ]
  ! MINUS           [ shift and go to state 25 ]
  ! TIMES           [ shift and go to state 26 ]
  ! DIVIDE          [ shift and go to state 27 ]
  ! EQ              [ shift and go to state 29 ]
  ! GT              [ shift and go to state 30 ]
  ! LT              [ shift and go to state 31 ]
  ! GE              [ shift and go to state 32 ]
  ! LE              [ shift and go to state 33 ]
  ! NE              [ shift and go to state 34 ]


state 47

    (19) comp_expr -> expression EQ expression .
    (10) expression -> expression . IF comp_expr
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . TIMES expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . POWER expression
    (19) comp_expr -> expression . EQ expression
    (20) comp_expr -> expression . GT expression
    (21) comp_expr -> expression . LT expression
    (22) comp_expr -> expression . GE expression
    (23) comp_expr -> expression . LE expression
    (24) comp_expr -> expression . NE expression

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    $end            reduce using rule 19 (comp_expr -> expression EQ expression .)
    THEN            reduce using rule 19 (comp_expr -> expression EQ expression .)
    RPAREN          reduce using rule 19 (comp_expr -> expression EQ expression .)
    TO              reduce using rule 19 (comp_expr -> expression EQ expression .)
    IF              shift and go to state 23
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27
    POWER           shift and go to state 28
    EQ              shift and go to state 29
    GT              shift and go to state 30
    LT              shift and go to state 31
    GE              shift and go to state 32
    LE              shift and go to state 33
    NE              shift and go to state 34

  ! IF              [ reduce using rule 19 (comp_expr -> expression EQ expression .) ]
  ! PLUS            [ reduce using rule 19 (comp_expr -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 19 (comp_expr -> expression EQ expression .) ]
  ! TIMES           [ reduce using rule 19 (comp_expr -> expression EQ expression .) ]
  ! DIVIDE          [ reduce using rule 19 (comp_expr -> expression EQ expression .) ]
  ! POWER           [ reduce using rule 19 (comp_expr -> expression EQ expression .) ]
  ! EQ              [ reduce using rule 19 (comp_expr -> expression EQ expression .) ]
  ! GT              [ reduce using rule 19 (comp_expr -> expression EQ expression .) ]
  ! LT              [ reduce using rule 19 (comp_expr -> expression EQ expression .) ]
  ! GE              [ reduce using rule 19 (comp_expr -> expression EQ expression .) ]
  ! LE              [ reduce using rule 19 (comp_expr -> expression EQ expression .) ]
  ! NE              [ reduce using rule 19 (comp_expr -> expression EQ expression .) ]


state 48

    (20) comp_expr -> expression GT expression .
    (10) expression -> expression . IF comp_expr
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . TIMES expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . POWER expression
    (19) comp_expr -> expression . EQ expression
    (20) comp_expr -> expression . GT expression
    (21) comp_expr -> expression . LT expression
    (22) comp_expr -> expression . GE expression
    (23) comp_expr -> expression . LE expression
    (24) comp_expr -> expression . NE expression

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    $end            reduce using rule 20 (comp_expr -> expression GT expression .)
    THEN            reduce using rule 20 (comp_expr -> expression GT expression .)
    RPAREN          reduce using rule 20 (comp_expr -> expression GT expression .)
    TO              reduce using rule 20 (comp_expr -> expression GT expression .)
    IF              shift and go to state 23
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27
    POWER           shift and go to state 28
    EQ              shift and go to state 29
    GT              shift and go to state 30
    LT              shift and go to state 31
    GE              shift and go to state 32
    LE              shift and go to state 33
    NE              shift and go to state 34

  ! IF              [ reduce using rule 20 (comp_expr -> expression GT expression .) ]
  ! PLUS            [ reduce using rule 20 (comp_expr -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 20 (comp_expr -> expression GT expression .) ]
  ! TIMES           [ reduce using rule 20 (comp_expr -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 20 (comp_expr -> expression GT expression .) ]
  ! POWER           [ reduce using rule 20 (comp_expr -> expression GT expression .) ]
  ! EQ              [ reduce using rule 20 (comp_expr -> expression GT expression .) ]
  ! GT              [ reduce using rule 20 (comp_expr -> expression GT expression .) ]
  ! LT              [ reduce using rule 20 (comp_expr -> expression GT expression .) ]
  ! GE              [ reduce using rule 20 (comp_expr -> expression GT expression .) ]
  ! LE              [ reduce using rule 20 (comp_expr -> expression GT expression .) ]
  ! NE              [ reduce using rule 20 (comp_expr -> expression GT expression .) ]


state 49

    (21) comp_expr -> expression LT expression .
    (10) expression -> expression . IF comp_expr
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . TIMES expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . POWER expression
    (19) comp_expr -> expression . EQ expression
    (20) comp_expr -> expression . GT expression
    (21) comp_expr -> expression . LT expression
    (22) comp_expr -> expression . GE expression
    (23) comp_expr -> expression . LE expression
    (24) comp_expr -> expression . NE expression

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    $end            reduce using rule 21 (comp_expr -> expression LT expression .)
    THEN            reduce using rule 21 (comp_expr -> expression LT expression .)
    RPAREN          reduce using rule 21 (comp_expr -> expression LT expression .)
    TO              reduce using rule 21 (comp_expr -> expression LT expression .)
    IF              shift and go to state 23
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27
    POWER           shift and go to state 28
    EQ              shift and go to state 29
    GT              shift and go to state 30
    LT              shift and go to state 31
    GE              shift and go to state 32
    LE              shift and go to state 33
    NE              shift and go to state 34

  ! IF              [ reduce using rule 21 (comp_expr -> expression LT expression .) ]
  ! PLUS            [ reduce using rule 21 (comp_expr -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 21 (comp_expr -> expression LT expression .) ]
  ! TIMES           [ reduce using rule 21 (comp_expr -> expression LT expression .) ]
  ! DIVIDE          [ reduce using rule 21 (comp_expr -> expression LT expression .) ]
  ! POWER           [ reduce using rule 21 (comp_expr -> expression LT expression .) ]
  ! EQ              [ reduce using rule 21 (comp_expr -> expression LT expression .) ]
  ! GT              [ reduce using rule 21 (comp_expr -> expression LT expression .) ]
  ! LT              [ reduce using rule 21 (comp_expr -> expression LT expression .) ]
  ! GE              [ reduce using rule 21 (comp_expr -> expression LT expression .) ]
  ! LE              [ reduce using rule 21 (comp_expr -> expression LT expression .) ]
  ! NE              [ reduce using rule 21 (comp_expr -> expression LT expression .) ]


state 50

    (22) comp_expr -> expression GE expression .
    (10) expression -> expression . IF comp_expr
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . TIMES expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . POWER expression
    (19) comp_expr -> expression . EQ expression
    (20) comp_expr -> expression . GT expression
    (21) comp_expr -> expression . LT expression
    (22) comp_expr -> expression . GE expression
    (23) comp_expr -> expression . LE expression
    (24) comp_expr -> expression . NE expression

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    $end            reduce using rule 22 (comp_expr -> expression GE expression .)
    THEN            reduce using rule 22 (comp_expr -> expression GE expression .)
    RPAREN          reduce using rule 22 (comp_expr -> expression GE expression .)
    TO              reduce using rule 22 (comp_expr -> expression GE expression .)
    IF              shift and go to state 23
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27
    POWER           shift and go to state 28
    EQ              shift and go to state 29
    GT              shift and go to state 30
    LT              shift and go to state 31
    GE              shift and go to state 32
    LE              shift and go to state 33
    NE              shift and go to state 34

  ! IF              [ reduce using rule 22 (comp_expr -> expression GE expression .) ]
  ! PLUS            [ reduce using rule 22 (comp_expr -> expression GE expression .) ]
  ! MINUS           [ reduce using rule 22 (comp_expr -> expression GE expression .) ]
  ! TIMES           [ reduce using rule 22 (comp_expr -> expression GE expression .) ]
  ! DIVIDE          [ reduce using rule 22 (comp_expr -> expression GE expression .) ]
  ! POWER           [ reduce using rule 22 (comp_expr -> expression GE expression .) ]
  ! EQ              [ reduce using rule 22 (comp_expr -> expression GE expression .) ]
  ! GT              [ reduce using rule 22 (comp_expr -> expression GE expression .) ]
  ! LT              [ reduce using rule 22 (comp_expr -> expression GE expression .) ]
  ! GE              [ reduce using rule 22 (comp_expr -> expression GE expression .) ]
  ! LE              [ reduce using rule 22 (comp_expr -> expression GE expression .) ]
  ! NE              [ reduce using rule 22 (comp_expr -> expression GE expression .) ]


state 51

    (23) comp_expr -> expression LE expression .
    (10) expression -> expression . IF comp_expr
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . TIMES expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . POWER expression
    (19) comp_expr -> expression . EQ expression
    (20) comp_expr -> expression . GT expression
    (21) comp_expr -> expression . LT expression
    (22) comp_expr -> expression . GE expression
    (23) comp_expr -> expression . LE expression
    (24) comp_expr -> expression . NE expression

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    $end            reduce using rule 23 (comp_expr -> expression LE expression .)
    THEN            reduce using rule 23 (comp_expr -> expression LE expression .)
    RPAREN          reduce using rule 23 (comp_expr -> expression LE expression .)
    TO              reduce using rule 23 (comp_expr -> expression LE expression .)
    IF              shift and go to state 23
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27
    POWER           shift and go to state 28
    EQ              shift and go to state 29
    GT              shift and go to state 30
    LT              shift and go to state 31
    GE              shift and go to state 32
    LE              shift and go to state 33
    NE              shift and go to state 34

  ! IF              [ reduce using rule 23 (comp_expr -> expression LE expression .) ]
  ! PLUS            [ reduce using rule 23 (comp_expr -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 23 (comp_expr -> expression LE expression .) ]
  ! TIMES           [ reduce using rule 23 (comp_expr -> expression LE expression .) ]
  ! DIVIDE          [ reduce using rule 23 (comp_expr -> expression LE expression .) ]
  ! POWER           [ reduce using rule 23 (comp_expr -> expression LE expression .) ]
  ! EQ              [ reduce using rule 23 (comp_expr -> expression LE expression .) ]
  ! GT              [ reduce using rule 23 (comp_expr -> expression LE expression .) ]
  ! LT              [ reduce using rule 23 (comp_expr -> expression LE expression .) ]
  ! GE              [ reduce using rule 23 (comp_expr -> expression LE expression .) ]
  ! LE              [ reduce using rule 23 (comp_expr -> expression LE expression .) ]
  ! NE              [ reduce using rule 23 (comp_expr -> expression LE expression .) ]


state 52

    (24) comp_expr -> expression NE expression .
    (10) expression -> expression . IF comp_expr
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . TIMES expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . POWER expression
    (19) comp_expr -> expression . EQ expression
    (20) comp_expr -> expression . GT expression
    (21) comp_expr -> expression . LT expression
    (22) comp_expr -> expression . GE expression
    (23) comp_expr -> expression . LE expression
    (24) comp_expr -> expression . NE expression

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    $end            reduce using rule 24 (comp_expr -> expression NE expression .)
    THEN            reduce using rule 24 (comp_expr -> expression NE expression .)
    RPAREN          reduce using rule 24 (comp_expr -> expression NE expression .)
    TO              reduce using rule 24 (comp_expr -> expression NE expression .)
    IF              shift and go to state 23
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27
    POWER           shift and go to state 28
    EQ              shift and go to state 29
    GT              shift and go to state 30
    LT              shift and go to state 31
    GE              shift and go to state 32
    LE              shift and go to state 33
    NE              shift and go to state 34

  ! IF              [ reduce using rule 24 (comp_expr -> expression NE expression .) ]
  ! PLUS            [ reduce using rule 24 (comp_expr -> expression NE expression .) ]
  ! MINUS           [ reduce using rule 24 (comp_expr -> expression NE expression .) ]
  ! TIMES           [ reduce using rule 24 (comp_expr -> expression NE expression .) ]
  ! DIVIDE          [ reduce using rule 24 (comp_expr -> expression NE expression .) ]
  ! POWER           [ reduce using rule 24 (comp_expr -> expression NE expression .) ]
  ! EQ              [ reduce using rule 24 (comp_expr -> expression NE expression .) ]
  ! GT              [ reduce using rule 24 (comp_expr -> expression NE expression .) ]
  ! LT              [ reduce using rule 24 (comp_expr -> expression NE expression .) ]
  ! GE              [ reduce using rule 24 (comp_expr -> expression NE expression .) ]
  ! LE              [ reduce using rule 24 (comp_expr -> expression NE expression .) ]
  ! NE              [ reduce using rule 24 (comp_expr -> expression NE expression .) ]


state 53

    (16) expression -> LPAREN expression RPAREN .

    IF              reduce using rule 16 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 16 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 16 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 16 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 16 (expression -> LPAREN expression RPAREN .)
    POWER           reduce using rule 16 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 16 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 16 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 16 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 16 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 16 (expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 16 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 16 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 16 (expression -> LPAREN expression RPAREN .)
    THEN            reduce using rule 16 (expression -> LPAREN expression RPAREN .)
    TO              reduce using rule 16 (expression -> LPAREN expression RPAREN .)


state 54

    (3) ask -> TEXT EXPECTING INPUT . AND DATATYPE

    AND             shift and go to state 57


state 55

    (4) random_statement -> RANDOM DATATYPE FROM . expression TO expression
    (10) expression -> . expression IF comp_expr
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression TIMES expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression POWER expression
    (16) expression -> . LPAREN expression RPAREN
    (17) expression -> . YES
    (18) expression -> . NO
    (25) expression -> . comp_expr
    (26) expression -> . NUMBER
    (27) expression -> . IDENTIFIER
    (28) expression -> . random_statement
    (29) expression -> . TEXT
    (30) expression -> . INPUT
    (19) comp_expr -> . expression EQ expression
    (20) comp_expr -> . expression GT expression
    (21) comp_expr -> . expression LT expression
    (22) comp_expr -> . expression GE expression
    (23) comp_expr -> . expression LE expression
    (24) comp_expr -> . expression NE expression
    (4) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 9
    YES             shift and go to state 10
    NO              shift and go to state 11
    NUMBER          shift and go to state 12
    IDENTIFIER      shift and go to state 13
    TEXT            shift and go to state 21
    INPUT           shift and go to state 16
    RANDOM          shift and go to state 17

    expression                     shift and go to state 58
    comp_expr                      shift and go to state 8
    random_statement               shift and go to state 14

state 56

    (9) statement -> IF comp_expr THEN statement .

    $end            reduce using rule 9 (statement -> IF comp_expr THEN statement .)


state 57

    (3) ask -> TEXT EXPECTING INPUT AND . DATATYPE

    DATATYPE        shift and go to state 59


state 58

    (4) random_statement -> RANDOM DATATYPE FROM expression . TO expression
    (10) expression -> expression . IF comp_expr
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . TIMES expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . POWER expression
    (19) comp_expr -> expression . EQ expression
    (20) comp_expr -> expression . GT expression
    (21) comp_expr -> expression . LT expression
    (22) comp_expr -> expression . GE expression
    (23) comp_expr -> expression . LE expression
    (24) comp_expr -> expression . NE expression

    TO              shift and go to state 60
    IF              shift and go to state 23
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27
    POWER           shift and go to state 28
    EQ              shift and go to state 29
    GT              shift and go to state 30
    LT              shift and go to state 31
    GE              shift and go to state 32
    LE              shift and go to state 33
    NE              shift and go to state 34


state 59

    (3) ask -> TEXT EXPECTING INPUT AND DATATYPE .

    $end            reduce using rule 3 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)


state 60

    (4) random_statement -> RANDOM DATATYPE FROM expression TO . expression
    (10) expression -> . expression IF comp_expr
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression TIMES expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression POWER expression
    (16) expression -> . LPAREN expression RPAREN
    (17) expression -> . YES
    (18) expression -> . NO
    (25) expression -> . comp_expr
    (26) expression -> . NUMBER
    (27) expression -> . IDENTIFIER
    (28) expression -> . random_statement
    (29) expression -> . TEXT
    (30) expression -> . INPUT
    (19) comp_expr -> . expression EQ expression
    (20) comp_expr -> . expression GT expression
    (21) comp_expr -> . expression LT expression
    (22) comp_expr -> . expression GE expression
    (23) comp_expr -> . expression LE expression
    (24) comp_expr -> . expression NE expression
    (4) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 9
    YES             shift and go to state 10
    NO              shift and go to state 11
    NUMBER          shift and go to state 12
    IDENTIFIER      shift and go to state 13
    TEXT            shift and go to state 21
    INPUT           shift and go to state 16
    RANDOM          shift and go to state 17

    expression                     shift and go to state 61
    comp_expr                      shift and go to state 8
    random_statement               shift and go to state 14

state 61

    (4) random_statement -> RANDOM DATATYPE FROM expression TO expression .
    (10) expression -> expression . IF comp_expr
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . TIMES expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . POWER expression
    (19) comp_expr -> expression . EQ expression
    (20) comp_expr -> expression . GT expression
    (21) comp_expr -> expression . LT expression
    (22) comp_expr -> expression . GE expression
    (23) comp_expr -> expression . LE expression
    (24) comp_expr -> expression . NE expression

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    $end            reduce using rule 4 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    RPAREN          reduce using rule 4 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    THEN            reduce using rule 4 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    TO              reduce using rule 4 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    IF              shift and go to state 23
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27
    POWER           shift and go to state 28
    EQ              shift and go to state 29
    GT              shift and go to state 30
    LT              shift and go to state 31
    GE              shift and go to state 32
    LE              shift and go to state 33
    NE              shift and go to state 34

  ! IF              [ reduce using rule 4 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! PLUS            [ reduce using rule 4 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! MINUS           [ reduce using rule 4 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! TIMES           [ reduce using rule 4 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! DIVIDE          [ reduce using rule 4 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! POWER           [ reduce using rule 4 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! EQ              [ reduce using rule 4 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! GT              [ reduce using rule 4 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! LT              [ reduce using rule 4 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! GE              [ reduce using rule 4 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! LE              [ reduce using rule 4 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! NE              [ reduce using rule 4 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IF in state 47 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 47 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 47 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 47 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 47 resolved as shift
WARNING: shift/reduce conflict for POWER in state 47 resolved as shift
WARNING: shift/reduce conflict for EQ in state 47 resolved as shift
WARNING: shift/reduce conflict for GT in state 47 resolved as shift
WARNING: shift/reduce conflict for LT in state 47 resolved as shift
WARNING: shift/reduce conflict for GE in state 47 resolved as shift
WARNING: shift/reduce conflict for LE in state 47 resolved as shift
WARNING: shift/reduce conflict for NE in state 47 resolved as shift
WARNING: shift/reduce conflict for IF in state 48 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 48 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 48 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 48 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 48 resolved as shift
WARNING: shift/reduce conflict for POWER in state 48 resolved as shift
WARNING: shift/reduce conflict for EQ in state 48 resolved as shift
WARNING: shift/reduce conflict for GT in state 48 resolved as shift
WARNING: shift/reduce conflict for LT in state 48 resolved as shift
WARNING: shift/reduce conflict for GE in state 48 resolved as shift
WARNING: shift/reduce conflict for LE in state 48 resolved as shift
WARNING: shift/reduce conflict for NE in state 48 resolved as shift
WARNING: shift/reduce conflict for IF in state 49 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 49 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 49 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 49 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 49 resolved as shift
WARNING: shift/reduce conflict for POWER in state 49 resolved as shift
WARNING: shift/reduce conflict for EQ in state 49 resolved as shift
WARNING: shift/reduce conflict for GT in state 49 resolved as shift
WARNING: shift/reduce conflict for LT in state 49 resolved as shift
WARNING: shift/reduce conflict for GE in state 49 resolved as shift
WARNING: shift/reduce conflict for LE in state 49 resolved as shift
WARNING: shift/reduce conflict for NE in state 49 resolved as shift
WARNING: shift/reduce conflict for IF in state 50 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 50 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 50 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 50 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 50 resolved as shift
WARNING: shift/reduce conflict for POWER in state 50 resolved as shift
WARNING: shift/reduce conflict for EQ in state 50 resolved as shift
WARNING: shift/reduce conflict for GT in state 50 resolved as shift
WARNING: shift/reduce conflict for LT in state 50 resolved as shift
WARNING: shift/reduce conflict for GE in state 50 resolved as shift
WARNING: shift/reduce conflict for LE in state 50 resolved as shift
WARNING: shift/reduce conflict for NE in state 50 resolved as shift
WARNING: shift/reduce conflict for IF in state 51 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 51 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 51 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 51 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 51 resolved as shift
WARNING: shift/reduce conflict for POWER in state 51 resolved as shift
WARNING: shift/reduce conflict for EQ in state 51 resolved as shift
WARNING: shift/reduce conflict for GT in state 51 resolved as shift
WARNING: shift/reduce conflict for LT in state 51 resolved as shift
WARNING: shift/reduce conflict for GE in state 51 resolved as shift
WARNING: shift/reduce conflict for LE in state 51 resolved as shift
WARNING: shift/reduce conflict for NE in state 51 resolved as shift
WARNING: shift/reduce conflict for IF in state 52 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 52 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 52 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 52 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 52 resolved as shift
WARNING: shift/reduce conflict for POWER in state 52 resolved as shift
WARNING: shift/reduce conflict for EQ in state 52 resolved as shift
WARNING: shift/reduce conflict for GT in state 52 resolved as shift
WARNING: shift/reduce conflict for LT in state 52 resolved as shift
WARNING: shift/reduce conflict for GE in state 52 resolved as shift
WARNING: shift/reduce conflict for LE in state 52 resolved as shift
WARNING: shift/reduce conflict for NE in state 52 resolved as shift
WARNING: shift/reduce conflict for IF in state 61 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 61 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 61 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 61 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 61 resolved as shift
WARNING: shift/reduce conflict for POWER in state 61 resolved as shift
WARNING: shift/reduce conflict for EQ in state 61 resolved as shift
WARNING: shift/reduce conflict for GT in state 61 resolved as shift
WARNING: shift/reduce conflict for LT in state 61 resolved as shift
WARNING: shift/reduce conflict for GE in state 61 resolved as shift
WARNING: shift/reduce conflict for LE in state 61 resolved as shift
WARNING: shift/reduce conflict for NE in state 61 resolved as shift
WARNING: reduce/reduce conflict in state 41 resolved using rule (expression -> expression IF comp_expr)
WARNING: rejected rule (expression -> comp_expr) in state 41
