Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statements
Rule 1     statements -> statement
Rule 2     statements -> statements statement
Rule 3     end_statement -> END IF
Rule 4     statement -> OUTPUT expression
Rule 5     statement -> OUTPUT ask
Rule 6     ask -> TEXT EXPECTING INPUT AND DATATYPE
Rule 7     random_statement -> RANDOM DATATYPE FROM expression TO expression
Rule 8     var_assignment -> SET IDENTIFIER
Rule 9     statement -> var_assignment TO expression
Rule 10    statement -> var_assignment
Rule 11    statement -> var_assignment TO ask
Rule 12    statement -> IF comp_expr THEN statement end_statement
Rule 13    statement -> IF comp_expr THEN statement ELSE THEN statement end_statement
Rule 14    expression -> expression PLUS expression
Rule 15    expression -> expression MINUS expression
Rule 16    expression -> expression TIMES expression
Rule 17    expression -> expression DIVIDE expression
Rule 18    expression -> expression POWER expression
Rule 19    expression -> LPAREN expression RPAREN
Rule 20    expression -> YES
Rule 21    expression -> NO
Rule 22    comp_expr -> expression EQ expression
Rule 23    comp_expr -> expression GT expression
Rule 24    comp_expr -> expression LT expression
Rule 25    comp_expr -> expression GE expression
Rule 26    comp_expr -> expression LE expression
Rule 27    comp_expr -> expression NE expression
Rule 28    expression -> comp_expr
Rule 29    expression -> NUMBER
Rule 30    expression -> IDENTIFIER
Rule 31    expression -> random_statement
Rule 32    expression -> TEXT
Rule 33    expression -> INPUT

Terminals, with rules where they appear

AND                  : 6
DATATYPE             : 6 7
DIVIDE               : 17
ELSE                 : 13
END                  : 3
EQ                   : 22
EXPECTING            : 6
FROM                 : 7
GE                   : 25
GT                   : 23
IDENTIFIER           : 8 30
IF                   : 3 12 13
INPUT                : 6 33
LE                   : 26
LPAREN               : 19
LT                   : 24
MINUS                : 15
NE                   : 27
NO                   : 21
NUMBER               : 29
OUTPUT               : 4 5
PLUS                 : 14
POWER                : 18
RANDOM               : 7
RPAREN               : 19
SET                  : 8
TEXT                 : 6 32
THEN                 : 12 13 13
TIMES                : 16
TO                   : 7 9 11
YES                  : 20
error                : 

Nonterminals, with rules where they appear

ask                  : 5 11
comp_expr            : 12 13 28
end_statement        : 12 13
expression           : 4 7 7 9 14 14 15 15 16 16 17 17 18 18 19 22 22 23 23 24 24 25 25 26 26 27 27
random_statement     : 31
statement            : 1 2 12 13 13
statements           : 2 0
var_assignment       : 9 10 11

Parsing method: LALR

state 0

    (0) S' -> . statements
    (1) statements -> . statement
    (2) statements -> . statements statement
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . IF comp_expr THEN statement end_statement
    (13) statement -> . IF comp_expr THEN statement ELSE THEN statement end_statement
    (8) var_assignment -> . SET IDENTIFIER

    OUTPUT          shift and go to state 3
    IF              shift and go to state 5
    SET             shift and go to state 6

    statements                     shift and go to state 1
    statement                      shift and go to state 2
    var_assignment                 shift and go to state 4

state 1

    (0) S' -> statements .
    (2) statements -> statements . statement
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . IF comp_expr THEN statement end_statement
    (13) statement -> . IF comp_expr THEN statement ELSE THEN statement end_statement
    (8) var_assignment -> . SET IDENTIFIER

    OUTPUT          shift and go to state 3
    IF              shift and go to state 5
    SET             shift and go to state 6

    statement                      shift and go to state 7
    var_assignment                 shift and go to state 4

state 2

    (1) statements -> statement .

    OUTPUT          reduce using rule 1 (statements -> statement .)
    IF              reduce using rule 1 (statements -> statement .)
    SET             reduce using rule 1 (statements -> statement .)
    $end            reduce using rule 1 (statements -> statement .)


state 3

    (4) statement -> OUTPUT . expression
    (5) statement -> OUTPUT . ask
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression TIMES expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression POWER expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . YES
    (21) expression -> . NO
    (28) expression -> . comp_expr
    (29) expression -> . NUMBER
    (30) expression -> . IDENTIFIER
    (31) expression -> . random_statement
    (32) expression -> . TEXT
    (33) expression -> . INPUT
    (6) ask -> . TEXT EXPECTING INPUT AND DATATYPE
    (22) comp_expr -> . expression EQ expression
    (23) comp_expr -> . expression GT expression
    (24) comp_expr -> . expression LT expression
    (25) comp_expr -> . expression GE expression
    (26) comp_expr -> . expression LE expression
    (27) comp_expr -> . expression NE expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 10
    YES             shift and go to state 11
    NO              shift and go to state 12
    NUMBER          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    TEXT            shift and go to state 17
    INPUT           shift and go to state 18
    RANDOM          shift and go to state 19

    expression                     shift and go to state 8
    ask                            shift and go to state 9
    comp_expr                      shift and go to state 13
    random_statement               shift and go to state 16

state 4

    (9) statement -> var_assignment . TO expression
    (10) statement -> var_assignment .
    (11) statement -> var_assignment . TO ask

    TO              shift and go to state 20
    OUTPUT          reduce using rule 10 (statement -> var_assignment .)
    IF              reduce using rule 10 (statement -> var_assignment .)
    SET             reduce using rule 10 (statement -> var_assignment .)
    $end            reduce using rule 10 (statement -> var_assignment .)
    ELSE            reduce using rule 10 (statement -> var_assignment .)
    END             reduce using rule 10 (statement -> var_assignment .)


state 5

    (12) statement -> IF . comp_expr THEN statement end_statement
    (13) statement -> IF . comp_expr THEN statement ELSE THEN statement end_statement
    (22) comp_expr -> . expression EQ expression
    (23) comp_expr -> . expression GT expression
    (24) comp_expr -> . expression LT expression
    (25) comp_expr -> . expression GE expression
    (26) comp_expr -> . expression LE expression
    (27) comp_expr -> . expression NE expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression TIMES expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression POWER expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . YES
    (21) expression -> . NO
    (28) expression -> . comp_expr
    (29) expression -> . NUMBER
    (30) expression -> . IDENTIFIER
    (31) expression -> . random_statement
    (32) expression -> . TEXT
    (33) expression -> . INPUT
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 10
    YES             shift and go to state 11
    NO              shift and go to state 12
    NUMBER          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    TEXT            shift and go to state 23
    INPUT           shift and go to state 18
    RANDOM          shift and go to state 19

    comp_expr                      shift and go to state 21
    expression                     shift and go to state 22
    random_statement               shift and go to state 16

state 6

    (8) var_assignment -> SET . IDENTIFIER

    IDENTIFIER      shift and go to state 24


state 7

    (2) statements -> statements statement .

    OUTPUT          reduce using rule 2 (statements -> statements statement .)
    IF              reduce using rule 2 (statements -> statements statement .)
    SET             reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)


state 8

    (4) statement -> OUTPUT expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . TIMES expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . POWER expression
    (22) comp_expr -> expression . EQ expression
    (23) comp_expr -> expression . GT expression
    (24) comp_expr -> expression . LT expression
    (25) comp_expr -> expression . GE expression
    (26) comp_expr -> expression . LE expression
    (27) comp_expr -> expression . NE expression

    OUTPUT          reduce using rule 4 (statement -> OUTPUT expression .)
    IF              reduce using rule 4 (statement -> OUTPUT expression .)
    SET             reduce using rule 4 (statement -> OUTPUT expression .)
    $end            reduce using rule 4 (statement -> OUTPUT expression .)
    ELSE            reduce using rule 4 (statement -> OUTPUT expression .)
    END             reduce using rule 4 (statement -> OUTPUT expression .)
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28
    POWER           shift and go to state 29
    EQ              shift and go to state 30
    GT              shift and go to state 31
    LT              shift and go to state 32
    GE              shift and go to state 33
    LE              shift and go to state 34
    NE              shift and go to state 35


state 9

    (5) statement -> OUTPUT ask .

    OUTPUT          reduce using rule 5 (statement -> OUTPUT ask .)
    IF              reduce using rule 5 (statement -> OUTPUT ask .)
    SET             reduce using rule 5 (statement -> OUTPUT ask .)
    $end            reduce using rule 5 (statement -> OUTPUT ask .)
    ELSE            reduce using rule 5 (statement -> OUTPUT ask .)
    END             reduce using rule 5 (statement -> OUTPUT ask .)


state 10

    (19) expression -> LPAREN . expression RPAREN
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression TIMES expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression POWER expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . YES
    (21) expression -> . NO
    (28) expression -> . comp_expr
    (29) expression -> . NUMBER
    (30) expression -> . IDENTIFIER
    (31) expression -> . random_statement
    (32) expression -> . TEXT
    (33) expression -> . INPUT
    (22) comp_expr -> . expression EQ expression
    (23) comp_expr -> . expression GT expression
    (24) comp_expr -> . expression LT expression
    (25) comp_expr -> . expression GE expression
    (26) comp_expr -> . expression LE expression
    (27) comp_expr -> . expression NE expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 10
    YES             shift and go to state 11
    NO              shift and go to state 12
    NUMBER          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    TEXT            shift and go to state 23
    INPUT           shift and go to state 18
    RANDOM          shift and go to state 19

    expression                     shift and go to state 36
    comp_expr                      shift and go to state 13
    random_statement               shift and go to state 16

state 11

    (20) expression -> YES .

    PLUS            reduce using rule 20 (expression -> YES .)
    MINUS           reduce using rule 20 (expression -> YES .)
    TIMES           reduce using rule 20 (expression -> YES .)
    DIVIDE          reduce using rule 20 (expression -> YES .)
    POWER           reduce using rule 20 (expression -> YES .)
    EQ              reduce using rule 20 (expression -> YES .)
    GT              reduce using rule 20 (expression -> YES .)
    LT              reduce using rule 20 (expression -> YES .)
    GE              reduce using rule 20 (expression -> YES .)
    LE              reduce using rule 20 (expression -> YES .)
    NE              reduce using rule 20 (expression -> YES .)
    OUTPUT          reduce using rule 20 (expression -> YES .)
    IF              reduce using rule 20 (expression -> YES .)
    SET             reduce using rule 20 (expression -> YES .)
    $end            reduce using rule 20 (expression -> YES .)
    ELSE            reduce using rule 20 (expression -> YES .)
    END             reduce using rule 20 (expression -> YES .)
    RPAREN          reduce using rule 20 (expression -> YES .)
    THEN            reduce using rule 20 (expression -> YES .)
    TO              reduce using rule 20 (expression -> YES .)


state 12

    (21) expression -> NO .

    PLUS            reduce using rule 21 (expression -> NO .)
    MINUS           reduce using rule 21 (expression -> NO .)
    TIMES           reduce using rule 21 (expression -> NO .)
    DIVIDE          reduce using rule 21 (expression -> NO .)
    POWER           reduce using rule 21 (expression -> NO .)
    EQ              reduce using rule 21 (expression -> NO .)
    GT              reduce using rule 21 (expression -> NO .)
    LT              reduce using rule 21 (expression -> NO .)
    GE              reduce using rule 21 (expression -> NO .)
    LE              reduce using rule 21 (expression -> NO .)
    NE              reduce using rule 21 (expression -> NO .)
    OUTPUT          reduce using rule 21 (expression -> NO .)
    IF              reduce using rule 21 (expression -> NO .)
    SET             reduce using rule 21 (expression -> NO .)
    $end            reduce using rule 21 (expression -> NO .)
    ELSE            reduce using rule 21 (expression -> NO .)
    END             reduce using rule 21 (expression -> NO .)
    RPAREN          reduce using rule 21 (expression -> NO .)
    THEN            reduce using rule 21 (expression -> NO .)
    TO              reduce using rule 21 (expression -> NO .)


state 13

    (28) expression -> comp_expr .

    PLUS            reduce using rule 28 (expression -> comp_expr .)
    MINUS           reduce using rule 28 (expression -> comp_expr .)
    TIMES           reduce using rule 28 (expression -> comp_expr .)
    DIVIDE          reduce using rule 28 (expression -> comp_expr .)
    POWER           reduce using rule 28 (expression -> comp_expr .)
    EQ              reduce using rule 28 (expression -> comp_expr .)
    GT              reduce using rule 28 (expression -> comp_expr .)
    LT              reduce using rule 28 (expression -> comp_expr .)
    GE              reduce using rule 28 (expression -> comp_expr .)
    LE              reduce using rule 28 (expression -> comp_expr .)
    NE              reduce using rule 28 (expression -> comp_expr .)
    OUTPUT          reduce using rule 28 (expression -> comp_expr .)
    IF              reduce using rule 28 (expression -> comp_expr .)
    SET             reduce using rule 28 (expression -> comp_expr .)
    $end            reduce using rule 28 (expression -> comp_expr .)
    ELSE            reduce using rule 28 (expression -> comp_expr .)
    END             reduce using rule 28 (expression -> comp_expr .)
    RPAREN          reduce using rule 28 (expression -> comp_expr .)
    THEN            reduce using rule 28 (expression -> comp_expr .)
    TO              reduce using rule 28 (expression -> comp_expr .)


state 14

    (29) expression -> NUMBER .

    PLUS            reduce using rule 29 (expression -> NUMBER .)
    MINUS           reduce using rule 29 (expression -> NUMBER .)
    TIMES           reduce using rule 29 (expression -> NUMBER .)
    DIVIDE          reduce using rule 29 (expression -> NUMBER .)
    POWER           reduce using rule 29 (expression -> NUMBER .)
    EQ              reduce using rule 29 (expression -> NUMBER .)
    GT              reduce using rule 29 (expression -> NUMBER .)
    LT              reduce using rule 29 (expression -> NUMBER .)
    GE              reduce using rule 29 (expression -> NUMBER .)
    LE              reduce using rule 29 (expression -> NUMBER .)
    NE              reduce using rule 29 (expression -> NUMBER .)
    OUTPUT          reduce using rule 29 (expression -> NUMBER .)
    IF              reduce using rule 29 (expression -> NUMBER .)
    SET             reduce using rule 29 (expression -> NUMBER .)
    $end            reduce using rule 29 (expression -> NUMBER .)
    ELSE            reduce using rule 29 (expression -> NUMBER .)
    END             reduce using rule 29 (expression -> NUMBER .)
    RPAREN          reduce using rule 29 (expression -> NUMBER .)
    THEN            reduce using rule 29 (expression -> NUMBER .)
    TO              reduce using rule 29 (expression -> NUMBER .)


state 15

    (30) expression -> IDENTIFIER .

    PLUS            reduce using rule 30 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 30 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 30 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 30 (expression -> IDENTIFIER .)
    POWER           reduce using rule 30 (expression -> IDENTIFIER .)
    EQ              reduce using rule 30 (expression -> IDENTIFIER .)
    GT              reduce using rule 30 (expression -> IDENTIFIER .)
    LT              reduce using rule 30 (expression -> IDENTIFIER .)
    GE              reduce using rule 30 (expression -> IDENTIFIER .)
    LE              reduce using rule 30 (expression -> IDENTIFIER .)
    NE              reduce using rule 30 (expression -> IDENTIFIER .)
    OUTPUT          reduce using rule 30 (expression -> IDENTIFIER .)
    IF              reduce using rule 30 (expression -> IDENTIFIER .)
    SET             reduce using rule 30 (expression -> IDENTIFIER .)
    $end            reduce using rule 30 (expression -> IDENTIFIER .)
    ELSE            reduce using rule 30 (expression -> IDENTIFIER .)
    END             reduce using rule 30 (expression -> IDENTIFIER .)
    RPAREN          reduce using rule 30 (expression -> IDENTIFIER .)
    THEN            reduce using rule 30 (expression -> IDENTIFIER .)
    TO              reduce using rule 30 (expression -> IDENTIFIER .)


state 16

    (31) expression -> random_statement .

    PLUS            reduce using rule 31 (expression -> random_statement .)
    MINUS           reduce using rule 31 (expression -> random_statement .)
    TIMES           reduce using rule 31 (expression -> random_statement .)
    DIVIDE          reduce using rule 31 (expression -> random_statement .)
    POWER           reduce using rule 31 (expression -> random_statement .)
    EQ              reduce using rule 31 (expression -> random_statement .)
    GT              reduce using rule 31 (expression -> random_statement .)
    LT              reduce using rule 31 (expression -> random_statement .)
    GE              reduce using rule 31 (expression -> random_statement .)
    LE              reduce using rule 31 (expression -> random_statement .)
    NE              reduce using rule 31 (expression -> random_statement .)
    OUTPUT          reduce using rule 31 (expression -> random_statement .)
    IF              reduce using rule 31 (expression -> random_statement .)
    SET             reduce using rule 31 (expression -> random_statement .)
    $end            reduce using rule 31 (expression -> random_statement .)
    ELSE            reduce using rule 31 (expression -> random_statement .)
    END             reduce using rule 31 (expression -> random_statement .)
    RPAREN          reduce using rule 31 (expression -> random_statement .)
    THEN            reduce using rule 31 (expression -> random_statement .)
    TO              reduce using rule 31 (expression -> random_statement .)


state 17

    (32) expression -> TEXT .
    (6) ask -> TEXT . EXPECTING INPUT AND DATATYPE

    PLUS            reduce using rule 32 (expression -> TEXT .)
    MINUS           reduce using rule 32 (expression -> TEXT .)
    TIMES           reduce using rule 32 (expression -> TEXT .)
    DIVIDE          reduce using rule 32 (expression -> TEXT .)
    POWER           reduce using rule 32 (expression -> TEXT .)
    EQ              reduce using rule 32 (expression -> TEXT .)
    GT              reduce using rule 32 (expression -> TEXT .)
    LT              reduce using rule 32 (expression -> TEXT .)
    GE              reduce using rule 32 (expression -> TEXT .)
    LE              reduce using rule 32 (expression -> TEXT .)
    NE              reduce using rule 32 (expression -> TEXT .)
    OUTPUT          reduce using rule 32 (expression -> TEXT .)
    IF              reduce using rule 32 (expression -> TEXT .)
    SET             reduce using rule 32 (expression -> TEXT .)
    $end            reduce using rule 32 (expression -> TEXT .)
    ELSE            reduce using rule 32 (expression -> TEXT .)
    END             reduce using rule 32 (expression -> TEXT .)
    EXPECTING       shift and go to state 37


state 18

    (33) expression -> INPUT .

    PLUS            reduce using rule 33 (expression -> INPUT .)
    MINUS           reduce using rule 33 (expression -> INPUT .)
    TIMES           reduce using rule 33 (expression -> INPUT .)
    DIVIDE          reduce using rule 33 (expression -> INPUT .)
    POWER           reduce using rule 33 (expression -> INPUT .)
    EQ              reduce using rule 33 (expression -> INPUT .)
    GT              reduce using rule 33 (expression -> INPUT .)
    LT              reduce using rule 33 (expression -> INPUT .)
    GE              reduce using rule 33 (expression -> INPUT .)
    LE              reduce using rule 33 (expression -> INPUT .)
    NE              reduce using rule 33 (expression -> INPUT .)
    OUTPUT          reduce using rule 33 (expression -> INPUT .)
    IF              reduce using rule 33 (expression -> INPUT .)
    SET             reduce using rule 33 (expression -> INPUT .)
    $end            reduce using rule 33 (expression -> INPUT .)
    ELSE            reduce using rule 33 (expression -> INPUT .)
    END             reduce using rule 33 (expression -> INPUT .)
    RPAREN          reduce using rule 33 (expression -> INPUT .)
    THEN            reduce using rule 33 (expression -> INPUT .)
    TO              reduce using rule 33 (expression -> INPUT .)


state 19

    (7) random_statement -> RANDOM . DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 38


state 20

    (9) statement -> var_assignment TO . expression
    (11) statement -> var_assignment TO . ask
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression TIMES expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression POWER expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . YES
    (21) expression -> . NO
    (28) expression -> . comp_expr
    (29) expression -> . NUMBER
    (30) expression -> . IDENTIFIER
    (31) expression -> . random_statement
    (32) expression -> . TEXT
    (33) expression -> . INPUT
    (6) ask -> . TEXT EXPECTING INPUT AND DATATYPE
    (22) comp_expr -> . expression EQ expression
    (23) comp_expr -> . expression GT expression
    (24) comp_expr -> . expression LT expression
    (25) comp_expr -> . expression GE expression
    (26) comp_expr -> . expression LE expression
    (27) comp_expr -> . expression NE expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 10
    YES             shift and go to state 11
    NO              shift and go to state 12
    NUMBER          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    TEXT            shift and go to state 17
    INPUT           shift and go to state 18
    RANDOM          shift and go to state 19

    expression                     shift and go to state 39
    ask                            shift and go to state 40
    comp_expr                      shift and go to state 13
    random_statement               shift and go to state 16

state 21

    (12) statement -> IF comp_expr . THEN statement end_statement
    (13) statement -> IF comp_expr . THEN statement ELSE THEN statement end_statement
    (28) expression -> comp_expr .

    THEN            shift and go to state 41
    EQ              reduce using rule 28 (expression -> comp_expr .)
    GT              reduce using rule 28 (expression -> comp_expr .)
    LT              reduce using rule 28 (expression -> comp_expr .)
    GE              reduce using rule 28 (expression -> comp_expr .)
    LE              reduce using rule 28 (expression -> comp_expr .)
    NE              reduce using rule 28 (expression -> comp_expr .)
    PLUS            reduce using rule 28 (expression -> comp_expr .)
    MINUS           reduce using rule 28 (expression -> comp_expr .)
    TIMES           reduce using rule 28 (expression -> comp_expr .)
    DIVIDE          reduce using rule 28 (expression -> comp_expr .)
    POWER           reduce using rule 28 (expression -> comp_expr .)


state 22

    (22) comp_expr -> expression . EQ expression
    (23) comp_expr -> expression . GT expression
    (24) comp_expr -> expression . LT expression
    (25) comp_expr -> expression . GE expression
    (26) comp_expr -> expression . LE expression
    (27) comp_expr -> expression . NE expression
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . TIMES expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . POWER expression

    EQ              shift and go to state 30
    GT              shift and go to state 31
    LT              shift and go to state 32
    GE              shift and go to state 33
    LE              shift and go to state 34
    NE              shift and go to state 35
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28
    POWER           shift and go to state 29


state 23

    (32) expression -> TEXT .

    EQ              reduce using rule 32 (expression -> TEXT .)
    GT              reduce using rule 32 (expression -> TEXT .)
    LT              reduce using rule 32 (expression -> TEXT .)
    GE              reduce using rule 32 (expression -> TEXT .)
    LE              reduce using rule 32 (expression -> TEXT .)
    NE              reduce using rule 32 (expression -> TEXT .)
    PLUS            reduce using rule 32 (expression -> TEXT .)
    MINUS           reduce using rule 32 (expression -> TEXT .)
    TIMES           reduce using rule 32 (expression -> TEXT .)
    DIVIDE          reduce using rule 32 (expression -> TEXT .)
    POWER           reduce using rule 32 (expression -> TEXT .)
    RPAREN          reduce using rule 32 (expression -> TEXT .)
    OUTPUT          reduce using rule 32 (expression -> TEXT .)
    IF              reduce using rule 32 (expression -> TEXT .)
    SET             reduce using rule 32 (expression -> TEXT .)
    $end            reduce using rule 32 (expression -> TEXT .)
    ELSE            reduce using rule 32 (expression -> TEXT .)
    END             reduce using rule 32 (expression -> TEXT .)
    THEN            reduce using rule 32 (expression -> TEXT .)
    TO              reduce using rule 32 (expression -> TEXT .)


state 24

    (8) var_assignment -> SET IDENTIFIER .

    TO              reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    OUTPUT          reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    IF              reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    SET             reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    $end            reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    ELSE            reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    END             reduce using rule 8 (var_assignment -> SET IDENTIFIER .)


state 25

    (14) expression -> expression PLUS . expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression TIMES expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression POWER expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . YES
    (21) expression -> . NO
    (28) expression -> . comp_expr
    (29) expression -> . NUMBER
    (30) expression -> . IDENTIFIER
    (31) expression -> . random_statement
    (32) expression -> . TEXT
    (33) expression -> . INPUT
    (22) comp_expr -> . expression EQ expression
    (23) comp_expr -> . expression GT expression
    (24) comp_expr -> . expression LT expression
    (25) comp_expr -> . expression GE expression
    (26) comp_expr -> . expression LE expression
    (27) comp_expr -> . expression NE expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 10
    YES             shift and go to state 11
    NO              shift and go to state 12
    NUMBER          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    TEXT            shift and go to state 23
    INPUT           shift and go to state 18
    RANDOM          shift and go to state 19

    expression                     shift and go to state 42
    comp_expr                      shift and go to state 13
    random_statement               shift and go to state 16

state 26

    (15) expression -> expression MINUS . expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression TIMES expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression POWER expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . YES
    (21) expression -> . NO
    (28) expression -> . comp_expr
    (29) expression -> . NUMBER
    (30) expression -> . IDENTIFIER
    (31) expression -> . random_statement
    (32) expression -> . TEXT
    (33) expression -> . INPUT
    (22) comp_expr -> . expression EQ expression
    (23) comp_expr -> . expression GT expression
    (24) comp_expr -> . expression LT expression
    (25) comp_expr -> . expression GE expression
    (26) comp_expr -> . expression LE expression
    (27) comp_expr -> . expression NE expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 10
    YES             shift and go to state 11
    NO              shift and go to state 12
    NUMBER          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    TEXT            shift and go to state 23
    INPUT           shift and go to state 18
    RANDOM          shift and go to state 19

    expression                     shift and go to state 43
    comp_expr                      shift and go to state 13
    random_statement               shift and go to state 16

state 27

    (16) expression -> expression TIMES . expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression TIMES expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression POWER expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . YES
    (21) expression -> . NO
    (28) expression -> . comp_expr
    (29) expression -> . NUMBER
    (30) expression -> . IDENTIFIER
    (31) expression -> . random_statement
    (32) expression -> . TEXT
    (33) expression -> . INPUT
    (22) comp_expr -> . expression EQ expression
    (23) comp_expr -> . expression GT expression
    (24) comp_expr -> . expression LT expression
    (25) comp_expr -> . expression GE expression
    (26) comp_expr -> . expression LE expression
    (27) comp_expr -> . expression NE expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 10
    YES             shift and go to state 11
    NO              shift and go to state 12
    NUMBER          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    TEXT            shift and go to state 23
    INPUT           shift and go to state 18
    RANDOM          shift and go to state 19

    expression                     shift and go to state 44
    comp_expr                      shift and go to state 13
    random_statement               shift and go to state 16

state 28

    (17) expression -> expression DIVIDE . expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression TIMES expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression POWER expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . YES
    (21) expression -> . NO
    (28) expression -> . comp_expr
    (29) expression -> . NUMBER
    (30) expression -> . IDENTIFIER
    (31) expression -> . random_statement
    (32) expression -> . TEXT
    (33) expression -> . INPUT
    (22) comp_expr -> . expression EQ expression
    (23) comp_expr -> . expression GT expression
    (24) comp_expr -> . expression LT expression
    (25) comp_expr -> . expression GE expression
    (26) comp_expr -> . expression LE expression
    (27) comp_expr -> . expression NE expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 10
    YES             shift and go to state 11
    NO              shift and go to state 12
    NUMBER          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    TEXT            shift and go to state 23
    INPUT           shift and go to state 18
    RANDOM          shift and go to state 19

    expression                     shift and go to state 45
    comp_expr                      shift and go to state 13
    random_statement               shift and go to state 16

state 29

    (18) expression -> expression POWER . expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression TIMES expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression POWER expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . YES
    (21) expression -> . NO
    (28) expression -> . comp_expr
    (29) expression -> . NUMBER
    (30) expression -> . IDENTIFIER
    (31) expression -> . random_statement
    (32) expression -> . TEXT
    (33) expression -> . INPUT
    (22) comp_expr -> . expression EQ expression
    (23) comp_expr -> . expression GT expression
    (24) comp_expr -> . expression LT expression
    (25) comp_expr -> . expression GE expression
    (26) comp_expr -> . expression LE expression
    (27) comp_expr -> . expression NE expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 10
    YES             shift and go to state 11
    NO              shift and go to state 12
    NUMBER          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    TEXT            shift and go to state 23
    INPUT           shift and go to state 18
    RANDOM          shift and go to state 19

    expression                     shift and go to state 46
    comp_expr                      shift and go to state 13
    random_statement               shift and go to state 16

state 30

    (22) comp_expr -> expression EQ . expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression TIMES expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression POWER expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . YES
    (21) expression -> . NO
    (28) expression -> . comp_expr
    (29) expression -> . NUMBER
    (30) expression -> . IDENTIFIER
    (31) expression -> . random_statement
    (32) expression -> . TEXT
    (33) expression -> . INPUT
    (22) comp_expr -> . expression EQ expression
    (23) comp_expr -> . expression GT expression
    (24) comp_expr -> . expression LT expression
    (25) comp_expr -> . expression GE expression
    (26) comp_expr -> . expression LE expression
    (27) comp_expr -> . expression NE expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 10
    YES             shift and go to state 11
    NO              shift and go to state 12
    NUMBER          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    TEXT            shift and go to state 23
    INPUT           shift and go to state 18
    RANDOM          shift and go to state 19

    expression                     shift and go to state 47
    comp_expr                      shift and go to state 13
    random_statement               shift and go to state 16

state 31

    (23) comp_expr -> expression GT . expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression TIMES expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression POWER expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . YES
    (21) expression -> . NO
    (28) expression -> . comp_expr
    (29) expression -> . NUMBER
    (30) expression -> . IDENTIFIER
    (31) expression -> . random_statement
    (32) expression -> . TEXT
    (33) expression -> . INPUT
    (22) comp_expr -> . expression EQ expression
    (23) comp_expr -> . expression GT expression
    (24) comp_expr -> . expression LT expression
    (25) comp_expr -> . expression GE expression
    (26) comp_expr -> . expression LE expression
    (27) comp_expr -> . expression NE expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 10
    YES             shift and go to state 11
    NO              shift and go to state 12
    NUMBER          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    TEXT            shift and go to state 23
    INPUT           shift and go to state 18
    RANDOM          shift and go to state 19

    expression                     shift and go to state 48
    comp_expr                      shift and go to state 13
    random_statement               shift and go to state 16

state 32

    (24) comp_expr -> expression LT . expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression TIMES expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression POWER expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . YES
    (21) expression -> . NO
    (28) expression -> . comp_expr
    (29) expression -> . NUMBER
    (30) expression -> . IDENTIFIER
    (31) expression -> . random_statement
    (32) expression -> . TEXT
    (33) expression -> . INPUT
    (22) comp_expr -> . expression EQ expression
    (23) comp_expr -> . expression GT expression
    (24) comp_expr -> . expression LT expression
    (25) comp_expr -> . expression GE expression
    (26) comp_expr -> . expression LE expression
    (27) comp_expr -> . expression NE expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 10
    YES             shift and go to state 11
    NO              shift and go to state 12
    NUMBER          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    TEXT            shift and go to state 23
    INPUT           shift and go to state 18
    RANDOM          shift and go to state 19

    expression                     shift and go to state 49
    comp_expr                      shift and go to state 13
    random_statement               shift and go to state 16

state 33

    (25) comp_expr -> expression GE . expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression TIMES expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression POWER expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . YES
    (21) expression -> . NO
    (28) expression -> . comp_expr
    (29) expression -> . NUMBER
    (30) expression -> . IDENTIFIER
    (31) expression -> . random_statement
    (32) expression -> . TEXT
    (33) expression -> . INPUT
    (22) comp_expr -> . expression EQ expression
    (23) comp_expr -> . expression GT expression
    (24) comp_expr -> . expression LT expression
    (25) comp_expr -> . expression GE expression
    (26) comp_expr -> . expression LE expression
    (27) comp_expr -> . expression NE expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 10
    YES             shift and go to state 11
    NO              shift and go to state 12
    NUMBER          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    TEXT            shift and go to state 23
    INPUT           shift and go to state 18
    RANDOM          shift and go to state 19

    expression                     shift and go to state 50
    comp_expr                      shift and go to state 13
    random_statement               shift and go to state 16

state 34

    (26) comp_expr -> expression LE . expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression TIMES expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression POWER expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . YES
    (21) expression -> . NO
    (28) expression -> . comp_expr
    (29) expression -> . NUMBER
    (30) expression -> . IDENTIFIER
    (31) expression -> . random_statement
    (32) expression -> . TEXT
    (33) expression -> . INPUT
    (22) comp_expr -> . expression EQ expression
    (23) comp_expr -> . expression GT expression
    (24) comp_expr -> . expression LT expression
    (25) comp_expr -> . expression GE expression
    (26) comp_expr -> . expression LE expression
    (27) comp_expr -> . expression NE expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 10
    YES             shift and go to state 11
    NO              shift and go to state 12
    NUMBER          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    TEXT            shift and go to state 23
    INPUT           shift and go to state 18
    RANDOM          shift and go to state 19

    expression                     shift and go to state 51
    comp_expr                      shift and go to state 13
    random_statement               shift and go to state 16

state 35

    (27) comp_expr -> expression NE . expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression TIMES expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression POWER expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . YES
    (21) expression -> . NO
    (28) expression -> . comp_expr
    (29) expression -> . NUMBER
    (30) expression -> . IDENTIFIER
    (31) expression -> . random_statement
    (32) expression -> . TEXT
    (33) expression -> . INPUT
    (22) comp_expr -> . expression EQ expression
    (23) comp_expr -> . expression GT expression
    (24) comp_expr -> . expression LT expression
    (25) comp_expr -> . expression GE expression
    (26) comp_expr -> . expression LE expression
    (27) comp_expr -> . expression NE expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 10
    YES             shift and go to state 11
    NO              shift and go to state 12
    NUMBER          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    TEXT            shift and go to state 23
    INPUT           shift and go to state 18
    RANDOM          shift and go to state 19

    expression                     shift and go to state 52
    comp_expr                      shift and go to state 13
    random_statement               shift and go to state 16

state 36

    (19) expression -> LPAREN expression . RPAREN
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . TIMES expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . POWER expression
    (22) comp_expr -> expression . EQ expression
    (23) comp_expr -> expression . GT expression
    (24) comp_expr -> expression . LT expression
    (25) comp_expr -> expression . GE expression
    (26) comp_expr -> expression . LE expression
    (27) comp_expr -> expression . NE expression

    RPAREN          shift and go to state 53
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28
    POWER           shift and go to state 29
    EQ              shift and go to state 30
    GT              shift and go to state 31
    LT              shift and go to state 32
    GE              shift and go to state 33
    LE              shift and go to state 34
    NE              shift and go to state 35


state 37

    (6) ask -> TEXT EXPECTING . INPUT AND DATATYPE

    INPUT           shift and go to state 54


state 38

    (7) random_statement -> RANDOM DATATYPE . FROM expression TO expression

    FROM            shift and go to state 55


state 39

    (9) statement -> var_assignment TO expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . TIMES expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . POWER expression
    (22) comp_expr -> expression . EQ expression
    (23) comp_expr -> expression . GT expression
    (24) comp_expr -> expression . LT expression
    (25) comp_expr -> expression . GE expression
    (26) comp_expr -> expression . LE expression
    (27) comp_expr -> expression . NE expression

    OUTPUT          reduce using rule 9 (statement -> var_assignment TO expression .)
    IF              reduce using rule 9 (statement -> var_assignment TO expression .)
    SET             reduce using rule 9 (statement -> var_assignment TO expression .)
    $end            reduce using rule 9 (statement -> var_assignment TO expression .)
    ELSE            reduce using rule 9 (statement -> var_assignment TO expression .)
    END             reduce using rule 9 (statement -> var_assignment TO expression .)
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28
    POWER           shift and go to state 29
    EQ              shift and go to state 30
    GT              shift and go to state 31
    LT              shift and go to state 32
    GE              shift and go to state 33
    LE              shift and go to state 34
    NE              shift and go to state 35


state 40

    (11) statement -> var_assignment TO ask .

    OUTPUT          reduce using rule 11 (statement -> var_assignment TO ask .)
    IF              reduce using rule 11 (statement -> var_assignment TO ask .)
    SET             reduce using rule 11 (statement -> var_assignment TO ask .)
    $end            reduce using rule 11 (statement -> var_assignment TO ask .)
    ELSE            reduce using rule 11 (statement -> var_assignment TO ask .)
    END             reduce using rule 11 (statement -> var_assignment TO ask .)


state 41

    (12) statement -> IF comp_expr THEN . statement end_statement
    (13) statement -> IF comp_expr THEN . statement ELSE THEN statement end_statement
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . IF comp_expr THEN statement end_statement
    (13) statement -> . IF comp_expr THEN statement ELSE THEN statement end_statement
    (8) var_assignment -> . SET IDENTIFIER

    OUTPUT          shift and go to state 3
    IF              shift and go to state 5
    SET             shift and go to state 6

    statement                      shift and go to state 56
    var_assignment                 shift and go to state 4

state 42

    (14) expression -> expression PLUS expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . TIMES expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . POWER expression
    (22) comp_expr -> expression . EQ expression
    (23) comp_expr -> expression . GT expression
    (24) comp_expr -> expression . LT expression
    (25) comp_expr -> expression . GE expression
    (26) comp_expr -> expression . LE expression
    (27) comp_expr -> expression . NE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    OUTPUT          reduce using rule 14 (expression -> expression PLUS expression .)
    IF              reduce using rule 14 (expression -> expression PLUS expression .)
    SET             reduce using rule 14 (expression -> expression PLUS expression .)
    $end            reduce using rule 14 (expression -> expression PLUS expression .)
    ELSE            reduce using rule 14 (expression -> expression PLUS expression .)
    END             reduce using rule 14 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 14 (expression -> expression PLUS expression .)
    THEN            reduce using rule 14 (expression -> expression PLUS expression .)
    TO              reduce using rule 14 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28
    POWER           shift and go to state 29
    EQ              shift and go to state 30
    GT              shift and go to state 31
    LT              shift and go to state 32
    GE              shift and go to state 33
    LE              shift and go to state 34
    NE              shift and go to state 35

  ! PLUS            [ reduce using rule 14 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 14 (expression -> expression PLUS expression .) ]
  ! TIMES           [ reduce using rule 14 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 14 (expression -> expression PLUS expression .) ]
  ! POWER           [ reduce using rule 14 (expression -> expression PLUS expression .) ]
  ! EQ              [ reduce using rule 14 (expression -> expression PLUS expression .) ]
  ! GT              [ reduce using rule 14 (expression -> expression PLUS expression .) ]
  ! LT              [ reduce using rule 14 (expression -> expression PLUS expression .) ]
  ! GE              [ reduce using rule 14 (expression -> expression PLUS expression .) ]
  ! LE              [ reduce using rule 14 (expression -> expression PLUS expression .) ]
  ! NE              [ reduce using rule 14 (expression -> expression PLUS expression .) ]


state 43

    (15) expression -> expression MINUS expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . TIMES expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . POWER expression
    (22) comp_expr -> expression . EQ expression
    (23) comp_expr -> expression . GT expression
    (24) comp_expr -> expression . LT expression
    (25) comp_expr -> expression . GE expression
    (26) comp_expr -> expression . LE expression
    (27) comp_expr -> expression . NE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    OUTPUT          reduce using rule 15 (expression -> expression MINUS expression .)
    IF              reduce using rule 15 (expression -> expression MINUS expression .)
    SET             reduce using rule 15 (expression -> expression MINUS expression .)
    $end            reduce using rule 15 (expression -> expression MINUS expression .)
    ELSE            reduce using rule 15 (expression -> expression MINUS expression .)
    END             reduce using rule 15 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 15 (expression -> expression MINUS expression .)
    THEN            reduce using rule 15 (expression -> expression MINUS expression .)
    TO              reduce using rule 15 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28
    POWER           shift and go to state 29
    EQ              shift and go to state 30
    GT              shift and go to state 31
    LT              shift and go to state 32
    GE              shift and go to state 33
    LE              shift and go to state 34
    NE              shift and go to state 35

  ! PLUS            [ reduce using rule 15 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 15 (expression -> expression MINUS expression .) ]
  ! TIMES           [ reduce using rule 15 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 15 (expression -> expression MINUS expression .) ]
  ! POWER           [ reduce using rule 15 (expression -> expression MINUS expression .) ]
  ! EQ              [ reduce using rule 15 (expression -> expression MINUS expression .) ]
  ! GT              [ reduce using rule 15 (expression -> expression MINUS expression .) ]
  ! LT              [ reduce using rule 15 (expression -> expression MINUS expression .) ]
  ! GE              [ reduce using rule 15 (expression -> expression MINUS expression .) ]
  ! LE              [ reduce using rule 15 (expression -> expression MINUS expression .) ]
  ! NE              [ reduce using rule 15 (expression -> expression MINUS expression .) ]


state 44

    (16) expression -> expression TIMES expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . TIMES expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . POWER expression
    (22) comp_expr -> expression . EQ expression
    (23) comp_expr -> expression . GT expression
    (24) comp_expr -> expression . LT expression
    (25) comp_expr -> expression . GE expression
    (26) comp_expr -> expression . LE expression
    (27) comp_expr -> expression . NE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    OUTPUT          reduce using rule 16 (expression -> expression TIMES expression .)
    IF              reduce using rule 16 (expression -> expression TIMES expression .)
    SET             reduce using rule 16 (expression -> expression TIMES expression .)
    $end            reduce using rule 16 (expression -> expression TIMES expression .)
    ELSE            reduce using rule 16 (expression -> expression TIMES expression .)
    END             reduce using rule 16 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 16 (expression -> expression TIMES expression .)
    THEN            reduce using rule 16 (expression -> expression TIMES expression .)
    TO              reduce using rule 16 (expression -> expression TIMES expression .)
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28
    POWER           shift and go to state 29
    EQ              shift and go to state 30
    GT              shift and go to state 31
    LT              shift and go to state 32
    GE              shift and go to state 33
    LE              shift and go to state 34
    NE              shift and go to state 35

  ! PLUS            [ reduce using rule 16 (expression -> expression TIMES expression .) ]
  ! MINUS           [ reduce using rule 16 (expression -> expression TIMES expression .) ]
  ! TIMES           [ reduce using rule 16 (expression -> expression TIMES expression .) ]
  ! DIVIDE          [ reduce using rule 16 (expression -> expression TIMES expression .) ]
  ! POWER           [ reduce using rule 16 (expression -> expression TIMES expression .) ]
  ! EQ              [ reduce using rule 16 (expression -> expression TIMES expression .) ]
  ! GT              [ reduce using rule 16 (expression -> expression TIMES expression .) ]
  ! LT              [ reduce using rule 16 (expression -> expression TIMES expression .) ]
  ! GE              [ reduce using rule 16 (expression -> expression TIMES expression .) ]
  ! LE              [ reduce using rule 16 (expression -> expression TIMES expression .) ]
  ! NE              [ reduce using rule 16 (expression -> expression TIMES expression .) ]


state 45

    (17) expression -> expression DIVIDE expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . TIMES expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . POWER expression
    (22) comp_expr -> expression . EQ expression
    (23) comp_expr -> expression . GT expression
    (24) comp_expr -> expression . LT expression
    (25) comp_expr -> expression . GE expression
    (26) comp_expr -> expression . LE expression
    (27) comp_expr -> expression . NE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    OUTPUT          reduce using rule 17 (expression -> expression DIVIDE expression .)
    IF              reduce using rule 17 (expression -> expression DIVIDE expression .)
    SET             reduce using rule 17 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 17 (expression -> expression DIVIDE expression .)
    ELSE            reduce using rule 17 (expression -> expression DIVIDE expression .)
    END             reduce using rule 17 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 17 (expression -> expression DIVIDE expression .)
    THEN            reduce using rule 17 (expression -> expression DIVIDE expression .)
    TO              reduce using rule 17 (expression -> expression DIVIDE expression .)
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28
    POWER           shift and go to state 29
    EQ              shift and go to state 30
    GT              shift and go to state 31
    LT              shift and go to state 32
    GE              shift and go to state 33
    LE              shift and go to state 34
    NE              shift and go to state 35

  ! PLUS            [ reduce using rule 17 (expression -> expression DIVIDE expression .) ]
  ! MINUS           [ reduce using rule 17 (expression -> expression DIVIDE expression .) ]
  ! TIMES           [ reduce using rule 17 (expression -> expression DIVIDE expression .) ]
  ! DIVIDE          [ reduce using rule 17 (expression -> expression DIVIDE expression .) ]
  ! POWER           [ reduce using rule 17 (expression -> expression DIVIDE expression .) ]
  ! EQ              [ reduce using rule 17 (expression -> expression DIVIDE expression .) ]
  ! GT              [ reduce using rule 17 (expression -> expression DIVIDE expression .) ]
  ! LT              [ reduce using rule 17 (expression -> expression DIVIDE expression .) ]
  ! GE              [ reduce using rule 17 (expression -> expression DIVIDE expression .) ]
  ! LE              [ reduce using rule 17 (expression -> expression DIVIDE expression .) ]
  ! NE              [ reduce using rule 17 (expression -> expression DIVIDE expression .) ]


state 46

    (18) expression -> expression POWER expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . TIMES expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . POWER expression
    (22) comp_expr -> expression . EQ expression
    (23) comp_expr -> expression . GT expression
    (24) comp_expr -> expression . LT expression
    (25) comp_expr -> expression . GE expression
    (26) comp_expr -> expression . LE expression
    (27) comp_expr -> expression . NE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    OUTPUT          reduce using rule 18 (expression -> expression POWER expression .)
    IF              reduce using rule 18 (expression -> expression POWER expression .)
    SET             reduce using rule 18 (expression -> expression POWER expression .)
    $end            reduce using rule 18 (expression -> expression POWER expression .)
    ELSE            reduce using rule 18 (expression -> expression POWER expression .)
    END             reduce using rule 18 (expression -> expression POWER expression .)
    RPAREN          reduce using rule 18 (expression -> expression POWER expression .)
    THEN            reduce using rule 18 (expression -> expression POWER expression .)
    TO              reduce using rule 18 (expression -> expression POWER expression .)
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28
    POWER           shift and go to state 29
    EQ              shift and go to state 30
    GT              shift and go to state 31
    LT              shift and go to state 32
    GE              shift and go to state 33
    LE              shift and go to state 34
    NE              shift and go to state 35

  ! PLUS            [ reduce using rule 18 (expression -> expression POWER expression .) ]
  ! MINUS           [ reduce using rule 18 (expression -> expression POWER expression .) ]
  ! TIMES           [ reduce using rule 18 (expression -> expression POWER expression .) ]
  ! DIVIDE          [ reduce using rule 18 (expression -> expression POWER expression .) ]
  ! POWER           [ reduce using rule 18 (expression -> expression POWER expression .) ]
  ! EQ              [ reduce using rule 18 (expression -> expression POWER expression .) ]
  ! GT              [ reduce using rule 18 (expression -> expression POWER expression .) ]
  ! LT              [ reduce using rule 18 (expression -> expression POWER expression .) ]
  ! GE              [ reduce using rule 18 (expression -> expression POWER expression .) ]
  ! LE              [ reduce using rule 18 (expression -> expression POWER expression .) ]
  ! NE              [ reduce using rule 18 (expression -> expression POWER expression .) ]


state 47

    (22) comp_expr -> expression EQ expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . TIMES expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . POWER expression
    (22) comp_expr -> expression . EQ expression
    (23) comp_expr -> expression . GT expression
    (24) comp_expr -> expression . LT expression
    (25) comp_expr -> expression . GE expression
    (26) comp_expr -> expression . LE expression
    (27) comp_expr -> expression . NE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    OUTPUT          reduce using rule 22 (comp_expr -> expression EQ expression .)
    IF              reduce using rule 22 (comp_expr -> expression EQ expression .)
    SET             reduce using rule 22 (comp_expr -> expression EQ expression .)
    $end            reduce using rule 22 (comp_expr -> expression EQ expression .)
    ELSE            reduce using rule 22 (comp_expr -> expression EQ expression .)
    END             reduce using rule 22 (comp_expr -> expression EQ expression .)
    THEN            reduce using rule 22 (comp_expr -> expression EQ expression .)
    RPAREN          reduce using rule 22 (comp_expr -> expression EQ expression .)
    TO              reduce using rule 22 (comp_expr -> expression EQ expression .)
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28
    POWER           shift and go to state 29
    EQ              shift and go to state 30
    GT              shift and go to state 31
    LT              shift and go to state 32
    GE              shift and go to state 33
    LE              shift and go to state 34
    NE              shift and go to state 35

  ! PLUS            [ reduce using rule 22 (comp_expr -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 22 (comp_expr -> expression EQ expression .) ]
  ! TIMES           [ reduce using rule 22 (comp_expr -> expression EQ expression .) ]
  ! DIVIDE          [ reduce using rule 22 (comp_expr -> expression EQ expression .) ]
  ! POWER           [ reduce using rule 22 (comp_expr -> expression EQ expression .) ]
  ! EQ              [ reduce using rule 22 (comp_expr -> expression EQ expression .) ]
  ! GT              [ reduce using rule 22 (comp_expr -> expression EQ expression .) ]
  ! LT              [ reduce using rule 22 (comp_expr -> expression EQ expression .) ]
  ! GE              [ reduce using rule 22 (comp_expr -> expression EQ expression .) ]
  ! LE              [ reduce using rule 22 (comp_expr -> expression EQ expression .) ]
  ! NE              [ reduce using rule 22 (comp_expr -> expression EQ expression .) ]


state 48

    (23) comp_expr -> expression GT expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . TIMES expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . POWER expression
    (22) comp_expr -> expression . EQ expression
    (23) comp_expr -> expression . GT expression
    (24) comp_expr -> expression . LT expression
    (25) comp_expr -> expression . GE expression
    (26) comp_expr -> expression . LE expression
    (27) comp_expr -> expression . NE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    OUTPUT          reduce using rule 23 (comp_expr -> expression GT expression .)
    IF              reduce using rule 23 (comp_expr -> expression GT expression .)
    SET             reduce using rule 23 (comp_expr -> expression GT expression .)
    $end            reduce using rule 23 (comp_expr -> expression GT expression .)
    ELSE            reduce using rule 23 (comp_expr -> expression GT expression .)
    END             reduce using rule 23 (comp_expr -> expression GT expression .)
    THEN            reduce using rule 23 (comp_expr -> expression GT expression .)
    RPAREN          reduce using rule 23 (comp_expr -> expression GT expression .)
    TO              reduce using rule 23 (comp_expr -> expression GT expression .)
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28
    POWER           shift and go to state 29
    EQ              shift and go to state 30
    GT              shift and go to state 31
    LT              shift and go to state 32
    GE              shift and go to state 33
    LE              shift and go to state 34
    NE              shift and go to state 35

  ! PLUS            [ reduce using rule 23 (comp_expr -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 23 (comp_expr -> expression GT expression .) ]
  ! TIMES           [ reduce using rule 23 (comp_expr -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 23 (comp_expr -> expression GT expression .) ]
  ! POWER           [ reduce using rule 23 (comp_expr -> expression GT expression .) ]
  ! EQ              [ reduce using rule 23 (comp_expr -> expression GT expression .) ]
  ! GT              [ reduce using rule 23 (comp_expr -> expression GT expression .) ]
  ! LT              [ reduce using rule 23 (comp_expr -> expression GT expression .) ]
  ! GE              [ reduce using rule 23 (comp_expr -> expression GT expression .) ]
  ! LE              [ reduce using rule 23 (comp_expr -> expression GT expression .) ]
  ! NE              [ reduce using rule 23 (comp_expr -> expression GT expression .) ]


state 49

    (24) comp_expr -> expression LT expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . TIMES expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . POWER expression
    (22) comp_expr -> expression . EQ expression
    (23) comp_expr -> expression . GT expression
    (24) comp_expr -> expression . LT expression
    (25) comp_expr -> expression . GE expression
    (26) comp_expr -> expression . LE expression
    (27) comp_expr -> expression . NE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    OUTPUT          reduce using rule 24 (comp_expr -> expression LT expression .)
    IF              reduce using rule 24 (comp_expr -> expression LT expression .)
    SET             reduce using rule 24 (comp_expr -> expression LT expression .)
    $end            reduce using rule 24 (comp_expr -> expression LT expression .)
    ELSE            reduce using rule 24 (comp_expr -> expression LT expression .)
    END             reduce using rule 24 (comp_expr -> expression LT expression .)
    THEN            reduce using rule 24 (comp_expr -> expression LT expression .)
    RPAREN          reduce using rule 24 (comp_expr -> expression LT expression .)
    TO              reduce using rule 24 (comp_expr -> expression LT expression .)
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28
    POWER           shift and go to state 29
    EQ              shift and go to state 30
    GT              shift and go to state 31
    LT              shift and go to state 32
    GE              shift and go to state 33
    LE              shift and go to state 34
    NE              shift and go to state 35

  ! PLUS            [ reduce using rule 24 (comp_expr -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 24 (comp_expr -> expression LT expression .) ]
  ! TIMES           [ reduce using rule 24 (comp_expr -> expression LT expression .) ]
  ! DIVIDE          [ reduce using rule 24 (comp_expr -> expression LT expression .) ]
  ! POWER           [ reduce using rule 24 (comp_expr -> expression LT expression .) ]
  ! EQ              [ reduce using rule 24 (comp_expr -> expression LT expression .) ]
  ! GT              [ reduce using rule 24 (comp_expr -> expression LT expression .) ]
  ! LT              [ reduce using rule 24 (comp_expr -> expression LT expression .) ]
  ! GE              [ reduce using rule 24 (comp_expr -> expression LT expression .) ]
  ! LE              [ reduce using rule 24 (comp_expr -> expression LT expression .) ]
  ! NE              [ reduce using rule 24 (comp_expr -> expression LT expression .) ]


state 50

    (25) comp_expr -> expression GE expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . TIMES expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . POWER expression
    (22) comp_expr -> expression . EQ expression
    (23) comp_expr -> expression . GT expression
    (24) comp_expr -> expression . LT expression
    (25) comp_expr -> expression . GE expression
    (26) comp_expr -> expression . LE expression
    (27) comp_expr -> expression . NE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    OUTPUT          reduce using rule 25 (comp_expr -> expression GE expression .)
    IF              reduce using rule 25 (comp_expr -> expression GE expression .)
    SET             reduce using rule 25 (comp_expr -> expression GE expression .)
    $end            reduce using rule 25 (comp_expr -> expression GE expression .)
    ELSE            reduce using rule 25 (comp_expr -> expression GE expression .)
    END             reduce using rule 25 (comp_expr -> expression GE expression .)
    THEN            reduce using rule 25 (comp_expr -> expression GE expression .)
    RPAREN          reduce using rule 25 (comp_expr -> expression GE expression .)
    TO              reduce using rule 25 (comp_expr -> expression GE expression .)
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28
    POWER           shift and go to state 29
    EQ              shift and go to state 30
    GT              shift and go to state 31
    LT              shift and go to state 32
    GE              shift and go to state 33
    LE              shift and go to state 34
    NE              shift and go to state 35

  ! PLUS            [ reduce using rule 25 (comp_expr -> expression GE expression .) ]
  ! MINUS           [ reduce using rule 25 (comp_expr -> expression GE expression .) ]
  ! TIMES           [ reduce using rule 25 (comp_expr -> expression GE expression .) ]
  ! DIVIDE          [ reduce using rule 25 (comp_expr -> expression GE expression .) ]
  ! POWER           [ reduce using rule 25 (comp_expr -> expression GE expression .) ]
  ! EQ              [ reduce using rule 25 (comp_expr -> expression GE expression .) ]
  ! GT              [ reduce using rule 25 (comp_expr -> expression GE expression .) ]
  ! LT              [ reduce using rule 25 (comp_expr -> expression GE expression .) ]
  ! GE              [ reduce using rule 25 (comp_expr -> expression GE expression .) ]
  ! LE              [ reduce using rule 25 (comp_expr -> expression GE expression .) ]
  ! NE              [ reduce using rule 25 (comp_expr -> expression GE expression .) ]


state 51

    (26) comp_expr -> expression LE expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . TIMES expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . POWER expression
    (22) comp_expr -> expression . EQ expression
    (23) comp_expr -> expression . GT expression
    (24) comp_expr -> expression . LT expression
    (25) comp_expr -> expression . GE expression
    (26) comp_expr -> expression . LE expression
    (27) comp_expr -> expression . NE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    OUTPUT          reduce using rule 26 (comp_expr -> expression LE expression .)
    IF              reduce using rule 26 (comp_expr -> expression LE expression .)
    SET             reduce using rule 26 (comp_expr -> expression LE expression .)
    $end            reduce using rule 26 (comp_expr -> expression LE expression .)
    ELSE            reduce using rule 26 (comp_expr -> expression LE expression .)
    END             reduce using rule 26 (comp_expr -> expression LE expression .)
    THEN            reduce using rule 26 (comp_expr -> expression LE expression .)
    RPAREN          reduce using rule 26 (comp_expr -> expression LE expression .)
    TO              reduce using rule 26 (comp_expr -> expression LE expression .)
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28
    POWER           shift and go to state 29
    EQ              shift and go to state 30
    GT              shift and go to state 31
    LT              shift and go to state 32
    GE              shift and go to state 33
    LE              shift and go to state 34
    NE              shift and go to state 35

  ! PLUS            [ reduce using rule 26 (comp_expr -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 26 (comp_expr -> expression LE expression .) ]
  ! TIMES           [ reduce using rule 26 (comp_expr -> expression LE expression .) ]
  ! DIVIDE          [ reduce using rule 26 (comp_expr -> expression LE expression .) ]
  ! POWER           [ reduce using rule 26 (comp_expr -> expression LE expression .) ]
  ! EQ              [ reduce using rule 26 (comp_expr -> expression LE expression .) ]
  ! GT              [ reduce using rule 26 (comp_expr -> expression LE expression .) ]
  ! LT              [ reduce using rule 26 (comp_expr -> expression LE expression .) ]
  ! GE              [ reduce using rule 26 (comp_expr -> expression LE expression .) ]
  ! LE              [ reduce using rule 26 (comp_expr -> expression LE expression .) ]
  ! NE              [ reduce using rule 26 (comp_expr -> expression LE expression .) ]


state 52

    (27) comp_expr -> expression NE expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . TIMES expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . POWER expression
    (22) comp_expr -> expression . EQ expression
    (23) comp_expr -> expression . GT expression
    (24) comp_expr -> expression . LT expression
    (25) comp_expr -> expression . GE expression
    (26) comp_expr -> expression . LE expression
    (27) comp_expr -> expression . NE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    OUTPUT          reduce using rule 27 (comp_expr -> expression NE expression .)
    IF              reduce using rule 27 (comp_expr -> expression NE expression .)
    SET             reduce using rule 27 (comp_expr -> expression NE expression .)
    $end            reduce using rule 27 (comp_expr -> expression NE expression .)
    ELSE            reduce using rule 27 (comp_expr -> expression NE expression .)
    END             reduce using rule 27 (comp_expr -> expression NE expression .)
    THEN            reduce using rule 27 (comp_expr -> expression NE expression .)
    RPAREN          reduce using rule 27 (comp_expr -> expression NE expression .)
    TO              reduce using rule 27 (comp_expr -> expression NE expression .)
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28
    POWER           shift and go to state 29
    EQ              shift and go to state 30
    GT              shift and go to state 31
    LT              shift and go to state 32
    GE              shift and go to state 33
    LE              shift and go to state 34
    NE              shift and go to state 35

  ! PLUS            [ reduce using rule 27 (comp_expr -> expression NE expression .) ]
  ! MINUS           [ reduce using rule 27 (comp_expr -> expression NE expression .) ]
  ! TIMES           [ reduce using rule 27 (comp_expr -> expression NE expression .) ]
  ! DIVIDE          [ reduce using rule 27 (comp_expr -> expression NE expression .) ]
  ! POWER           [ reduce using rule 27 (comp_expr -> expression NE expression .) ]
  ! EQ              [ reduce using rule 27 (comp_expr -> expression NE expression .) ]
  ! GT              [ reduce using rule 27 (comp_expr -> expression NE expression .) ]
  ! LT              [ reduce using rule 27 (comp_expr -> expression NE expression .) ]
  ! GE              [ reduce using rule 27 (comp_expr -> expression NE expression .) ]
  ! LE              [ reduce using rule 27 (comp_expr -> expression NE expression .) ]
  ! NE              [ reduce using rule 27 (comp_expr -> expression NE expression .) ]


state 53

    (19) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    POWER           reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    OUTPUT          reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    SET             reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    END             reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    THEN            reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    TO              reduce using rule 19 (expression -> LPAREN expression RPAREN .)


state 54

    (6) ask -> TEXT EXPECTING INPUT . AND DATATYPE

    AND             shift and go to state 57


state 55

    (7) random_statement -> RANDOM DATATYPE FROM . expression TO expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression TIMES expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression POWER expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . YES
    (21) expression -> . NO
    (28) expression -> . comp_expr
    (29) expression -> . NUMBER
    (30) expression -> . IDENTIFIER
    (31) expression -> . random_statement
    (32) expression -> . TEXT
    (33) expression -> . INPUT
    (22) comp_expr -> . expression EQ expression
    (23) comp_expr -> . expression GT expression
    (24) comp_expr -> . expression LT expression
    (25) comp_expr -> . expression GE expression
    (26) comp_expr -> . expression LE expression
    (27) comp_expr -> . expression NE expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 10
    YES             shift and go to state 11
    NO              shift and go to state 12
    NUMBER          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    TEXT            shift and go to state 23
    INPUT           shift and go to state 18
    RANDOM          shift and go to state 19

    expression                     shift and go to state 58
    comp_expr                      shift and go to state 13
    random_statement               shift and go to state 16

state 56

    (12) statement -> IF comp_expr THEN statement . end_statement
    (13) statement -> IF comp_expr THEN statement . ELSE THEN statement end_statement
    (3) end_statement -> . END IF

    ELSE            shift and go to state 60
    END             shift and go to state 61

    end_statement                  shift and go to state 59

state 57

    (6) ask -> TEXT EXPECTING INPUT AND . DATATYPE

    DATATYPE        shift and go to state 62


state 58

    (7) random_statement -> RANDOM DATATYPE FROM expression . TO expression
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . TIMES expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . POWER expression
    (22) comp_expr -> expression . EQ expression
    (23) comp_expr -> expression . GT expression
    (24) comp_expr -> expression . LT expression
    (25) comp_expr -> expression . GE expression
    (26) comp_expr -> expression . LE expression
    (27) comp_expr -> expression . NE expression

    TO              shift and go to state 63
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28
    POWER           shift and go to state 29
    EQ              shift and go to state 30
    GT              shift and go to state 31
    LT              shift and go to state 32
    GE              shift and go to state 33
    LE              shift and go to state 34
    NE              shift and go to state 35


state 59

    (12) statement -> IF comp_expr THEN statement end_statement .

    OUTPUT          reduce using rule 12 (statement -> IF comp_expr THEN statement end_statement .)
    IF              reduce using rule 12 (statement -> IF comp_expr THEN statement end_statement .)
    SET             reduce using rule 12 (statement -> IF comp_expr THEN statement end_statement .)
    $end            reduce using rule 12 (statement -> IF comp_expr THEN statement end_statement .)
    ELSE            reduce using rule 12 (statement -> IF comp_expr THEN statement end_statement .)
    END             reduce using rule 12 (statement -> IF comp_expr THEN statement end_statement .)


state 60

    (13) statement -> IF comp_expr THEN statement ELSE . THEN statement end_statement

    THEN            shift and go to state 64


state 61

    (3) end_statement -> END . IF

    IF              shift and go to state 65


state 62

    (6) ask -> TEXT EXPECTING INPUT AND DATATYPE .

    OUTPUT          reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    IF              reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    SET             reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    $end            reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    ELSE            reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    END             reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)


state 63

    (7) random_statement -> RANDOM DATATYPE FROM expression TO . expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression TIMES expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . expression POWER expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . YES
    (21) expression -> . NO
    (28) expression -> . comp_expr
    (29) expression -> . NUMBER
    (30) expression -> . IDENTIFIER
    (31) expression -> . random_statement
    (32) expression -> . TEXT
    (33) expression -> . INPUT
    (22) comp_expr -> . expression EQ expression
    (23) comp_expr -> . expression GT expression
    (24) comp_expr -> . expression LT expression
    (25) comp_expr -> . expression GE expression
    (26) comp_expr -> . expression LE expression
    (27) comp_expr -> . expression NE expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    LPAREN          shift and go to state 10
    YES             shift and go to state 11
    NO              shift and go to state 12
    NUMBER          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    TEXT            shift and go to state 23
    INPUT           shift and go to state 18
    RANDOM          shift and go to state 19

    expression                     shift and go to state 66
    comp_expr                      shift and go to state 13
    random_statement               shift and go to state 16

state 64

    (13) statement -> IF comp_expr THEN statement ELSE THEN . statement end_statement
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . IF comp_expr THEN statement end_statement
    (13) statement -> . IF comp_expr THEN statement ELSE THEN statement end_statement
    (8) var_assignment -> . SET IDENTIFIER

    OUTPUT          shift and go to state 3
    IF              shift and go to state 5
    SET             shift and go to state 6

    statement                      shift and go to state 67
    var_assignment                 shift and go to state 4

state 65

    (3) end_statement -> END IF .

    OUTPUT          reduce using rule 3 (end_statement -> END IF .)
    IF              reduce using rule 3 (end_statement -> END IF .)
    SET             reduce using rule 3 (end_statement -> END IF .)
    $end            reduce using rule 3 (end_statement -> END IF .)
    ELSE            reduce using rule 3 (end_statement -> END IF .)
    END             reduce using rule 3 (end_statement -> END IF .)


state 66

    (7) random_statement -> RANDOM DATATYPE FROM expression TO expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . TIMES expression
    (17) expression -> expression . DIVIDE expression
    (18) expression -> expression . POWER expression
    (22) comp_expr -> expression . EQ expression
    (23) comp_expr -> expression . GT expression
    (24) comp_expr -> expression . LT expression
    (25) comp_expr -> expression . GE expression
    (26) comp_expr -> expression . LE expression
    (27) comp_expr -> expression . NE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    OUTPUT          reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    IF              reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    SET             reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    $end            reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    ELSE            reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    END             reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    RPAREN          reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    THEN            reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    TO              reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28
    POWER           shift and go to state 29
    EQ              shift and go to state 30
    GT              shift and go to state 31
    LT              shift and go to state 32
    GE              shift and go to state 33
    LE              shift and go to state 34
    NE              shift and go to state 35

  ! PLUS            [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! MINUS           [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! TIMES           [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! DIVIDE          [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! POWER           [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! EQ              [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! GT              [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! LT              [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! GE              [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! LE              [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! NE              [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]


state 67

    (13) statement -> IF comp_expr THEN statement ELSE THEN statement . end_statement
    (3) end_statement -> . END IF

    END             shift and go to state 61

    end_statement                  shift and go to state 68

state 68

    (13) statement -> IF comp_expr THEN statement ELSE THEN statement end_statement .

    OUTPUT          reduce using rule 13 (statement -> IF comp_expr THEN statement ELSE THEN statement end_statement .)
    IF              reduce using rule 13 (statement -> IF comp_expr THEN statement ELSE THEN statement end_statement .)
    SET             reduce using rule 13 (statement -> IF comp_expr THEN statement ELSE THEN statement end_statement .)
    $end            reduce using rule 13 (statement -> IF comp_expr THEN statement ELSE THEN statement end_statement .)
    ELSE            reduce using rule 13 (statement -> IF comp_expr THEN statement ELSE THEN statement end_statement .)
    END             reduce using rule 13 (statement -> IF comp_expr THEN statement ELSE THEN statement end_statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 42 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 42 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 42 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 42 resolved as shift
WARNING: shift/reduce conflict for POWER in state 42 resolved as shift
WARNING: shift/reduce conflict for EQ in state 42 resolved as shift
WARNING: shift/reduce conflict for GT in state 42 resolved as shift
WARNING: shift/reduce conflict for LT in state 42 resolved as shift
WARNING: shift/reduce conflict for GE in state 42 resolved as shift
WARNING: shift/reduce conflict for LE in state 42 resolved as shift
WARNING: shift/reduce conflict for NE in state 42 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 43 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 43 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 43 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 43 resolved as shift
WARNING: shift/reduce conflict for POWER in state 43 resolved as shift
WARNING: shift/reduce conflict for EQ in state 43 resolved as shift
WARNING: shift/reduce conflict for GT in state 43 resolved as shift
WARNING: shift/reduce conflict for LT in state 43 resolved as shift
WARNING: shift/reduce conflict for GE in state 43 resolved as shift
WARNING: shift/reduce conflict for LE in state 43 resolved as shift
WARNING: shift/reduce conflict for NE in state 43 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 44 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 44 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 44 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 44 resolved as shift
WARNING: shift/reduce conflict for POWER in state 44 resolved as shift
WARNING: shift/reduce conflict for EQ in state 44 resolved as shift
WARNING: shift/reduce conflict for GT in state 44 resolved as shift
WARNING: shift/reduce conflict for LT in state 44 resolved as shift
WARNING: shift/reduce conflict for GE in state 44 resolved as shift
WARNING: shift/reduce conflict for LE in state 44 resolved as shift
WARNING: shift/reduce conflict for NE in state 44 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 45 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 45 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 45 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 45 resolved as shift
WARNING: shift/reduce conflict for POWER in state 45 resolved as shift
WARNING: shift/reduce conflict for EQ in state 45 resolved as shift
WARNING: shift/reduce conflict for GT in state 45 resolved as shift
WARNING: shift/reduce conflict for LT in state 45 resolved as shift
WARNING: shift/reduce conflict for GE in state 45 resolved as shift
WARNING: shift/reduce conflict for LE in state 45 resolved as shift
WARNING: shift/reduce conflict for NE in state 45 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 46 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 46 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 46 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 46 resolved as shift
WARNING: shift/reduce conflict for POWER in state 46 resolved as shift
WARNING: shift/reduce conflict for EQ in state 46 resolved as shift
WARNING: shift/reduce conflict for GT in state 46 resolved as shift
WARNING: shift/reduce conflict for LT in state 46 resolved as shift
WARNING: shift/reduce conflict for GE in state 46 resolved as shift
WARNING: shift/reduce conflict for LE in state 46 resolved as shift
WARNING: shift/reduce conflict for NE in state 46 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 47 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 47 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 47 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 47 resolved as shift
WARNING: shift/reduce conflict for POWER in state 47 resolved as shift
WARNING: shift/reduce conflict for EQ in state 47 resolved as shift
WARNING: shift/reduce conflict for GT in state 47 resolved as shift
WARNING: shift/reduce conflict for LT in state 47 resolved as shift
WARNING: shift/reduce conflict for GE in state 47 resolved as shift
WARNING: shift/reduce conflict for LE in state 47 resolved as shift
WARNING: shift/reduce conflict for NE in state 47 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 48 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 48 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 48 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 48 resolved as shift
WARNING: shift/reduce conflict for POWER in state 48 resolved as shift
WARNING: shift/reduce conflict for EQ in state 48 resolved as shift
WARNING: shift/reduce conflict for GT in state 48 resolved as shift
WARNING: shift/reduce conflict for LT in state 48 resolved as shift
WARNING: shift/reduce conflict for GE in state 48 resolved as shift
WARNING: shift/reduce conflict for LE in state 48 resolved as shift
WARNING: shift/reduce conflict for NE in state 48 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 49 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 49 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 49 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 49 resolved as shift
WARNING: shift/reduce conflict for POWER in state 49 resolved as shift
WARNING: shift/reduce conflict for EQ in state 49 resolved as shift
WARNING: shift/reduce conflict for GT in state 49 resolved as shift
WARNING: shift/reduce conflict for LT in state 49 resolved as shift
WARNING: shift/reduce conflict for GE in state 49 resolved as shift
WARNING: shift/reduce conflict for LE in state 49 resolved as shift
WARNING: shift/reduce conflict for NE in state 49 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 50 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 50 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 50 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 50 resolved as shift
WARNING: shift/reduce conflict for POWER in state 50 resolved as shift
WARNING: shift/reduce conflict for EQ in state 50 resolved as shift
WARNING: shift/reduce conflict for GT in state 50 resolved as shift
WARNING: shift/reduce conflict for LT in state 50 resolved as shift
WARNING: shift/reduce conflict for GE in state 50 resolved as shift
WARNING: shift/reduce conflict for LE in state 50 resolved as shift
WARNING: shift/reduce conflict for NE in state 50 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 51 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 51 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 51 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 51 resolved as shift
WARNING: shift/reduce conflict for POWER in state 51 resolved as shift
WARNING: shift/reduce conflict for EQ in state 51 resolved as shift
WARNING: shift/reduce conflict for GT in state 51 resolved as shift
WARNING: shift/reduce conflict for LT in state 51 resolved as shift
WARNING: shift/reduce conflict for GE in state 51 resolved as shift
WARNING: shift/reduce conflict for LE in state 51 resolved as shift
WARNING: shift/reduce conflict for NE in state 51 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 52 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 52 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 52 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 52 resolved as shift
WARNING: shift/reduce conflict for POWER in state 52 resolved as shift
WARNING: shift/reduce conflict for EQ in state 52 resolved as shift
WARNING: shift/reduce conflict for GT in state 52 resolved as shift
WARNING: shift/reduce conflict for LT in state 52 resolved as shift
WARNING: shift/reduce conflict for GE in state 52 resolved as shift
WARNING: shift/reduce conflict for LE in state 52 resolved as shift
WARNING: shift/reduce conflict for NE in state 52 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 66 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 66 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 66 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 66 resolved as shift
WARNING: shift/reduce conflict for POWER in state 66 resolved as shift
WARNING: shift/reduce conflict for EQ in state 66 resolved as shift
WARNING: shift/reduce conflict for GT in state 66 resolved as shift
WARNING: shift/reduce conflict for LT in state 66 resolved as shift
WARNING: shift/reduce conflict for GE in state 66 resolved as shift
WARNING: shift/reduce conflict for LE in state 66 resolved as shift
WARNING: shift/reduce conflict for NE in state 66 resolved as shift
