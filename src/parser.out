Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ELSEIF

Grammar

Rule 0     S' -> statements
Rule 1     statements -> statement
Rule 2     statements -> statements statement
Rule 3     end_statement -> END
Rule 4     statement -> OUTPUT expression
Rule 5     statement -> OUTPUT ask
Rule 6     ask -> TEXT EXPECTING INPUT AND DATATYPE
Rule 7     random_statement -> RANDOM DATATYPE FROM expression TO expression
Rule 8     var_assignment -> SET IDENTIFIER
Rule 9     statement -> var_assignment TO expression
Rule 10    statement -> var_assignment
Rule 11    statement -> var_assignment TO ask
Rule 12    statement -> var_assignment TO items type_stmt
Rule 13    if_then -> IF expression THEN statements
Rule 14    statement -> if_then end_statement
Rule 15    statement -> if_then ELSE THEN statements end_statement
Rule 16    statement -> REPEAT statements UNTIL expression
Rule 17    statement -> PAUSE expression
Rule 18    type_stmt -> TYPE DATATYPE
Rule 19    statement -> FUNCTION IDENTIFIER MEANS statements end_statement
Rule 20    statement -> FUNCTION IDENTIFIER WITH arguments MEANS statements end_statement
Rule 21    statement -> WHILE expression DO statements end_statement
Rule 22    statement -> FOREVER DO statements end_statement
Rule 23    statement -> EXIT LOOP
Rule 24    statement -> CONVERT expression TO TYPE DATATYPE
Rule 25    statement -> CALL IDENTIFIER
Rule 26    statement -> CALL IDENTIFIER items
Rule 27    statement -> RETURN expression
Rule 28    statement -> DELETE DATATYPE IDENTIFIER
Rule 29    statement -> DELETE INDEX expression OF DATATYPE IDENTIFIER
Rule 30    statement -> CLEAR DATATYPE IDENTIFIER
Rule 31    statement -> ACTIVATE TEXT
Rule 32    statement -> REPEAT expression TIMES USING IDENTIFIER statements end_statement
Rule 33    arguments -> IDENTIFIER
Rule 34    arguments -> arguments IDENTIFIER
Rule 35    expression -> DATATYPE FROM expression TO expression FROM expression
Rule 36    expression -> LENGTH OF expression
Rule 37    expression -> FIND OCCURENCES OF expression IN expression
Rule 38    items -> expression
Rule 39    items -> items expression
Rule 40    expression -> expression PLUS expression
Rule 41    expression -> expression MINUS expression
Rule 42    expression -> expression TIMES expression
Rule 43    expression -> expression DIVIDE expression
Rule 44    expression -> expression POWER expression
Rule 45    expression -> LPAREN expression RPAREN
Rule 46    expression -> YES
Rule 47    expression -> NO
Rule 48    comp_expr -> expression EQ expression
Rule 49    comp_expr -> expression GT expression
Rule 50    comp_expr -> expression LT expression
Rule 51    comp_expr -> expression GE expression
Rule 52    comp_expr -> expression LE expression
Rule 53    comp_expr -> expression NE expression
Rule 54    comp_expr -> comp_expr AND comp_expr
Rule 55    comp_expr -> comp_expr OR comp_expr
Rule 56    comp_expr -> NOT expression
Rule 57    comp_expr -> expression IN expression
Rule 58    expression -> comp_expr
Rule 59    expression -> NUMBER
Rule 60    expression -> IDENTIFIER
Rule 61    expression -> random_statement
Rule 62    expression -> TEXT
Rule 63    expression -> INPUT
Rule 64    expression -> CALL IDENTIFIER
Rule 65    expression -> CALL IDENTIFIER items
Rule 66    expression -> IDENTIFIER INDEX expression

Terminals, with rules where they appear

ACTIVATE             : 31
AND                  : 6 54
CALL                 : 25 26 64 65
CLEAR                : 30
CONVERT              : 24
DATATYPE             : 6 7 18 24 28 29 30 35
DELETE               : 28 29
DIVIDE               : 43
DO                   : 21 22
ELSE                 : 15
ELSEIF               : 
END                  : 3
EQ                   : 48
EXIT                 : 23
EXPECTING            : 6
FIND                 : 37
FOREVER              : 22
FROM                 : 7 35 35
FUNCTION             : 19 20
GE                   : 51
GT                   : 49
IDENTIFIER           : 8 19 20 25 26 28 29 30 32 33 34 60 64 65 66
IF                   : 13
IN                   : 37 57
INDEX                : 29 66
INPUT                : 6 63
LE                   : 52
LENGTH               : 36
LOOP                 : 23
LPAREN               : 45
LT                   : 50
MEANS                : 19 20
MINUS                : 41
NE                   : 53
NO                   : 47
NOT                  : 56
NUMBER               : 59
OCCURENCES           : 37
OF                   : 29 36 37
OR                   : 55
OUTPUT               : 4 5
PAUSE                : 17
PLUS                 : 40
POWER                : 44
RANDOM               : 7
REPEAT               : 16 32
RETURN               : 27
RPAREN               : 45
SET                  : 8
TEXT                 : 6 31 62
THEN                 : 13 15
TIMES                : 32 42
TO                   : 7 9 11 12 24 35
TYPE                 : 18 24
UNTIL                : 16
USING                : 32
WHILE                : 21
WITH                 : 20
YES                  : 46
error                : 

Nonterminals, with rules where they appear

arguments            : 20 34
ask                  : 5 11
comp_expr            : 54 54 55 55 58
end_statement        : 14 15 19 20 21 22 32
expression           : 4 7 7 9 13 16 17 21 24 27 29 32 35 35 35 36 37 37 38 39 40 40 41 41 42 42 43 43 44 44 45 48 48 49 49 50 50 51 51 52 52 53 53 56 57 57 66
if_then              : 14 15
items                : 12 26 39 65
random_statement     : 61
statement            : 1 2
statements           : 2 13 15 16 19 20 21 22 32 0
type_stmt            : 12
var_assignment       : 9 10 11 12

Parsing method: LALR

state 0

    (0) S' -> . statements
    (1) statements -> . statement
    (2) statements -> . statements statement
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . FUNCTION IDENTIFIER WITH arguments MEANS statements end_statement
    (21) statement -> . WHILE expression DO statements end_statement
    (22) statement -> . FOREVER DO statements end_statement
    (23) statement -> . EXIT LOOP
    (24) statement -> . CONVERT expression TO TYPE DATATYPE
    (25) statement -> . CALL IDENTIFIER
    (26) statement -> . CALL IDENTIFIER items
    (27) statement -> . RETURN expression
    (28) statement -> . DELETE DATATYPE IDENTIFIER
    (29) statement -> . DELETE INDEX expression OF DATATYPE IDENTIFIER
    (30) statement -> . CLEAR DATATYPE IDENTIFIER
    (31) statement -> . ACTIVATE TEXT
    (32) statement -> . REPEAT expression TIMES USING IDENTIFIER statements end_statement
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    FOREVER         shift and go to state 10
    EXIT            shift and go to state 11
    CONVERT         shift and go to state 12
    CALL            shift and go to state 13
    RETURN          shift and go to state 14
    DELETE          shift and go to state 15
    CLEAR           shift and go to state 16
    ACTIVATE        shift and go to state 17
    SET             shift and go to state 18
    IF              shift and go to state 19

    statements                     shift and go to state 1
    statement                      shift and go to state 2
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 1

    (0) S' -> statements .
    (2) statements -> statements . statement
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . FUNCTION IDENTIFIER WITH arguments MEANS statements end_statement
    (21) statement -> . WHILE expression DO statements end_statement
    (22) statement -> . FOREVER DO statements end_statement
    (23) statement -> . EXIT LOOP
    (24) statement -> . CONVERT expression TO TYPE DATATYPE
    (25) statement -> . CALL IDENTIFIER
    (26) statement -> . CALL IDENTIFIER items
    (27) statement -> . RETURN expression
    (28) statement -> . DELETE DATATYPE IDENTIFIER
    (29) statement -> . DELETE INDEX expression OF DATATYPE IDENTIFIER
    (30) statement -> . CLEAR DATATYPE IDENTIFIER
    (31) statement -> . ACTIVATE TEXT
    (32) statement -> . REPEAT expression TIMES USING IDENTIFIER statements end_statement
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    FOREVER         shift and go to state 10
    EXIT            shift and go to state 11
    CONVERT         shift and go to state 12
    CALL            shift and go to state 13
    RETURN          shift and go to state 14
    DELETE          shift and go to state 15
    CLEAR           shift and go to state 16
    ACTIVATE        shift and go to state 17
    SET             shift and go to state 18
    IF              shift and go to state 19

    statement                      shift and go to state 20
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 2

    (1) statements -> statement .

    OUTPUT          reduce using rule 1 (statements -> statement .)
    REPEAT          reduce using rule 1 (statements -> statement .)
    PAUSE           reduce using rule 1 (statements -> statement .)
    FUNCTION        reduce using rule 1 (statements -> statement .)
    WHILE           reduce using rule 1 (statements -> statement .)
    FOREVER         reduce using rule 1 (statements -> statement .)
    EXIT            reduce using rule 1 (statements -> statement .)
    CONVERT         reduce using rule 1 (statements -> statement .)
    CALL            reduce using rule 1 (statements -> statement .)
    RETURN          reduce using rule 1 (statements -> statement .)
    DELETE          reduce using rule 1 (statements -> statement .)
    CLEAR           reduce using rule 1 (statements -> statement .)
    ACTIVATE        reduce using rule 1 (statements -> statement .)
    SET             reduce using rule 1 (statements -> statement .)
    IF              reduce using rule 1 (statements -> statement .)
    $end            reduce using rule 1 (statements -> statement .)
    UNTIL           reduce using rule 1 (statements -> statement .)
    END             reduce using rule 1 (statements -> statement .)
    ELSE            reduce using rule 1 (statements -> statement .)


state 3

    (4) statement -> OUTPUT . expression
    (5) statement -> OUTPUT . ask
    (35) expression -> . DATATYPE FROM expression TO expression FROM expression
    (36) expression -> . LENGTH OF expression
    (37) expression -> . FIND OCCURENCES OF expression IN expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression POWER expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . YES
    (47) expression -> . NO
    (58) expression -> . comp_expr
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER
    (61) expression -> . random_statement
    (62) expression -> . TEXT
    (63) expression -> . INPUT
    (64) expression -> . CALL IDENTIFIER
    (65) expression -> . CALL IDENTIFIER items
    (66) expression -> . IDENTIFIER INDEX expression
    (6) ask -> . TEXT EXPECTING INPUT AND DATATYPE
    (48) comp_expr -> . expression EQ expression
    (49) comp_expr -> . expression GT expression
    (50) comp_expr -> . expression LT expression
    (51) comp_expr -> . expression GE expression
    (52) comp_expr -> . expression LE expression
    (53) comp_expr -> . expression NE expression
    (54) comp_expr -> . comp_expr AND comp_expr
    (55) comp_expr -> . comp_expr OR comp_expr
    (56) comp_expr -> . NOT expression
    (57) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 23
    LENGTH          shift and go to state 24
    FIND            shift and go to state 25
    LPAREN          shift and go to state 26
    YES             shift and go to state 27
    NO              shift and go to state 28
    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    TEXT            shift and go to state 33
    INPUT           shift and go to state 34
    CALL            shift and go to state 35
    NOT             shift and go to state 36
    RANDOM          shift and go to state 37

    expression                     shift and go to state 21
    ask                            shift and go to state 22
    comp_expr                      shift and go to state 29
    random_statement               shift and go to state 32

state 4

    (9) statement -> var_assignment . TO expression
    (10) statement -> var_assignment .
    (11) statement -> var_assignment . TO ask
    (12) statement -> var_assignment . TO items type_stmt

    TO              shift and go to state 38
    OUTPUT          reduce using rule 10 (statement -> var_assignment .)
    REPEAT          reduce using rule 10 (statement -> var_assignment .)
    PAUSE           reduce using rule 10 (statement -> var_assignment .)
    FUNCTION        reduce using rule 10 (statement -> var_assignment .)
    WHILE           reduce using rule 10 (statement -> var_assignment .)
    FOREVER         reduce using rule 10 (statement -> var_assignment .)
    EXIT            reduce using rule 10 (statement -> var_assignment .)
    CONVERT         reduce using rule 10 (statement -> var_assignment .)
    CALL            reduce using rule 10 (statement -> var_assignment .)
    RETURN          reduce using rule 10 (statement -> var_assignment .)
    DELETE          reduce using rule 10 (statement -> var_assignment .)
    CLEAR           reduce using rule 10 (statement -> var_assignment .)
    ACTIVATE        reduce using rule 10 (statement -> var_assignment .)
    SET             reduce using rule 10 (statement -> var_assignment .)
    IF              reduce using rule 10 (statement -> var_assignment .)
    $end            reduce using rule 10 (statement -> var_assignment .)
    UNTIL           reduce using rule 10 (statement -> var_assignment .)
    END             reduce using rule 10 (statement -> var_assignment .)
    ELSE            reduce using rule 10 (statement -> var_assignment .)


state 5

    (14) statement -> if_then . end_statement
    (15) statement -> if_then . ELSE THEN statements end_statement
    (3) end_statement -> . END

    ELSE            shift and go to state 40
    END             shift and go to state 41

    end_statement                  shift and go to state 39

state 6

    (16) statement -> REPEAT . statements UNTIL expression
    (32) statement -> REPEAT . expression TIMES USING IDENTIFIER statements end_statement
    (1) statements -> . statement
    (2) statements -> . statements statement
    (35) expression -> . DATATYPE FROM expression TO expression FROM expression
    (36) expression -> . LENGTH OF expression
    (37) expression -> . FIND OCCURENCES OF expression IN expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression POWER expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . YES
    (47) expression -> . NO
    (58) expression -> . comp_expr
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER
    (61) expression -> . random_statement
    (62) expression -> . TEXT
    (63) expression -> . INPUT
    (64) expression -> . CALL IDENTIFIER
    (65) expression -> . CALL IDENTIFIER items
    (66) expression -> . IDENTIFIER INDEX expression
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . FUNCTION IDENTIFIER WITH arguments MEANS statements end_statement
    (21) statement -> . WHILE expression DO statements end_statement
    (22) statement -> . FOREVER DO statements end_statement
    (23) statement -> . EXIT LOOP
    (24) statement -> . CONVERT expression TO TYPE DATATYPE
    (25) statement -> . CALL IDENTIFIER
    (26) statement -> . CALL IDENTIFIER items
    (27) statement -> . RETURN expression
    (28) statement -> . DELETE DATATYPE IDENTIFIER
    (29) statement -> . DELETE INDEX expression OF DATATYPE IDENTIFIER
    (30) statement -> . CLEAR DATATYPE IDENTIFIER
    (31) statement -> . ACTIVATE TEXT
    (32) statement -> . REPEAT expression TIMES USING IDENTIFIER statements end_statement
    (48) comp_expr -> . expression EQ expression
    (49) comp_expr -> . expression GT expression
    (50) comp_expr -> . expression LT expression
    (51) comp_expr -> . expression GE expression
    (52) comp_expr -> . expression LE expression
    (53) comp_expr -> . expression NE expression
    (54) comp_expr -> . comp_expr AND comp_expr
    (55) comp_expr -> . comp_expr OR comp_expr
    (56) comp_expr -> . NOT expression
    (57) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    DATATYPE        shift and go to state 23
    LENGTH          shift and go to state 24
    FIND            shift and go to state 25
    LPAREN          shift and go to state 26
    YES             shift and go to state 27
    NO              shift and go to state 28
    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    TEXT            shift and go to state 44
    INPUT           shift and go to state 34
    CALL            shift and go to state 45
    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    FOREVER         shift and go to state 10
    EXIT            shift and go to state 11
    CONVERT         shift and go to state 12
    RETURN          shift and go to state 14
    DELETE          shift and go to state 15
    CLEAR           shift and go to state 16
    ACTIVATE        shift and go to state 17
    NOT             shift and go to state 36
    RANDOM          shift and go to state 37
    SET             shift and go to state 18
    IF              shift and go to state 19

    statements                     shift and go to state 42
    expression                     shift and go to state 43
    statement                      shift and go to state 2
    comp_expr                      shift and go to state 29
    random_statement               shift and go to state 32
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 7

    (17) statement -> PAUSE . expression
    (35) expression -> . DATATYPE FROM expression TO expression FROM expression
    (36) expression -> . LENGTH OF expression
    (37) expression -> . FIND OCCURENCES OF expression IN expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression POWER expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . YES
    (47) expression -> . NO
    (58) expression -> . comp_expr
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER
    (61) expression -> . random_statement
    (62) expression -> . TEXT
    (63) expression -> . INPUT
    (64) expression -> . CALL IDENTIFIER
    (65) expression -> . CALL IDENTIFIER items
    (66) expression -> . IDENTIFIER INDEX expression
    (48) comp_expr -> . expression EQ expression
    (49) comp_expr -> . expression GT expression
    (50) comp_expr -> . expression LT expression
    (51) comp_expr -> . expression GE expression
    (52) comp_expr -> . expression LE expression
    (53) comp_expr -> . expression NE expression
    (54) comp_expr -> . comp_expr AND comp_expr
    (55) comp_expr -> . comp_expr OR comp_expr
    (56) comp_expr -> . NOT expression
    (57) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 23
    LENGTH          shift and go to state 24
    FIND            shift and go to state 25
    LPAREN          shift and go to state 26
    YES             shift and go to state 27
    NO              shift and go to state 28
    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    TEXT            shift and go to state 44
    INPUT           shift and go to state 34
    CALL            shift and go to state 35
    NOT             shift and go to state 36
    RANDOM          shift and go to state 37

    expression                     shift and go to state 46
    comp_expr                      shift and go to state 29
    random_statement               shift and go to state 32

state 8

    (19) statement -> FUNCTION . IDENTIFIER MEANS statements end_statement
    (20) statement -> FUNCTION . IDENTIFIER WITH arguments MEANS statements end_statement

    IDENTIFIER      shift and go to state 47


state 9

    (21) statement -> WHILE . expression DO statements end_statement
    (35) expression -> . DATATYPE FROM expression TO expression FROM expression
    (36) expression -> . LENGTH OF expression
    (37) expression -> . FIND OCCURENCES OF expression IN expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression POWER expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . YES
    (47) expression -> . NO
    (58) expression -> . comp_expr
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER
    (61) expression -> . random_statement
    (62) expression -> . TEXT
    (63) expression -> . INPUT
    (64) expression -> . CALL IDENTIFIER
    (65) expression -> . CALL IDENTIFIER items
    (66) expression -> . IDENTIFIER INDEX expression
    (48) comp_expr -> . expression EQ expression
    (49) comp_expr -> . expression GT expression
    (50) comp_expr -> . expression LT expression
    (51) comp_expr -> . expression GE expression
    (52) comp_expr -> . expression LE expression
    (53) comp_expr -> . expression NE expression
    (54) comp_expr -> . comp_expr AND comp_expr
    (55) comp_expr -> . comp_expr OR comp_expr
    (56) comp_expr -> . NOT expression
    (57) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 23
    LENGTH          shift and go to state 24
    FIND            shift and go to state 25
    LPAREN          shift and go to state 26
    YES             shift and go to state 27
    NO              shift and go to state 28
    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    TEXT            shift and go to state 44
    INPUT           shift and go to state 34
    CALL            shift and go to state 35
    NOT             shift and go to state 36
    RANDOM          shift and go to state 37

    expression                     shift and go to state 48
    comp_expr                      shift and go to state 29
    random_statement               shift and go to state 32

state 10

    (22) statement -> FOREVER . DO statements end_statement

    DO              shift and go to state 49


state 11

    (23) statement -> EXIT . LOOP

    LOOP            shift and go to state 50


state 12

    (24) statement -> CONVERT . expression TO TYPE DATATYPE
    (35) expression -> . DATATYPE FROM expression TO expression FROM expression
    (36) expression -> . LENGTH OF expression
    (37) expression -> . FIND OCCURENCES OF expression IN expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression POWER expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . YES
    (47) expression -> . NO
    (58) expression -> . comp_expr
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER
    (61) expression -> . random_statement
    (62) expression -> . TEXT
    (63) expression -> . INPUT
    (64) expression -> . CALL IDENTIFIER
    (65) expression -> . CALL IDENTIFIER items
    (66) expression -> . IDENTIFIER INDEX expression
    (48) comp_expr -> . expression EQ expression
    (49) comp_expr -> . expression GT expression
    (50) comp_expr -> . expression LT expression
    (51) comp_expr -> . expression GE expression
    (52) comp_expr -> . expression LE expression
    (53) comp_expr -> . expression NE expression
    (54) comp_expr -> . comp_expr AND comp_expr
    (55) comp_expr -> . comp_expr OR comp_expr
    (56) comp_expr -> . NOT expression
    (57) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 23
    LENGTH          shift and go to state 24
    FIND            shift and go to state 25
    LPAREN          shift and go to state 26
    YES             shift and go to state 27
    NO              shift and go to state 28
    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    TEXT            shift and go to state 44
    INPUT           shift and go to state 34
    CALL            shift and go to state 35
    NOT             shift and go to state 36
    RANDOM          shift and go to state 37

    expression                     shift and go to state 51
    comp_expr                      shift and go to state 29
    random_statement               shift and go to state 32

state 13

    (25) statement -> CALL . IDENTIFIER
    (26) statement -> CALL . IDENTIFIER items

    IDENTIFIER      shift and go to state 52


state 14

    (27) statement -> RETURN . expression
    (35) expression -> . DATATYPE FROM expression TO expression FROM expression
    (36) expression -> . LENGTH OF expression
    (37) expression -> . FIND OCCURENCES OF expression IN expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression POWER expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . YES
    (47) expression -> . NO
    (58) expression -> . comp_expr
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER
    (61) expression -> . random_statement
    (62) expression -> . TEXT
    (63) expression -> . INPUT
    (64) expression -> . CALL IDENTIFIER
    (65) expression -> . CALL IDENTIFIER items
    (66) expression -> . IDENTIFIER INDEX expression
    (48) comp_expr -> . expression EQ expression
    (49) comp_expr -> . expression GT expression
    (50) comp_expr -> . expression LT expression
    (51) comp_expr -> . expression GE expression
    (52) comp_expr -> . expression LE expression
    (53) comp_expr -> . expression NE expression
    (54) comp_expr -> . comp_expr AND comp_expr
    (55) comp_expr -> . comp_expr OR comp_expr
    (56) comp_expr -> . NOT expression
    (57) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 23
    LENGTH          shift and go to state 24
    FIND            shift and go to state 25
    LPAREN          shift and go to state 26
    YES             shift and go to state 27
    NO              shift and go to state 28
    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    TEXT            shift and go to state 44
    INPUT           shift and go to state 34
    CALL            shift and go to state 35
    NOT             shift and go to state 36
    RANDOM          shift and go to state 37

    expression                     shift and go to state 53
    comp_expr                      shift and go to state 29
    random_statement               shift and go to state 32

state 15

    (28) statement -> DELETE . DATATYPE IDENTIFIER
    (29) statement -> DELETE . INDEX expression OF DATATYPE IDENTIFIER

    DATATYPE        shift and go to state 54
    INDEX           shift and go to state 55


state 16

    (30) statement -> CLEAR . DATATYPE IDENTIFIER

    DATATYPE        shift and go to state 56


state 17

    (31) statement -> ACTIVATE . TEXT

    TEXT            shift and go to state 57


state 18

    (8) var_assignment -> SET . IDENTIFIER

    IDENTIFIER      shift and go to state 58


state 19

    (13) if_then -> IF . expression THEN statements
    (35) expression -> . DATATYPE FROM expression TO expression FROM expression
    (36) expression -> . LENGTH OF expression
    (37) expression -> . FIND OCCURENCES OF expression IN expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression POWER expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . YES
    (47) expression -> . NO
    (58) expression -> . comp_expr
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER
    (61) expression -> . random_statement
    (62) expression -> . TEXT
    (63) expression -> . INPUT
    (64) expression -> . CALL IDENTIFIER
    (65) expression -> . CALL IDENTIFIER items
    (66) expression -> . IDENTIFIER INDEX expression
    (48) comp_expr -> . expression EQ expression
    (49) comp_expr -> . expression GT expression
    (50) comp_expr -> . expression LT expression
    (51) comp_expr -> . expression GE expression
    (52) comp_expr -> . expression LE expression
    (53) comp_expr -> . expression NE expression
    (54) comp_expr -> . comp_expr AND comp_expr
    (55) comp_expr -> . comp_expr OR comp_expr
    (56) comp_expr -> . NOT expression
    (57) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 23
    LENGTH          shift and go to state 24
    FIND            shift and go to state 25
    LPAREN          shift and go to state 26
    YES             shift and go to state 27
    NO              shift and go to state 28
    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    TEXT            shift and go to state 44
    INPUT           shift and go to state 34
    CALL            shift and go to state 35
    NOT             shift and go to state 36
    RANDOM          shift and go to state 37

    expression                     shift and go to state 59
    comp_expr                      shift and go to state 29
    random_statement               shift and go to state 32

state 20

    (2) statements -> statements statement .

    OUTPUT          reduce using rule 2 (statements -> statements statement .)
    REPEAT          reduce using rule 2 (statements -> statements statement .)
    PAUSE           reduce using rule 2 (statements -> statements statement .)
    FUNCTION        reduce using rule 2 (statements -> statements statement .)
    WHILE           reduce using rule 2 (statements -> statements statement .)
    FOREVER         reduce using rule 2 (statements -> statements statement .)
    EXIT            reduce using rule 2 (statements -> statements statement .)
    CONVERT         reduce using rule 2 (statements -> statements statement .)
    CALL            reduce using rule 2 (statements -> statements statement .)
    RETURN          reduce using rule 2 (statements -> statements statement .)
    DELETE          reduce using rule 2 (statements -> statements statement .)
    CLEAR           reduce using rule 2 (statements -> statements statement .)
    ACTIVATE        reduce using rule 2 (statements -> statements statement .)
    SET             reduce using rule 2 (statements -> statements statement .)
    IF              reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)
    UNTIL           reduce using rule 2 (statements -> statements statement .)
    END             reduce using rule 2 (statements -> statements statement .)
    ELSE            reduce using rule 2 (statements -> statements statement .)


state 21

    (4) statement -> OUTPUT expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . POWER expression
    (48) comp_expr -> expression . EQ expression
    (49) comp_expr -> expression . GT expression
    (50) comp_expr -> expression . LT expression
    (51) comp_expr -> expression . GE expression
    (52) comp_expr -> expression . LE expression
    (53) comp_expr -> expression . NE expression
    (57) comp_expr -> expression . IN expression

    OUTPUT          reduce using rule 4 (statement -> OUTPUT expression .)
    REPEAT          reduce using rule 4 (statement -> OUTPUT expression .)
    PAUSE           reduce using rule 4 (statement -> OUTPUT expression .)
    FUNCTION        reduce using rule 4 (statement -> OUTPUT expression .)
    WHILE           reduce using rule 4 (statement -> OUTPUT expression .)
    FOREVER         reduce using rule 4 (statement -> OUTPUT expression .)
    EXIT            reduce using rule 4 (statement -> OUTPUT expression .)
    CONVERT         reduce using rule 4 (statement -> OUTPUT expression .)
    CALL            reduce using rule 4 (statement -> OUTPUT expression .)
    RETURN          reduce using rule 4 (statement -> OUTPUT expression .)
    DELETE          reduce using rule 4 (statement -> OUTPUT expression .)
    CLEAR           reduce using rule 4 (statement -> OUTPUT expression .)
    ACTIVATE        reduce using rule 4 (statement -> OUTPUT expression .)
    SET             reduce using rule 4 (statement -> OUTPUT expression .)
    IF              reduce using rule 4 (statement -> OUTPUT expression .)
    $end            reduce using rule 4 (statement -> OUTPUT expression .)
    UNTIL           reduce using rule 4 (statement -> OUTPUT expression .)
    END             reduce using rule 4 (statement -> OUTPUT expression .)
    ELSE            reduce using rule 4 (statement -> OUTPUT expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    POWER           shift and go to state 64
    EQ              shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    GE              shift and go to state 68
    LE              shift and go to state 69
    NE              shift and go to state 70
    IN              shift and go to state 71


state 22

    (5) statement -> OUTPUT ask .

    OUTPUT          reduce using rule 5 (statement -> OUTPUT ask .)
    REPEAT          reduce using rule 5 (statement -> OUTPUT ask .)
    PAUSE           reduce using rule 5 (statement -> OUTPUT ask .)
    FUNCTION        reduce using rule 5 (statement -> OUTPUT ask .)
    WHILE           reduce using rule 5 (statement -> OUTPUT ask .)
    FOREVER         reduce using rule 5 (statement -> OUTPUT ask .)
    EXIT            reduce using rule 5 (statement -> OUTPUT ask .)
    CONVERT         reduce using rule 5 (statement -> OUTPUT ask .)
    CALL            reduce using rule 5 (statement -> OUTPUT ask .)
    RETURN          reduce using rule 5 (statement -> OUTPUT ask .)
    DELETE          reduce using rule 5 (statement -> OUTPUT ask .)
    CLEAR           reduce using rule 5 (statement -> OUTPUT ask .)
    ACTIVATE        reduce using rule 5 (statement -> OUTPUT ask .)
    SET             reduce using rule 5 (statement -> OUTPUT ask .)
    IF              reduce using rule 5 (statement -> OUTPUT ask .)
    $end            reduce using rule 5 (statement -> OUTPUT ask .)
    UNTIL           reduce using rule 5 (statement -> OUTPUT ask .)
    END             reduce using rule 5 (statement -> OUTPUT ask .)
    ELSE            reduce using rule 5 (statement -> OUTPUT ask .)


state 23

    (35) expression -> DATATYPE . FROM expression TO expression FROM expression

    FROM            shift and go to state 72


state 24

    (36) expression -> LENGTH . OF expression

    OF              shift and go to state 73


state 25

    (37) expression -> FIND . OCCURENCES OF expression IN expression

    OCCURENCES      shift and go to state 74


state 26

    (45) expression -> LPAREN . expression RPAREN
    (35) expression -> . DATATYPE FROM expression TO expression FROM expression
    (36) expression -> . LENGTH OF expression
    (37) expression -> . FIND OCCURENCES OF expression IN expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression POWER expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . YES
    (47) expression -> . NO
    (58) expression -> . comp_expr
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER
    (61) expression -> . random_statement
    (62) expression -> . TEXT
    (63) expression -> . INPUT
    (64) expression -> . CALL IDENTIFIER
    (65) expression -> . CALL IDENTIFIER items
    (66) expression -> . IDENTIFIER INDEX expression
    (48) comp_expr -> . expression EQ expression
    (49) comp_expr -> . expression GT expression
    (50) comp_expr -> . expression LT expression
    (51) comp_expr -> . expression GE expression
    (52) comp_expr -> . expression LE expression
    (53) comp_expr -> . expression NE expression
    (54) comp_expr -> . comp_expr AND comp_expr
    (55) comp_expr -> . comp_expr OR comp_expr
    (56) comp_expr -> . NOT expression
    (57) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 23
    LENGTH          shift and go to state 24
    FIND            shift and go to state 25
    LPAREN          shift and go to state 26
    YES             shift and go to state 27
    NO              shift and go to state 28
    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    TEXT            shift and go to state 44
    INPUT           shift and go to state 34
    CALL            shift and go to state 35
    NOT             shift and go to state 36
    RANDOM          shift and go to state 37

    expression                     shift and go to state 75
    comp_expr                      shift and go to state 29
    random_statement               shift and go to state 32

state 27

    (46) expression -> YES .

    PLUS            reduce using rule 46 (expression -> YES .)
    MINUS           reduce using rule 46 (expression -> YES .)
    TIMES           reduce using rule 46 (expression -> YES .)
    DIVIDE          reduce using rule 46 (expression -> YES .)
    POWER           reduce using rule 46 (expression -> YES .)
    EQ              reduce using rule 46 (expression -> YES .)
    GT              reduce using rule 46 (expression -> YES .)
    LT              reduce using rule 46 (expression -> YES .)
    GE              reduce using rule 46 (expression -> YES .)
    LE              reduce using rule 46 (expression -> YES .)
    NE              reduce using rule 46 (expression -> YES .)
    IN              reduce using rule 46 (expression -> YES .)
    OUTPUT          reduce using rule 46 (expression -> YES .)
    REPEAT          reduce using rule 46 (expression -> YES .)
    PAUSE           reduce using rule 46 (expression -> YES .)
    FUNCTION        reduce using rule 46 (expression -> YES .)
    WHILE           reduce using rule 46 (expression -> YES .)
    FOREVER         reduce using rule 46 (expression -> YES .)
    EXIT            reduce using rule 46 (expression -> YES .)
    CONVERT         reduce using rule 46 (expression -> YES .)
    CALL            reduce using rule 46 (expression -> YES .)
    RETURN          reduce using rule 46 (expression -> YES .)
    DELETE          reduce using rule 46 (expression -> YES .)
    CLEAR           reduce using rule 46 (expression -> YES .)
    ACTIVATE        reduce using rule 46 (expression -> YES .)
    SET             reduce using rule 46 (expression -> YES .)
    IF              reduce using rule 46 (expression -> YES .)
    $end            reduce using rule 46 (expression -> YES .)
    UNTIL           reduce using rule 46 (expression -> YES .)
    END             reduce using rule 46 (expression -> YES .)
    ELSE            reduce using rule 46 (expression -> YES .)
    DO              reduce using rule 46 (expression -> YES .)
    TO              reduce using rule 46 (expression -> YES .)
    THEN            reduce using rule 46 (expression -> YES .)
    RPAREN          reduce using rule 46 (expression -> YES .)
    AND             reduce using rule 46 (expression -> YES .)
    OR              reduce using rule 46 (expression -> YES .)
    TYPE            reduce using rule 46 (expression -> YES .)
    DATATYPE        reduce using rule 46 (expression -> YES .)
    LENGTH          reduce using rule 46 (expression -> YES .)
    FIND            reduce using rule 46 (expression -> YES .)
    LPAREN          reduce using rule 46 (expression -> YES .)
    YES             reduce using rule 46 (expression -> YES .)
    NO              reduce using rule 46 (expression -> YES .)
    NUMBER          reduce using rule 46 (expression -> YES .)
    IDENTIFIER      reduce using rule 46 (expression -> YES .)
    TEXT            reduce using rule 46 (expression -> YES .)
    INPUT           reduce using rule 46 (expression -> YES .)
    NOT             reduce using rule 46 (expression -> YES .)
    RANDOM          reduce using rule 46 (expression -> YES .)
    OF              reduce using rule 46 (expression -> YES .)
    FROM            reduce using rule 46 (expression -> YES .)


state 28

    (47) expression -> NO .

    PLUS            reduce using rule 47 (expression -> NO .)
    MINUS           reduce using rule 47 (expression -> NO .)
    TIMES           reduce using rule 47 (expression -> NO .)
    DIVIDE          reduce using rule 47 (expression -> NO .)
    POWER           reduce using rule 47 (expression -> NO .)
    EQ              reduce using rule 47 (expression -> NO .)
    GT              reduce using rule 47 (expression -> NO .)
    LT              reduce using rule 47 (expression -> NO .)
    GE              reduce using rule 47 (expression -> NO .)
    LE              reduce using rule 47 (expression -> NO .)
    NE              reduce using rule 47 (expression -> NO .)
    IN              reduce using rule 47 (expression -> NO .)
    OUTPUT          reduce using rule 47 (expression -> NO .)
    REPEAT          reduce using rule 47 (expression -> NO .)
    PAUSE           reduce using rule 47 (expression -> NO .)
    FUNCTION        reduce using rule 47 (expression -> NO .)
    WHILE           reduce using rule 47 (expression -> NO .)
    FOREVER         reduce using rule 47 (expression -> NO .)
    EXIT            reduce using rule 47 (expression -> NO .)
    CONVERT         reduce using rule 47 (expression -> NO .)
    CALL            reduce using rule 47 (expression -> NO .)
    RETURN          reduce using rule 47 (expression -> NO .)
    DELETE          reduce using rule 47 (expression -> NO .)
    CLEAR           reduce using rule 47 (expression -> NO .)
    ACTIVATE        reduce using rule 47 (expression -> NO .)
    SET             reduce using rule 47 (expression -> NO .)
    IF              reduce using rule 47 (expression -> NO .)
    $end            reduce using rule 47 (expression -> NO .)
    UNTIL           reduce using rule 47 (expression -> NO .)
    END             reduce using rule 47 (expression -> NO .)
    ELSE            reduce using rule 47 (expression -> NO .)
    DO              reduce using rule 47 (expression -> NO .)
    TO              reduce using rule 47 (expression -> NO .)
    THEN            reduce using rule 47 (expression -> NO .)
    RPAREN          reduce using rule 47 (expression -> NO .)
    AND             reduce using rule 47 (expression -> NO .)
    OR              reduce using rule 47 (expression -> NO .)
    TYPE            reduce using rule 47 (expression -> NO .)
    DATATYPE        reduce using rule 47 (expression -> NO .)
    LENGTH          reduce using rule 47 (expression -> NO .)
    FIND            reduce using rule 47 (expression -> NO .)
    LPAREN          reduce using rule 47 (expression -> NO .)
    YES             reduce using rule 47 (expression -> NO .)
    NO              reduce using rule 47 (expression -> NO .)
    NUMBER          reduce using rule 47 (expression -> NO .)
    IDENTIFIER      reduce using rule 47 (expression -> NO .)
    TEXT            reduce using rule 47 (expression -> NO .)
    INPUT           reduce using rule 47 (expression -> NO .)
    NOT             reduce using rule 47 (expression -> NO .)
    RANDOM          reduce using rule 47 (expression -> NO .)
    OF              reduce using rule 47 (expression -> NO .)
    FROM            reduce using rule 47 (expression -> NO .)


state 29

    (58) expression -> comp_expr .
    (54) comp_expr -> comp_expr . AND comp_expr
    (55) comp_expr -> comp_expr . OR comp_expr

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    PLUS            reduce using rule 58 (expression -> comp_expr .)
    MINUS           reduce using rule 58 (expression -> comp_expr .)
    TIMES           reduce using rule 58 (expression -> comp_expr .)
    DIVIDE          reduce using rule 58 (expression -> comp_expr .)
    POWER           reduce using rule 58 (expression -> comp_expr .)
    EQ              reduce using rule 58 (expression -> comp_expr .)
    GT              reduce using rule 58 (expression -> comp_expr .)
    LT              reduce using rule 58 (expression -> comp_expr .)
    GE              reduce using rule 58 (expression -> comp_expr .)
    LE              reduce using rule 58 (expression -> comp_expr .)
    NE              reduce using rule 58 (expression -> comp_expr .)
    IN              reduce using rule 58 (expression -> comp_expr .)
    OUTPUT          reduce using rule 58 (expression -> comp_expr .)
    REPEAT          reduce using rule 58 (expression -> comp_expr .)
    PAUSE           reduce using rule 58 (expression -> comp_expr .)
    FUNCTION        reduce using rule 58 (expression -> comp_expr .)
    WHILE           reduce using rule 58 (expression -> comp_expr .)
    FOREVER         reduce using rule 58 (expression -> comp_expr .)
    EXIT            reduce using rule 58 (expression -> comp_expr .)
    CONVERT         reduce using rule 58 (expression -> comp_expr .)
    CALL            reduce using rule 58 (expression -> comp_expr .)
    RETURN          reduce using rule 58 (expression -> comp_expr .)
    DELETE          reduce using rule 58 (expression -> comp_expr .)
    CLEAR           reduce using rule 58 (expression -> comp_expr .)
    ACTIVATE        reduce using rule 58 (expression -> comp_expr .)
    SET             reduce using rule 58 (expression -> comp_expr .)
    IF              reduce using rule 58 (expression -> comp_expr .)
    $end            reduce using rule 58 (expression -> comp_expr .)
    UNTIL           reduce using rule 58 (expression -> comp_expr .)
    END             reduce using rule 58 (expression -> comp_expr .)
    ELSE            reduce using rule 58 (expression -> comp_expr .)
    DO              reduce using rule 58 (expression -> comp_expr .)
    TO              reduce using rule 58 (expression -> comp_expr .)
    THEN            reduce using rule 58 (expression -> comp_expr .)
    RPAREN          reduce using rule 58 (expression -> comp_expr .)
    TYPE            reduce using rule 58 (expression -> comp_expr .)
    DATATYPE        reduce using rule 58 (expression -> comp_expr .)
    LENGTH          reduce using rule 58 (expression -> comp_expr .)
    FIND            reduce using rule 58 (expression -> comp_expr .)
    LPAREN          reduce using rule 58 (expression -> comp_expr .)
    YES             reduce using rule 58 (expression -> comp_expr .)
    NO              reduce using rule 58 (expression -> comp_expr .)
    NUMBER          reduce using rule 58 (expression -> comp_expr .)
    IDENTIFIER      reduce using rule 58 (expression -> comp_expr .)
    TEXT            reduce using rule 58 (expression -> comp_expr .)
    INPUT           reduce using rule 58 (expression -> comp_expr .)
    NOT             reduce using rule 58 (expression -> comp_expr .)
    RANDOM          reduce using rule 58 (expression -> comp_expr .)
    OF              reduce using rule 58 (expression -> comp_expr .)
    FROM            reduce using rule 58 (expression -> comp_expr .)
    AND             shift and go to state 76
    OR              shift and go to state 77

  ! AND             [ reduce using rule 58 (expression -> comp_expr .) ]
  ! OR              [ reduce using rule 58 (expression -> comp_expr .) ]


state 30

    (59) expression -> NUMBER .

    PLUS            reduce using rule 59 (expression -> NUMBER .)
    MINUS           reduce using rule 59 (expression -> NUMBER .)
    TIMES           reduce using rule 59 (expression -> NUMBER .)
    DIVIDE          reduce using rule 59 (expression -> NUMBER .)
    POWER           reduce using rule 59 (expression -> NUMBER .)
    EQ              reduce using rule 59 (expression -> NUMBER .)
    GT              reduce using rule 59 (expression -> NUMBER .)
    LT              reduce using rule 59 (expression -> NUMBER .)
    GE              reduce using rule 59 (expression -> NUMBER .)
    LE              reduce using rule 59 (expression -> NUMBER .)
    NE              reduce using rule 59 (expression -> NUMBER .)
    IN              reduce using rule 59 (expression -> NUMBER .)
    OUTPUT          reduce using rule 59 (expression -> NUMBER .)
    REPEAT          reduce using rule 59 (expression -> NUMBER .)
    PAUSE           reduce using rule 59 (expression -> NUMBER .)
    FUNCTION        reduce using rule 59 (expression -> NUMBER .)
    WHILE           reduce using rule 59 (expression -> NUMBER .)
    FOREVER         reduce using rule 59 (expression -> NUMBER .)
    EXIT            reduce using rule 59 (expression -> NUMBER .)
    CONVERT         reduce using rule 59 (expression -> NUMBER .)
    CALL            reduce using rule 59 (expression -> NUMBER .)
    RETURN          reduce using rule 59 (expression -> NUMBER .)
    DELETE          reduce using rule 59 (expression -> NUMBER .)
    CLEAR           reduce using rule 59 (expression -> NUMBER .)
    ACTIVATE        reduce using rule 59 (expression -> NUMBER .)
    SET             reduce using rule 59 (expression -> NUMBER .)
    IF              reduce using rule 59 (expression -> NUMBER .)
    $end            reduce using rule 59 (expression -> NUMBER .)
    UNTIL           reduce using rule 59 (expression -> NUMBER .)
    END             reduce using rule 59 (expression -> NUMBER .)
    ELSE            reduce using rule 59 (expression -> NUMBER .)
    DO              reduce using rule 59 (expression -> NUMBER .)
    TO              reduce using rule 59 (expression -> NUMBER .)
    THEN            reduce using rule 59 (expression -> NUMBER .)
    RPAREN          reduce using rule 59 (expression -> NUMBER .)
    AND             reduce using rule 59 (expression -> NUMBER .)
    OR              reduce using rule 59 (expression -> NUMBER .)
    TYPE            reduce using rule 59 (expression -> NUMBER .)
    DATATYPE        reduce using rule 59 (expression -> NUMBER .)
    LENGTH          reduce using rule 59 (expression -> NUMBER .)
    FIND            reduce using rule 59 (expression -> NUMBER .)
    LPAREN          reduce using rule 59 (expression -> NUMBER .)
    YES             reduce using rule 59 (expression -> NUMBER .)
    NO              reduce using rule 59 (expression -> NUMBER .)
    NUMBER          reduce using rule 59 (expression -> NUMBER .)
    IDENTIFIER      reduce using rule 59 (expression -> NUMBER .)
    TEXT            reduce using rule 59 (expression -> NUMBER .)
    INPUT           reduce using rule 59 (expression -> NUMBER .)
    NOT             reduce using rule 59 (expression -> NUMBER .)
    RANDOM          reduce using rule 59 (expression -> NUMBER .)
    OF              reduce using rule 59 (expression -> NUMBER .)
    FROM            reduce using rule 59 (expression -> NUMBER .)


state 31

    (60) expression -> IDENTIFIER .
    (66) expression -> IDENTIFIER . INDEX expression

    PLUS            reduce using rule 60 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 60 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 60 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 60 (expression -> IDENTIFIER .)
    POWER           reduce using rule 60 (expression -> IDENTIFIER .)
    EQ              reduce using rule 60 (expression -> IDENTIFIER .)
    GT              reduce using rule 60 (expression -> IDENTIFIER .)
    LT              reduce using rule 60 (expression -> IDENTIFIER .)
    GE              reduce using rule 60 (expression -> IDENTIFIER .)
    LE              reduce using rule 60 (expression -> IDENTIFIER .)
    NE              reduce using rule 60 (expression -> IDENTIFIER .)
    IN              reduce using rule 60 (expression -> IDENTIFIER .)
    OUTPUT          reduce using rule 60 (expression -> IDENTIFIER .)
    REPEAT          reduce using rule 60 (expression -> IDENTIFIER .)
    PAUSE           reduce using rule 60 (expression -> IDENTIFIER .)
    FUNCTION        reduce using rule 60 (expression -> IDENTIFIER .)
    WHILE           reduce using rule 60 (expression -> IDENTIFIER .)
    FOREVER         reduce using rule 60 (expression -> IDENTIFIER .)
    EXIT            reduce using rule 60 (expression -> IDENTIFIER .)
    CONVERT         reduce using rule 60 (expression -> IDENTIFIER .)
    CALL            reduce using rule 60 (expression -> IDENTIFIER .)
    RETURN          reduce using rule 60 (expression -> IDENTIFIER .)
    DELETE          reduce using rule 60 (expression -> IDENTIFIER .)
    CLEAR           reduce using rule 60 (expression -> IDENTIFIER .)
    ACTIVATE        reduce using rule 60 (expression -> IDENTIFIER .)
    SET             reduce using rule 60 (expression -> IDENTIFIER .)
    IF              reduce using rule 60 (expression -> IDENTIFIER .)
    $end            reduce using rule 60 (expression -> IDENTIFIER .)
    UNTIL           reduce using rule 60 (expression -> IDENTIFIER .)
    END             reduce using rule 60 (expression -> IDENTIFIER .)
    ELSE            reduce using rule 60 (expression -> IDENTIFIER .)
    DO              reduce using rule 60 (expression -> IDENTIFIER .)
    TO              reduce using rule 60 (expression -> IDENTIFIER .)
    THEN            reduce using rule 60 (expression -> IDENTIFIER .)
    RPAREN          reduce using rule 60 (expression -> IDENTIFIER .)
    AND             reduce using rule 60 (expression -> IDENTIFIER .)
    OR              reduce using rule 60 (expression -> IDENTIFIER .)
    TYPE            reduce using rule 60 (expression -> IDENTIFIER .)
    DATATYPE        reduce using rule 60 (expression -> IDENTIFIER .)
    LENGTH          reduce using rule 60 (expression -> IDENTIFIER .)
    FIND            reduce using rule 60 (expression -> IDENTIFIER .)
    LPAREN          reduce using rule 60 (expression -> IDENTIFIER .)
    YES             reduce using rule 60 (expression -> IDENTIFIER .)
    NO              reduce using rule 60 (expression -> IDENTIFIER .)
    NUMBER          reduce using rule 60 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 60 (expression -> IDENTIFIER .)
    TEXT            reduce using rule 60 (expression -> IDENTIFIER .)
    INPUT           reduce using rule 60 (expression -> IDENTIFIER .)
    NOT             reduce using rule 60 (expression -> IDENTIFIER .)
    RANDOM          reduce using rule 60 (expression -> IDENTIFIER .)
    OF              reduce using rule 60 (expression -> IDENTIFIER .)
    FROM            reduce using rule 60 (expression -> IDENTIFIER .)
    INDEX           shift and go to state 78


state 32

    (61) expression -> random_statement .

    PLUS            reduce using rule 61 (expression -> random_statement .)
    MINUS           reduce using rule 61 (expression -> random_statement .)
    TIMES           reduce using rule 61 (expression -> random_statement .)
    DIVIDE          reduce using rule 61 (expression -> random_statement .)
    POWER           reduce using rule 61 (expression -> random_statement .)
    EQ              reduce using rule 61 (expression -> random_statement .)
    GT              reduce using rule 61 (expression -> random_statement .)
    LT              reduce using rule 61 (expression -> random_statement .)
    GE              reduce using rule 61 (expression -> random_statement .)
    LE              reduce using rule 61 (expression -> random_statement .)
    NE              reduce using rule 61 (expression -> random_statement .)
    IN              reduce using rule 61 (expression -> random_statement .)
    OUTPUT          reduce using rule 61 (expression -> random_statement .)
    REPEAT          reduce using rule 61 (expression -> random_statement .)
    PAUSE           reduce using rule 61 (expression -> random_statement .)
    FUNCTION        reduce using rule 61 (expression -> random_statement .)
    WHILE           reduce using rule 61 (expression -> random_statement .)
    FOREVER         reduce using rule 61 (expression -> random_statement .)
    EXIT            reduce using rule 61 (expression -> random_statement .)
    CONVERT         reduce using rule 61 (expression -> random_statement .)
    CALL            reduce using rule 61 (expression -> random_statement .)
    RETURN          reduce using rule 61 (expression -> random_statement .)
    DELETE          reduce using rule 61 (expression -> random_statement .)
    CLEAR           reduce using rule 61 (expression -> random_statement .)
    ACTIVATE        reduce using rule 61 (expression -> random_statement .)
    SET             reduce using rule 61 (expression -> random_statement .)
    IF              reduce using rule 61 (expression -> random_statement .)
    $end            reduce using rule 61 (expression -> random_statement .)
    UNTIL           reduce using rule 61 (expression -> random_statement .)
    END             reduce using rule 61 (expression -> random_statement .)
    ELSE            reduce using rule 61 (expression -> random_statement .)
    DO              reduce using rule 61 (expression -> random_statement .)
    TO              reduce using rule 61 (expression -> random_statement .)
    THEN            reduce using rule 61 (expression -> random_statement .)
    RPAREN          reduce using rule 61 (expression -> random_statement .)
    AND             reduce using rule 61 (expression -> random_statement .)
    OR              reduce using rule 61 (expression -> random_statement .)
    TYPE            reduce using rule 61 (expression -> random_statement .)
    DATATYPE        reduce using rule 61 (expression -> random_statement .)
    LENGTH          reduce using rule 61 (expression -> random_statement .)
    FIND            reduce using rule 61 (expression -> random_statement .)
    LPAREN          reduce using rule 61 (expression -> random_statement .)
    YES             reduce using rule 61 (expression -> random_statement .)
    NO              reduce using rule 61 (expression -> random_statement .)
    NUMBER          reduce using rule 61 (expression -> random_statement .)
    IDENTIFIER      reduce using rule 61 (expression -> random_statement .)
    TEXT            reduce using rule 61 (expression -> random_statement .)
    INPUT           reduce using rule 61 (expression -> random_statement .)
    NOT             reduce using rule 61 (expression -> random_statement .)
    RANDOM          reduce using rule 61 (expression -> random_statement .)
    OF              reduce using rule 61 (expression -> random_statement .)
    FROM            reduce using rule 61 (expression -> random_statement .)


state 33

    (62) expression -> TEXT .
    (6) ask -> TEXT . EXPECTING INPUT AND DATATYPE

    PLUS            reduce using rule 62 (expression -> TEXT .)
    MINUS           reduce using rule 62 (expression -> TEXT .)
    TIMES           reduce using rule 62 (expression -> TEXT .)
    DIVIDE          reduce using rule 62 (expression -> TEXT .)
    POWER           reduce using rule 62 (expression -> TEXT .)
    EQ              reduce using rule 62 (expression -> TEXT .)
    GT              reduce using rule 62 (expression -> TEXT .)
    LT              reduce using rule 62 (expression -> TEXT .)
    GE              reduce using rule 62 (expression -> TEXT .)
    LE              reduce using rule 62 (expression -> TEXT .)
    NE              reduce using rule 62 (expression -> TEXT .)
    IN              reduce using rule 62 (expression -> TEXT .)
    OUTPUT          reduce using rule 62 (expression -> TEXT .)
    REPEAT          reduce using rule 62 (expression -> TEXT .)
    PAUSE           reduce using rule 62 (expression -> TEXT .)
    FUNCTION        reduce using rule 62 (expression -> TEXT .)
    WHILE           reduce using rule 62 (expression -> TEXT .)
    FOREVER         reduce using rule 62 (expression -> TEXT .)
    EXIT            reduce using rule 62 (expression -> TEXT .)
    CONVERT         reduce using rule 62 (expression -> TEXT .)
    CALL            reduce using rule 62 (expression -> TEXT .)
    RETURN          reduce using rule 62 (expression -> TEXT .)
    DELETE          reduce using rule 62 (expression -> TEXT .)
    CLEAR           reduce using rule 62 (expression -> TEXT .)
    ACTIVATE        reduce using rule 62 (expression -> TEXT .)
    SET             reduce using rule 62 (expression -> TEXT .)
    IF              reduce using rule 62 (expression -> TEXT .)
    $end            reduce using rule 62 (expression -> TEXT .)
    UNTIL           reduce using rule 62 (expression -> TEXT .)
    END             reduce using rule 62 (expression -> TEXT .)
    ELSE            reduce using rule 62 (expression -> TEXT .)
    TYPE            reduce using rule 62 (expression -> TEXT .)
    DATATYPE        reduce using rule 62 (expression -> TEXT .)
    LENGTH          reduce using rule 62 (expression -> TEXT .)
    FIND            reduce using rule 62 (expression -> TEXT .)
    LPAREN          reduce using rule 62 (expression -> TEXT .)
    YES             reduce using rule 62 (expression -> TEXT .)
    NO              reduce using rule 62 (expression -> TEXT .)
    NUMBER          reduce using rule 62 (expression -> TEXT .)
    IDENTIFIER      reduce using rule 62 (expression -> TEXT .)
    TEXT            reduce using rule 62 (expression -> TEXT .)
    INPUT           reduce using rule 62 (expression -> TEXT .)
    NOT             reduce using rule 62 (expression -> TEXT .)
    RANDOM          reduce using rule 62 (expression -> TEXT .)
    EXPECTING       shift and go to state 79


state 34

    (63) expression -> INPUT .

    PLUS            reduce using rule 63 (expression -> INPUT .)
    MINUS           reduce using rule 63 (expression -> INPUT .)
    TIMES           reduce using rule 63 (expression -> INPUT .)
    DIVIDE          reduce using rule 63 (expression -> INPUT .)
    POWER           reduce using rule 63 (expression -> INPUT .)
    EQ              reduce using rule 63 (expression -> INPUT .)
    GT              reduce using rule 63 (expression -> INPUT .)
    LT              reduce using rule 63 (expression -> INPUT .)
    GE              reduce using rule 63 (expression -> INPUT .)
    LE              reduce using rule 63 (expression -> INPUT .)
    NE              reduce using rule 63 (expression -> INPUT .)
    IN              reduce using rule 63 (expression -> INPUT .)
    OUTPUT          reduce using rule 63 (expression -> INPUT .)
    REPEAT          reduce using rule 63 (expression -> INPUT .)
    PAUSE           reduce using rule 63 (expression -> INPUT .)
    FUNCTION        reduce using rule 63 (expression -> INPUT .)
    WHILE           reduce using rule 63 (expression -> INPUT .)
    FOREVER         reduce using rule 63 (expression -> INPUT .)
    EXIT            reduce using rule 63 (expression -> INPUT .)
    CONVERT         reduce using rule 63 (expression -> INPUT .)
    CALL            reduce using rule 63 (expression -> INPUT .)
    RETURN          reduce using rule 63 (expression -> INPUT .)
    DELETE          reduce using rule 63 (expression -> INPUT .)
    CLEAR           reduce using rule 63 (expression -> INPUT .)
    ACTIVATE        reduce using rule 63 (expression -> INPUT .)
    SET             reduce using rule 63 (expression -> INPUT .)
    IF              reduce using rule 63 (expression -> INPUT .)
    $end            reduce using rule 63 (expression -> INPUT .)
    UNTIL           reduce using rule 63 (expression -> INPUT .)
    END             reduce using rule 63 (expression -> INPUT .)
    ELSE            reduce using rule 63 (expression -> INPUT .)
    DO              reduce using rule 63 (expression -> INPUT .)
    TO              reduce using rule 63 (expression -> INPUT .)
    THEN            reduce using rule 63 (expression -> INPUT .)
    RPAREN          reduce using rule 63 (expression -> INPUT .)
    AND             reduce using rule 63 (expression -> INPUT .)
    OR              reduce using rule 63 (expression -> INPUT .)
    TYPE            reduce using rule 63 (expression -> INPUT .)
    DATATYPE        reduce using rule 63 (expression -> INPUT .)
    LENGTH          reduce using rule 63 (expression -> INPUT .)
    FIND            reduce using rule 63 (expression -> INPUT .)
    LPAREN          reduce using rule 63 (expression -> INPUT .)
    YES             reduce using rule 63 (expression -> INPUT .)
    NO              reduce using rule 63 (expression -> INPUT .)
    NUMBER          reduce using rule 63 (expression -> INPUT .)
    IDENTIFIER      reduce using rule 63 (expression -> INPUT .)
    TEXT            reduce using rule 63 (expression -> INPUT .)
    INPUT           reduce using rule 63 (expression -> INPUT .)
    NOT             reduce using rule 63 (expression -> INPUT .)
    RANDOM          reduce using rule 63 (expression -> INPUT .)
    OF              reduce using rule 63 (expression -> INPUT .)
    FROM            reduce using rule 63 (expression -> INPUT .)


state 35

    (64) expression -> CALL . IDENTIFIER
    (65) expression -> CALL . IDENTIFIER items

    IDENTIFIER      shift and go to state 80


state 36

    (56) comp_expr -> NOT . expression
    (35) expression -> . DATATYPE FROM expression TO expression FROM expression
    (36) expression -> . LENGTH OF expression
    (37) expression -> . FIND OCCURENCES OF expression IN expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression POWER expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . YES
    (47) expression -> . NO
    (58) expression -> . comp_expr
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER
    (61) expression -> . random_statement
    (62) expression -> . TEXT
    (63) expression -> . INPUT
    (64) expression -> . CALL IDENTIFIER
    (65) expression -> . CALL IDENTIFIER items
    (66) expression -> . IDENTIFIER INDEX expression
    (48) comp_expr -> . expression EQ expression
    (49) comp_expr -> . expression GT expression
    (50) comp_expr -> . expression LT expression
    (51) comp_expr -> . expression GE expression
    (52) comp_expr -> . expression LE expression
    (53) comp_expr -> . expression NE expression
    (54) comp_expr -> . comp_expr AND comp_expr
    (55) comp_expr -> . comp_expr OR comp_expr
    (56) comp_expr -> . NOT expression
    (57) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 23
    LENGTH          shift and go to state 24
    FIND            shift and go to state 25
    LPAREN          shift and go to state 26
    YES             shift and go to state 27
    NO              shift and go to state 28
    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    TEXT            shift and go to state 44
    INPUT           shift and go to state 34
    CALL            shift and go to state 35
    NOT             shift and go to state 36
    RANDOM          shift and go to state 37

    expression                     shift and go to state 81
    comp_expr                      shift and go to state 29
    random_statement               shift and go to state 32

state 37

    (7) random_statement -> RANDOM . DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 82


state 38

    (9) statement -> var_assignment TO . expression
    (11) statement -> var_assignment TO . ask
    (12) statement -> var_assignment TO . items type_stmt
    (35) expression -> . DATATYPE FROM expression TO expression FROM expression
    (36) expression -> . LENGTH OF expression
    (37) expression -> . FIND OCCURENCES OF expression IN expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression POWER expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . YES
    (47) expression -> . NO
    (58) expression -> . comp_expr
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER
    (61) expression -> . random_statement
    (62) expression -> . TEXT
    (63) expression -> . INPUT
    (64) expression -> . CALL IDENTIFIER
    (65) expression -> . CALL IDENTIFIER items
    (66) expression -> . IDENTIFIER INDEX expression
    (6) ask -> . TEXT EXPECTING INPUT AND DATATYPE
    (38) items -> . expression
    (39) items -> . items expression
    (48) comp_expr -> . expression EQ expression
    (49) comp_expr -> . expression GT expression
    (50) comp_expr -> . expression LT expression
    (51) comp_expr -> . expression GE expression
    (52) comp_expr -> . expression LE expression
    (53) comp_expr -> . expression NE expression
    (54) comp_expr -> . comp_expr AND comp_expr
    (55) comp_expr -> . comp_expr OR comp_expr
    (56) comp_expr -> . NOT expression
    (57) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 23
    LENGTH          shift and go to state 24
    FIND            shift and go to state 25
    LPAREN          shift and go to state 26
    YES             shift and go to state 27
    NO              shift and go to state 28
    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    TEXT            shift and go to state 33
    INPUT           shift and go to state 34
    CALL            shift and go to state 35
    NOT             shift and go to state 36
    RANDOM          shift and go to state 37

    expression                     shift and go to state 83
    ask                            shift and go to state 84
    items                          shift and go to state 85
    comp_expr                      shift and go to state 29
    random_statement               shift and go to state 32

state 39

    (14) statement -> if_then end_statement .

    OUTPUT          reduce using rule 14 (statement -> if_then end_statement .)
    REPEAT          reduce using rule 14 (statement -> if_then end_statement .)
    PAUSE           reduce using rule 14 (statement -> if_then end_statement .)
    FUNCTION        reduce using rule 14 (statement -> if_then end_statement .)
    WHILE           reduce using rule 14 (statement -> if_then end_statement .)
    FOREVER         reduce using rule 14 (statement -> if_then end_statement .)
    EXIT            reduce using rule 14 (statement -> if_then end_statement .)
    CONVERT         reduce using rule 14 (statement -> if_then end_statement .)
    CALL            reduce using rule 14 (statement -> if_then end_statement .)
    RETURN          reduce using rule 14 (statement -> if_then end_statement .)
    DELETE          reduce using rule 14 (statement -> if_then end_statement .)
    CLEAR           reduce using rule 14 (statement -> if_then end_statement .)
    ACTIVATE        reduce using rule 14 (statement -> if_then end_statement .)
    SET             reduce using rule 14 (statement -> if_then end_statement .)
    IF              reduce using rule 14 (statement -> if_then end_statement .)
    $end            reduce using rule 14 (statement -> if_then end_statement .)
    UNTIL           reduce using rule 14 (statement -> if_then end_statement .)
    END             reduce using rule 14 (statement -> if_then end_statement .)
    ELSE            reduce using rule 14 (statement -> if_then end_statement .)


state 40

    (15) statement -> if_then ELSE . THEN statements end_statement

    THEN            shift and go to state 86


state 41

    (3) end_statement -> END .

    OUTPUT          reduce using rule 3 (end_statement -> END .)
    REPEAT          reduce using rule 3 (end_statement -> END .)
    PAUSE           reduce using rule 3 (end_statement -> END .)
    FUNCTION        reduce using rule 3 (end_statement -> END .)
    WHILE           reduce using rule 3 (end_statement -> END .)
    FOREVER         reduce using rule 3 (end_statement -> END .)
    EXIT            reduce using rule 3 (end_statement -> END .)
    CONVERT         reduce using rule 3 (end_statement -> END .)
    CALL            reduce using rule 3 (end_statement -> END .)
    RETURN          reduce using rule 3 (end_statement -> END .)
    DELETE          reduce using rule 3 (end_statement -> END .)
    CLEAR           reduce using rule 3 (end_statement -> END .)
    ACTIVATE        reduce using rule 3 (end_statement -> END .)
    SET             reduce using rule 3 (end_statement -> END .)
    IF              reduce using rule 3 (end_statement -> END .)
    $end            reduce using rule 3 (end_statement -> END .)
    UNTIL           reduce using rule 3 (end_statement -> END .)
    END             reduce using rule 3 (end_statement -> END .)
    ELSE            reduce using rule 3 (end_statement -> END .)


state 42

    (16) statement -> REPEAT statements . UNTIL expression
    (2) statements -> statements . statement
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . FUNCTION IDENTIFIER WITH arguments MEANS statements end_statement
    (21) statement -> . WHILE expression DO statements end_statement
    (22) statement -> . FOREVER DO statements end_statement
    (23) statement -> . EXIT LOOP
    (24) statement -> . CONVERT expression TO TYPE DATATYPE
    (25) statement -> . CALL IDENTIFIER
    (26) statement -> . CALL IDENTIFIER items
    (27) statement -> . RETURN expression
    (28) statement -> . DELETE DATATYPE IDENTIFIER
    (29) statement -> . DELETE INDEX expression OF DATATYPE IDENTIFIER
    (30) statement -> . CLEAR DATATYPE IDENTIFIER
    (31) statement -> . ACTIVATE TEXT
    (32) statement -> . REPEAT expression TIMES USING IDENTIFIER statements end_statement
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    UNTIL           shift and go to state 87
    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    FOREVER         shift and go to state 10
    EXIT            shift and go to state 11
    CONVERT         shift and go to state 12
    CALL            shift and go to state 13
    RETURN          shift and go to state 14
    DELETE          shift and go to state 15
    CLEAR           shift and go to state 16
    ACTIVATE        shift and go to state 17
    SET             shift and go to state 18
    IF              shift and go to state 19

    statement                      shift and go to state 20
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 43

    (32) statement -> REPEAT expression . TIMES USING IDENTIFIER statements end_statement
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . POWER expression
    (48) comp_expr -> expression . EQ expression
    (49) comp_expr -> expression . GT expression
    (50) comp_expr -> expression . LT expression
    (51) comp_expr -> expression . GE expression
    (52) comp_expr -> expression . LE expression
    (53) comp_expr -> expression . NE expression
    (57) comp_expr -> expression . IN expression

    TIMES           shift and go to state 88
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    DIVIDE          shift and go to state 63
    POWER           shift and go to state 64
    EQ              shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    GE              shift and go to state 68
    LE              shift and go to state 69
    NE              shift and go to state 70
    IN              shift and go to state 71


state 44

    (62) expression -> TEXT .

    TIMES           reduce using rule 62 (expression -> TEXT .)
    PLUS            reduce using rule 62 (expression -> TEXT .)
    MINUS           reduce using rule 62 (expression -> TEXT .)
    DIVIDE          reduce using rule 62 (expression -> TEXT .)
    POWER           reduce using rule 62 (expression -> TEXT .)
    EQ              reduce using rule 62 (expression -> TEXT .)
    GT              reduce using rule 62 (expression -> TEXT .)
    LT              reduce using rule 62 (expression -> TEXT .)
    GE              reduce using rule 62 (expression -> TEXT .)
    LE              reduce using rule 62 (expression -> TEXT .)
    NE              reduce using rule 62 (expression -> TEXT .)
    IN              reduce using rule 62 (expression -> TEXT .)
    OUTPUT          reduce using rule 62 (expression -> TEXT .)
    REPEAT          reduce using rule 62 (expression -> TEXT .)
    PAUSE           reduce using rule 62 (expression -> TEXT .)
    FUNCTION        reduce using rule 62 (expression -> TEXT .)
    WHILE           reduce using rule 62 (expression -> TEXT .)
    FOREVER         reduce using rule 62 (expression -> TEXT .)
    EXIT            reduce using rule 62 (expression -> TEXT .)
    CONVERT         reduce using rule 62 (expression -> TEXT .)
    CALL            reduce using rule 62 (expression -> TEXT .)
    RETURN          reduce using rule 62 (expression -> TEXT .)
    DELETE          reduce using rule 62 (expression -> TEXT .)
    CLEAR           reduce using rule 62 (expression -> TEXT .)
    ACTIVATE        reduce using rule 62 (expression -> TEXT .)
    SET             reduce using rule 62 (expression -> TEXT .)
    IF              reduce using rule 62 (expression -> TEXT .)
    $end            reduce using rule 62 (expression -> TEXT .)
    UNTIL           reduce using rule 62 (expression -> TEXT .)
    END             reduce using rule 62 (expression -> TEXT .)
    ELSE            reduce using rule 62 (expression -> TEXT .)
    DO              reduce using rule 62 (expression -> TEXT .)
    TO              reduce using rule 62 (expression -> TEXT .)
    THEN            reduce using rule 62 (expression -> TEXT .)
    RPAREN          reduce using rule 62 (expression -> TEXT .)
    AND             reduce using rule 62 (expression -> TEXT .)
    OR              reduce using rule 62 (expression -> TEXT .)
    TYPE            reduce using rule 62 (expression -> TEXT .)
    DATATYPE        reduce using rule 62 (expression -> TEXT .)
    LENGTH          reduce using rule 62 (expression -> TEXT .)
    FIND            reduce using rule 62 (expression -> TEXT .)
    LPAREN          reduce using rule 62 (expression -> TEXT .)
    YES             reduce using rule 62 (expression -> TEXT .)
    NO              reduce using rule 62 (expression -> TEXT .)
    NUMBER          reduce using rule 62 (expression -> TEXT .)
    IDENTIFIER      reduce using rule 62 (expression -> TEXT .)
    TEXT            reduce using rule 62 (expression -> TEXT .)
    INPUT           reduce using rule 62 (expression -> TEXT .)
    NOT             reduce using rule 62 (expression -> TEXT .)
    RANDOM          reduce using rule 62 (expression -> TEXT .)
    OF              reduce using rule 62 (expression -> TEXT .)
    FROM            reduce using rule 62 (expression -> TEXT .)


state 45

    (64) expression -> CALL . IDENTIFIER
    (65) expression -> CALL . IDENTIFIER items
    (25) statement -> CALL . IDENTIFIER
    (26) statement -> CALL . IDENTIFIER items

    IDENTIFIER      shift and go to state 89


state 46

    (17) statement -> PAUSE expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . POWER expression
    (48) comp_expr -> expression . EQ expression
    (49) comp_expr -> expression . GT expression
    (50) comp_expr -> expression . LT expression
    (51) comp_expr -> expression . GE expression
    (52) comp_expr -> expression . LE expression
    (53) comp_expr -> expression . NE expression
    (57) comp_expr -> expression . IN expression

    OUTPUT          reduce using rule 17 (statement -> PAUSE expression .)
    REPEAT          reduce using rule 17 (statement -> PAUSE expression .)
    PAUSE           reduce using rule 17 (statement -> PAUSE expression .)
    FUNCTION        reduce using rule 17 (statement -> PAUSE expression .)
    WHILE           reduce using rule 17 (statement -> PAUSE expression .)
    FOREVER         reduce using rule 17 (statement -> PAUSE expression .)
    EXIT            reduce using rule 17 (statement -> PAUSE expression .)
    CONVERT         reduce using rule 17 (statement -> PAUSE expression .)
    CALL            reduce using rule 17 (statement -> PAUSE expression .)
    RETURN          reduce using rule 17 (statement -> PAUSE expression .)
    DELETE          reduce using rule 17 (statement -> PAUSE expression .)
    CLEAR           reduce using rule 17 (statement -> PAUSE expression .)
    ACTIVATE        reduce using rule 17 (statement -> PAUSE expression .)
    SET             reduce using rule 17 (statement -> PAUSE expression .)
    IF              reduce using rule 17 (statement -> PAUSE expression .)
    $end            reduce using rule 17 (statement -> PAUSE expression .)
    UNTIL           reduce using rule 17 (statement -> PAUSE expression .)
    END             reduce using rule 17 (statement -> PAUSE expression .)
    ELSE            reduce using rule 17 (statement -> PAUSE expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    POWER           shift and go to state 64
    EQ              shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    GE              shift and go to state 68
    LE              shift and go to state 69
    NE              shift and go to state 70
    IN              shift and go to state 71


state 47

    (19) statement -> FUNCTION IDENTIFIER . MEANS statements end_statement
    (20) statement -> FUNCTION IDENTIFIER . WITH arguments MEANS statements end_statement

    MEANS           shift and go to state 90
    WITH            shift and go to state 91


state 48

    (21) statement -> WHILE expression . DO statements end_statement
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . POWER expression
    (48) comp_expr -> expression . EQ expression
    (49) comp_expr -> expression . GT expression
    (50) comp_expr -> expression . LT expression
    (51) comp_expr -> expression . GE expression
    (52) comp_expr -> expression . LE expression
    (53) comp_expr -> expression . NE expression
    (57) comp_expr -> expression . IN expression

    DO              shift and go to state 92
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    POWER           shift and go to state 64
    EQ              shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    GE              shift and go to state 68
    LE              shift and go to state 69
    NE              shift and go to state 70
    IN              shift and go to state 71


state 49

    (22) statement -> FOREVER DO . statements end_statement
    (1) statements -> . statement
    (2) statements -> . statements statement
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . FUNCTION IDENTIFIER WITH arguments MEANS statements end_statement
    (21) statement -> . WHILE expression DO statements end_statement
    (22) statement -> . FOREVER DO statements end_statement
    (23) statement -> . EXIT LOOP
    (24) statement -> . CONVERT expression TO TYPE DATATYPE
    (25) statement -> . CALL IDENTIFIER
    (26) statement -> . CALL IDENTIFIER items
    (27) statement -> . RETURN expression
    (28) statement -> . DELETE DATATYPE IDENTIFIER
    (29) statement -> . DELETE INDEX expression OF DATATYPE IDENTIFIER
    (30) statement -> . CLEAR DATATYPE IDENTIFIER
    (31) statement -> . ACTIVATE TEXT
    (32) statement -> . REPEAT expression TIMES USING IDENTIFIER statements end_statement
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    FOREVER         shift and go to state 10
    EXIT            shift and go to state 11
    CONVERT         shift and go to state 12
    CALL            shift and go to state 13
    RETURN          shift and go to state 14
    DELETE          shift and go to state 15
    CLEAR           shift and go to state 16
    ACTIVATE        shift and go to state 17
    SET             shift and go to state 18
    IF              shift and go to state 19

    statements                     shift and go to state 93
    statement                      shift and go to state 2
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 50

    (23) statement -> EXIT LOOP .

    OUTPUT          reduce using rule 23 (statement -> EXIT LOOP .)
    REPEAT          reduce using rule 23 (statement -> EXIT LOOP .)
    PAUSE           reduce using rule 23 (statement -> EXIT LOOP .)
    FUNCTION        reduce using rule 23 (statement -> EXIT LOOP .)
    WHILE           reduce using rule 23 (statement -> EXIT LOOP .)
    FOREVER         reduce using rule 23 (statement -> EXIT LOOP .)
    EXIT            reduce using rule 23 (statement -> EXIT LOOP .)
    CONVERT         reduce using rule 23 (statement -> EXIT LOOP .)
    CALL            reduce using rule 23 (statement -> EXIT LOOP .)
    RETURN          reduce using rule 23 (statement -> EXIT LOOP .)
    DELETE          reduce using rule 23 (statement -> EXIT LOOP .)
    CLEAR           reduce using rule 23 (statement -> EXIT LOOP .)
    ACTIVATE        reduce using rule 23 (statement -> EXIT LOOP .)
    SET             reduce using rule 23 (statement -> EXIT LOOP .)
    IF              reduce using rule 23 (statement -> EXIT LOOP .)
    $end            reduce using rule 23 (statement -> EXIT LOOP .)
    UNTIL           reduce using rule 23 (statement -> EXIT LOOP .)
    END             reduce using rule 23 (statement -> EXIT LOOP .)
    ELSE            reduce using rule 23 (statement -> EXIT LOOP .)


state 51

    (24) statement -> CONVERT expression . TO TYPE DATATYPE
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . POWER expression
    (48) comp_expr -> expression . EQ expression
    (49) comp_expr -> expression . GT expression
    (50) comp_expr -> expression . LT expression
    (51) comp_expr -> expression . GE expression
    (52) comp_expr -> expression . LE expression
    (53) comp_expr -> expression . NE expression
    (57) comp_expr -> expression . IN expression

    TO              shift and go to state 94
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    POWER           shift and go to state 64
    EQ              shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    GE              shift and go to state 68
    LE              shift and go to state 69
    NE              shift and go to state 70
    IN              shift and go to state 71


state 52

    (25) statement -> CALL IDENTIFIER .
    (26) statement -> CALL IDENTIFIER . items
    (38) items -> . expression
    (39) items -> . items expression
    (35) expression -> . DATATYPE FROM expression TO expression FROM expression
    (36) expression -> . LENGTH OF expression
    (37) expression -> . FIND OCCURENCES OF expression IN expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression POWER expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . YES
    (47) expression -> . NO
    (58) expression -> . comp_expr
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER
    (61) expression -> . random_statement
    (62) expression -> . TEXT
    (63) expression -> . INPUT
    (64) expression -> . CALL IDENTIFIER
    (65) expression -> . CALL IDENTIFIER items
    (66) expression -> . IDENTIFIER INDEX expression
    (48) comp_expr -> . expression EQ expression
    (49) comp_expr -> . expression GT expression
    (50) comp_expr -> . expression LT expression
    (51) comp_expr -> . expression GE expression
    (52) comp_expr -> . expression LE expression
    (53) comp_expr -> . expression NE expression
    (54) comp_expr -> . comp_expr AND comp_expr
    (55) comp_expr -> . comp_expr OR comp_expr
    (56) comp_expr -> . NOT expression
    (57) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

  ! shift/reduce conflict for CALL resolved as shift
    OUTPUT          reduce using rule 25 (statement -> CALL IDENTIFIER .)
    REPEAT          reduce using rule 25 (statement -> CALL IDENTIFIER .)
    PAUSE           reduce using rule 25 (statement -> CALL IDENTIFIER .)
    FUNCTION        reduce using rule 25 (statement -> CALL IDENTIFIER .)
    WHILE           reduce using rule 25 (statement -> CALL IDENTIFIER .)
    FOREVER         reduce using rule 25 (statement -> CALL IDENTIFIER .)
    EXIT            reduce using rule 25 (statement -> CALL IDENTIFIER .)
    CONVERT         reduce using rule 25 (statement -> CALL IDENTIFIER .)
    RETURN          reduce using rule 25 (statement -> CALL IDENTIFIER .)
    DELETE          reduce using rule 25 (statement -> CALL IDENTIFIER .)
    CLEAR           reduce using rule 25 (statement -> CALL IDENTIFIER .)
    ACTIVATE        reduce using rule 25 (statement -> CALL IDENTIFIER .)
    SET             reduce using rule 25 (statement -> CALL IDENTIFIER .)
    IF              reduce using rule 25 (statement -> CALL IDENTIFIER .)
    $end            reduce using rule 25 (statement -> CALL IDENTIFIER .)
    UNTIL           reduce using rule 25 (statement -> CALL IDENTIFIER .)
    END             reduce using rule 25 (statement -> CALL IDENTIFIER .)
    ELSE            reduce using rule 25 (statement -> CALL IDENTIFIER .)
    DATATYPE        shift and go to state 23
    LENGTH          shift and go to state 24
    FIND            shift and go to state 25
    LPAREN          shift and go to state 26
    YES             shift and go to state 27
    NO              shift and go to state 28
    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    TEXT            shift and go to state 44
    INPUT           shift and go to state 34
    CALL            shift and go to state 35
    NOT             shift and go to state 36
    RANDOM          shift and go to state 37

  ! CALL            [ reduce using rule 25 (statement -> CALL IDENTIFIER .) ]

    items                          shift and go to state 95
    expression                     shift and go to state 96
    comp_expr                      shift and go to state 29
    random_statement               shift and go to state 32

state 53

    (27) statement -> RETURN expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . POWER expression
    (48) comp_expr -> expression . EQ expression
    (49) comp_expr -> expression . GT expression
    (50) comp_expr -> expression . LT expression
    (51) comp_expr -> expression . GE expression
    (52) comp_expr -> expression . LE expression
    (53) comp_expr -> expression . NE expression
    (57) comp_expr -> expression . IN expression

    OUTPUT          reduce using rule 27 (statement -> RETURN expression .)
    REPEAT          reduce using rule 27 (statement -> RETURN expression .)
    PAUSE           reduce using rule 27 (statement -> RETURN expression .)
    FUNCTION        reduce using rule 27 (statement -> RETURN expression .)
    WHILE           reduce using rule 27 (statement -> RETURN expression .)
    FOREVER         reduce using rule 27 (statement -> RETURN expression .)
    EXIT            reduce using rule 27 (statement -> RETURN expression .)
    CONVERT         reduce using rule 27 (statement -> RETURN expression .)
    CALL            reduce using rule 27 (statement -> RETURN expression .)
    RETURN          reduce using rule 27 (statement -> RETURN expression .)
    DELETE          reduce using rule 27 (statement -> RETURN expression .)
    CLEAR           reduce using rule 27 (statement -> RETURN expression .)
    ACTIVATE        reduce using rule 27 (statement -> RETURN expression .)
    SET             reduce using rule 27 (statement -> RETURN expression .)
    IF              reduce using rule 27 (statement -> RETURN expression .)
    $end            reduce using rule 27 (statement -> RETURN expression .)
    UNTIL           reduce using rule 27 (statement -> RETURN expression .)
    END             reduce using rule 27 (statement -> RETURN expression .)
    ELSE            reduce using rule 27 (statement -> RETURN expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    POWER           shift and go to state 64
    EQ              shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    GE              shift and go to state 68
    LE              shift and go to state 69
    NE              shift and go to state 70
    IN              shift and go to state 71


state 54

    (28) statement -> DELETE DATATYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 97


state 55

    (29) statement -> DELETE INDEX . expression OF DATATYPE IDENTIFIER
    (35) expression -> . DATATYPE FROM expression TO expression FROM expression
    (36) expression -> . LENGTH OF expression
    (37) expression -> . FIND OCCURENCES OF expression IN expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression POWER expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . YES
    (47) expression -> . NO
    (58) expression -> . comp_expr
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER
    (61) expression -> . random_statement
    (62) expression -> . TEXT
    (63) expression -> . INPUT
    (64) expression -> . CALL IDENTIFIER
    (65) expression -> . CALL IDENTIFIER items
    (66) expression -> . IDENTIFIER INDEX expression
    (48) comp_expr -> . expression EQ expression
    (49) comp_expr -> . expression GT expression
    (50) comp_expr -> . expression LT expression
    (51) comp_expr -> . expression GE expression
    (52) comp_expr -> . expression LE expression
    (53) comp_expr -> . expression NE expression
    (54) comp_expr -> . comp_expr AND comp_expr
    (55) comp_expr -> . comp_expr OR comp_expr
    (56) comp_expr -> . NOT expression
    (57) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 23
    LENGTH          shift and go to state 24
    FIND            shift and go to state 25
    LPAREN          shift and go to state 26
    YES             shift and go to state 27
    NO              shift and go to state 28
    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    TEXT            shift and go to state 44
    INPUT           shift and go to state 34
    CALL            shift and go to state 35
    NOT             shift and go to state 36
    RANDOM          shift and go to state 37

    expression                     shift and go to state 98
    comp_expr                      shift and go to state 29
    random_statement               shift and go to state 32

state 56

    (30) statement -> CLEAR DATATYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 99


state 57

    (31) statement -> ACTIVATE TEXT .

    OUTPUT          reduce using rule 31 (statement -> ACTIVATE TEXT .)
    REPEAT          reduce using rule 31 (statement -> ACTIVATE TEXT .)
    PAUSE           reduce using rule 31 (statement -> ACTIVATE TEXT .)
    FUNCTION        reduce using rule 31 (statement -> ACTIVATE TEXT .)
    WHILE           reduce using rule 31 (statement -> ACTIVATE TEXT .)
    FOREVER         reduce using rule 31 (statement -> ACTIVATE TEXT .)
    EXIT            reduce using rule 31 (statement -> ACTIVATE TEXT .)
    CONVERT         reduce using rule 31 (statement -> ACTIVATE TEXT .)
    CALL            reduce using rule 31 (statement -> ACTIVATE TEXT .)
    RETURN          reduce using rule 31 (statement -> ACTIVATE TEXT .)
    DELETE          reduce using rule 31 (statement -> ACTIVATE TEXT .)
    CLEAR           reduce using rule 31 (statement -> ACTIVATE TEXT .)
    ACTIVATE        reduce using rule 31 (statement -> ACTIVATE TEXT .)
    SET             reduce using rule 31 (statement -> ACTIVATE TEXT .)
    IF              reduce using rule 31 (statement -> ACTIVATE TEXT .)
    $end            reduce using rule 31 (statement -> ACTIVATE TEXT .)
    UNTIL           reduce using rule 31 (statement -> ACTIVATE TEXT .)
    END             reduce using rule 31 (statement -> ACTIVATE TEXT .)
    ELSE            reduce using rule 31 (statement -> ACTIVATE TEXT .)


state 58

    (8) var_assignment -> SET IDENTIFIER .

    TO              reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    OUTPUT          reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    REPEAT          reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    PAUSE           reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    FUNCTION        reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    WHILE           reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    FOREVER         reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    EXIT            reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    CONVERT         reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    CALL            reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    RETURN          reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    DELETE          reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    CLEAR           reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    ACTIVATE        reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    SET             reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    IF              reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    $end            reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    UNTIL           reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    END             reduce using rule 8 (var_assignment -> SET IDENTIFIER .)
    ELSE            reduce using rule 8 (var_assignment -> SET IDENTIFIER .)


state 59

    (13) if_then -> IF expression . THEN statements
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . POWER expression
    (48) comp_expr -> expression . EQ expression
    (49) comp_expr -> expression . GT expression
    (50) comp_expr -> expression . LT expression
    (51) comp_expr -> expression . GE expression
    (52) comp_expr -> expression . LE expression
    (53) comp_expr -> expression . NE expression
    (57) comp_expr -> expression . IN expression

    THEN            shift and go to state 100
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    POWER           shift and go to state 64
    EQ              shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    GE              shift and go to state 68
    LE              shift and go to state 69
    NE              shift and go to state 70
    IN              shift and go to state 71


state 60

    (40) expression -> expression PLUS . expression
    (35) expression -> . DATATYPE FROM expression TO expression FROM expression
    (36) expression -> . LENGTH OF expression
    (37) expression -> . FIND OCCURENCES OF expression IN expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression POWER expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . YES
    (47) expression -> . NO
    (58) expression -> . comp_expr
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER
    (61) expression -> . random_statement
    (62) expression -> . TEXT
    (63) expression -> . INPUT
    (64) expression -> . CALL IDENTIFIER
    (65) expression -> . CALL IDENTIFIER items
    (66) expression -> . IDENTIFIER INDEX expression
    (48) comp_expr -> . expression EQ expression
    (49) comp_expr -> . expression GT expression
    (50) comp_expr -> . expression LT expression
    (51) comp_expr -> . expression GE expression
    (52) comp_expr -> . expression LE expression
    (53) comp_expr -> . expression NE expression
    (54) comp_expr -> . comp_expr AND comp_expr
    (55) comp_expr -> . comp_expr OR comp_expr
    (56) comp_expr -> . NOT expression
    (57) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 23
    LENGTH          shift and go to state 24
    FIND            shift and go to state 25
    LPAREN          shift and go to state 26
    YES             shift and go to state 27
    NO              shift and go to state 28
    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    TEXT            shift and go to state 44
    INPUT           shift and go to state 34
    CALL            shift and go to state 35
    NOT             shift and go to state 36
    RANDOM          shift and go to state 37

    expression                     shift and go to state 101
    comp_expr                      shift and go to state 29
    random_statement               shift and go to state 32

state 61

    (41) expression -> expression MINUS . expression
    (35) expression -> . DATATYPE FROM expression TO expression FROM expression
    (36) expression -> . LENGTH OF expression
    (37) expression -> . FIND OCCURENCES OF expression IN expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression POWER expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . YES
    (47) expression -> . NO
    (58) expression -> . comp_expr
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER
    (61) expression -> . random_statement
    (62) expression -> . TEXT
    (63) expression -> . INPUT
    (64) expression -> . CALL IDENTIFIER
    (65) expression -> . CALL IDENTIFIER items
    (66) expression -> . IDENTIFIER INDEX expression
    (48) comp_expr -> . expression EQ expression
    (49) comp_expr -> . expression GT expression
    (50) comp_expr -> . expression LT expression
    (51) comp_expr -> . expression GE expression
    (52) comp_expr -> . expression LE expression
    (53) comp_expr -> . expression NE expression
    (54) comp_expr -> . comp_expr AND comp_expr
    (55) comp_expr -> . comp_expr OR comp_expr
    (56) comp_expr -> . NOT expression
    (57) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 23
    LENGTH          shift and go to state 24
    FIND            shift and go to state 25
    LPAREN          shift and go to state 26
    YES             shift and go to state 27
    NO              shift and go to state 28
    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    TEXT            shift and go to state 44
    INPUT           shift and go to state 34
    CALL            shift and go to state 35
    NOT             shift and go to state 36
    RANDOM          shift and go to state 37

    expression                     shift and go to state 102
    comp_expr                      shift and go to state 29
    random_statement               shift and go to state 32

state 62

    (42) expression -> expression TIMES . expression
    (35) expression -> . DATATYPE FROM expression TO expression FROM expression
    (36) expression -> . LENGTH OF expression
    (37) expression -> . FIND OCCURENCES OF expression IN expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression POWER expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . YES
    (47) expression -> . NO
    (58) expression -> . comp_expr
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER
    (61) expression -> . random_statement
    (62) expression -> . TEXT
    (63) expression -> . INPUT
    (64) expression -> . CALL IDENTIFIER
    (65) expression -> . CALL IDENTIFIER items
    (66) expression -> . IDENTIFIER INDEX expression
    (48) comp_expr -> . expression EQ expression
    (49) comp_expr -> . expression GT expression
    (50) comp_expr -> . expression LT expression
    (51) comp_expr -> . expression GE expression
    (52) comp_expr -> . expression LE expression
    (53) comp_expr -> . expression NE expression
    (54) comp_expr -> . comp_expr AND comp_expr
    (55) comp_expr -> . comp_expr OR comp_expr
    (56) comp_expr -> . NOT expression
    (57) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 23
    LENGTH          shift and go to state 24
    FIND            shift and go to state 25
    LPAREN          shift and go to state 26
    YES             shift and go to state 27
    NO              shift and go to state 28
    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    TEXT            shift and go to state 44
    INPUT           shift and go to state 34
    CALL            shift and go to state 35
    NOT             shift and go to state 36
    RANDOM          shift and go to state 37

    expression                     shift and go to state 103
    comp_expr                      shift and go to state 29
    random_statement               shift and go to state 32

state 63

    (43) expression -> expression DIVIDE . expression
    (35) expression -> . DATATYPE FROM expression TO expression FROM expression
    (36) expression -> . LENGTH OF expression
    (37) expression -> . FIND OCCURENCES OF expression IN expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression POWER expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . YES
    (47) expression -> . NO
    (58) expression -> . comp_expr
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER
    (61) expression -> . random_statement
    (62) expression -> . TEXT
    (63) expression -> . INPUT
    (64) expression -> . CALL IDENTIFIER
    (65) expression -> . CALL IDENTIFIER items
    (66) expression -> . IDENTIFIER INDEX expression
    (48) comp_expr -> . expression EQ expression
    (49) comp_expr -> . expression GT expression
    (50) comp_expr -> . expression LT expression
    (51) comp_expr -> . expression GE expression
    (52) comp_expr -> . expression LE expression
    (53) comp_expr -> . expression NE expression
    (54) comp_expr -> . comp_expr AND comp_expr
    (55) comp_expr -> . comp_expr OR comp_expr
    (56) comp_expr -> . NOT expression
    (57) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 23
    LENGTH          shift and go to state 24
    FIND            shift and go to state 25
    LPAREN          shift and go to state 26
    YES             shift and go to state 27
    NO              shift and go to state 28
    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    TEXT            shift and go to state 44
    INPUT           shift and go to state 34
    CALL            shift and go to state 35
    NOT             shift and go to state 36
    RANDOM          shift and go to state 37

    expression                     shift and go to state 104
    comp_expr                      shift and go to state 29
    random_statement               shift and go to state 32

state 64

    (44) expression -> expression POWER . expression
    (35) expression -> . DATATYPE FROM expression TO expression FROM expression
    (36) expression -> . LENGTH OF expression
    (37) expression -> . FIND OCCURENCES OF expression IN expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression POWER expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . YES
    (47) expression -> . NO
    (58) expression -> . comp_expr
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER
    (61) expression -> . random_statement
    (62) expression -> . TEXT
    (63) expression -> . INPUT
    (64) expression -> . CALL IDENTIFIER
    (65) expression -> . CALL IDENTIFIER items
    (66) expression -> . IDENTIFIER INDEX expression
    (48) comp_expr -> . expression EQ expression
    (49) comp_expr -> . expression GT expression
    (50) comp_expr -> . expression LT expression
    (51) comp_expr -> . expression GE expression
    (52) comp_expr -> . expression LE expression
    (53) comp_expr -> . expression NE expression
    (54) comp_expr -> . comp_expr AND comp_expr
    (55) comp_expr -> . comp_expr OR comp_expr
    (56) comp_expr -> . NOT expression
    (57) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 23
    LENGTH          shift and go to state 24
    FIND            shift and go to state 25
    LPAREN          shift and go to state 26
    YES             shift and go to state 27
    NO              shift and go to state 28
    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    TEXT            shift and go to state 44
    INPUT           shift and go to state 34
    CALL            shift and go to state 35
    NOT             shift and go to state 36
    RANDOM          shift and go to state 37

    expression                     shift and go to state 105
    comp_expr                      shift and go to state 29
    random_statement               shift and go to state 32

state 65

    (48) comp_expr -> expression EQ . expression
    (35) expression -> . DATATYPE FROM expression TO expression FROM expression
    (36) expression -> . LENGTH OF expression
    (37) expression -> . FIND OCCURENCES OF expression IN expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression POWER expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . YES
    (47) expression -> . NO
    (58) expression -> . comp_expr
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER
    (61) expression -> . random_statement
    (62) expression -> . TEXT
    (63) expression -> . INPUT
    (64) expression -> . CALL IDENTIFIER
    (65) expression -> . CALL IDENTIFIER items
    (66) expression -> . IDENTIFIER INDEX expression
    (48) comp_expr -> . expression EQ expression
    (49) comp_expr -> . expression GT expression
    (50) comp_expr -> . expression LT expression
    (51) comp_expr -> . expression GE expression
    (52) comp_expr -> . expression LE expression
    (53) comp_expr -> . expression NE expression
    (54) comp_expr -> . comp_expr AND comp_expr
    (55) comp_expr -> . comp_expr OR comp_expr
    (56) comp_expr -> . NOT expression
    (57) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 23
    LENGTH          shift and go to state 24
    FIND            shift and go to state 25
    LPAREN          shift and go to state 26
    YES             shift and go to state 27
    NO              shift and go to state 28
    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    TEXT            shift and go to state 44
    INPUT           shift and go to state 34
    CALL            shift and go to state 35
    NOT             shift and go to state 36
    RANDOM          shift and go to state 37

    expression                     shift and go to state 106
    comp_expr                      shift and go to state 29
    random_statement               shift and go to state 32

state 66

    (49) comp_expr -> expression GT . expression
    (35) expression -> . DATATYPE FROM expression TO expression FROM expression
    (36) expression -> . LENGTH OF expression
    (37) expression -> . FIND OCCURENCES OF expression IN expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression POWER expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . YES
    (47) expression -> . NO
    (58) expression -> . comp_expr
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER
    (61) expression -> . random_statement
    (62) expression -> . TEXT
    (63) expression -> . INPUT
    (64) expression -> . CALL IDENTIFIER
    (65) expression -> . CALL IDENTIFIER items
    (66) expression -> . IDENTIFIER INDEX expression
    (48) comp_expr -> . expression EQ expression
    (49) comp_expr -> . expression GT expression
    (50) comp_expr -> . expression LT expression
    (51) comp_expr -> . expression GE expression
    (52) comp_expr -> . expression LE expression
    (53) comp_expr -> . expression NE expression
    (54) comp_expr -> . comp_expr AND comp_expr
    (55) comp_expr -> . comp_expr OR comp_expr
    (56) comp_expr -> . NOT expression
    (57) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 23
    LENGTH          shift and go to state 24
    FIND            shift and go to state 25
    LPAREN          shift and go to state 26
    YES             shift and go to state 27
    NO              shift and go to state 28
    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    TEXT            shift and go to state 44
    INPUT           shift and go to state 34
    CALL            shift and go to state 35
    NOT             shift and go to state 36
    RANDOM          shift and go to state 37

    expression                     shift and go to state 107
    comp_expr                      shift and go to state 29
    random_statement               shift and go to state 32

state 67

    (50) comp_expr -> expression LT . expression
    (35) expression -> . DATATYPE FROM expression TO expression FROM expression
    (36) expression -> . LENGTH OF expression
    (37) expression -> . FIND OCCURENCES OF expression IN expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression POWER expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . YES
    (47) expression -> . NO
    (58) expression -> . comp_expr
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER
    (61) expression -> . random_statement
    (62) expression -> . TEXT
    (63) expression -> . INPUT
    (64) expression -> . CALL IDENTIFIER
    (65) expression -> . CALL IDENTIFIER items
    (66) expression -> . IDENTIFIER INDEX expression
    (48) comp_expr -> . expression EQ expression
    (49) comp_expr -> . expression GT expression
    (50) comp_expr -> . expression LT expression
    (51) comp_expr -> . expression GE expression
    (52) comp_expr -> . expression LE expression
    (53) comp_expr -> . expression NE expression
    (54) comp_expr -> . comp_expr AND comp_expr
    (55) comp_expr -> . comp_expr OR comp_expr
    (56) comp_expr -> . NOT expression
    (57) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 23
    LENGTH          shift and go to state 24
    FIND            shift and go to state 25
    LPAREN          shift and go to state 26
    YES             shift and go to state 27
    NO              shift and go to state 28
    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    TEXT            shift and go to state 44
    INPUT           shift and go to state 34
    CALL            shift and go to state 35
    NOT             shift and go to state 36
    RANDOM          shift and go to state 37

    expression                     shift and go to state 108
    comp_expr                      shift and go to state 29
    random_statement               shift and go to state 32

state 68

    (51) comp_expr -> expression GE . expression
    (35) expression -> . DATATYPE FROM expression TO expression FROM expression
    (36) expression -> . LENGTH OF expression
    (37) expression -> . FIND OCCURENCES OF expression IN expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression POWER expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . YES
    (47) expression -> . NO
    (58) expression -> . comp_expr
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER
    (61) expression -> . random_statement
    (62) expression -> . TEXT
    (63) expression -> . INPUT
    (64) expression -> . CALL IDENTIFIER
    (65) expression -> . CALL IDENTIFIER items
    (66) expression -> . IDENTIFIER INDEX expression
    (48) comp_expr -> . expression EQ expression
    (49) comp_expr -> . expression GT expression
    (50) comp_expr -> . expression LT expression
    (51) comp_expr -> . expression GE expression
    (52) comp_expr -> . expression LE expression
    (53) comp_expr -> . expression NE expression
    (54) comp_expr -> . comp_expr AND comp_expr
    (55) comp_expr -> . comp_expr OR comp_expr
    (56) comp_expr -> . NOT expression
    (57) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 23
    LENGTH          shift and go to state 24
    FIND            shift and go to state 25
    LPAREN          shift and go to state 26
    YES             shift and go to state 27
    NO              shift and go to state 28
    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    TEXT            shift and go to state 44
    INPUT           shift and go to state 34
    CALL            shift and go to state 35
    NOT             shift and go to state 36
    RANDOM          shift and go to state 37

    expression                     shift and go to state 109
    comp_expr                      shift and go to state 29
    random_statement               shift and go to state 32

state 69

    (52) comp_expr -> expression LE . expression
    (35) expression -> . DATATYPE FROM expression TO expression FROM expression
    (36) expression -> . LENGTH OF expression
    (37) expression -> . FIND OCCURENCES OF expression IN expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression POWER expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . YES
    (47) expression -> . NO
    (58) expression -> . comp_expr
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER
    (61) expression -> . random_statement
    (62) expression -> . TEXT
    (63) expression -> . INPUT
    (64) expression -> . CALL IDENTIFIER
    (65) expression -> . CALL IDENTIFIER items
    (66) expression -> . IDENTIFIER INDEX expression
    (48) comp_expr -> . expression EQ expression
    (49) comp_expr -> . expression GT expression
    (50) comp_expr -> . expression LT expression
    (51) comp_expr -> . expression GE expression
    (52) comp_expr -> . expression LE expression
    (53) comp_expr -> . expression NE expression
    (54) comp_expr -> . comp_expr AND comp_expr
    (55) comp_expr -> . comp_expr OR comp_expr
    (56) comp_expr -> . NOT expression
    (57) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 23
    LENGTH          shift and go to state 24
    FIND            shift and go to state 25
    LPAREN          shift and go to state 26
    YES             shift and go to state 27
    NO              shift and go to state 28
    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    TEXT            shift and go to state 44
    INPUT           shift and go to state 34
    CALL            shift and go to state 35
    NOT             shift and go to state 36
    RANDOM          shift and go to state 37

    expression                     shift and go to state 110
    comp_expr                      shift and go to state 29
    random_statement               shift and go to state 32

state 70

    (53) comp_expr -> expression NE . expression
    (35) expression -> . DATATYPE FROM expression TO expression FROM expression
    (36) expression -> . LENGTH OF expression
    (37) expression -> . FIND OCCURENCES OF expression IN expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression POWER expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . YES
    (47) expression -> . NO
    (58) expression -> . comp_expr
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER
    (61) expression -> . random_statement
    (62) expression -> . TEXT
    (63) expression -> . INPUT
    (64) expression -> . CALL IDENTIFIER
    (65) expression -> . CALL IDENTIFIER items
    (66) expression -> . IDENTIFIER INDEX expression
    (48) comp_expr -> . expression EQ expression
    (49) comp_expr -> . expression GT expression
    (50) comp_expr -> . expression LT expression
    (51) comp_expr -> . expression GE expression
    (52) comp_expr -> . expression LE expression
    (53) comp_expr -> . expression NE expression
    (54) comp_expr -> . comp_expr AND comp_expr
    (55) comp_expr -> . comp_expr OR comp_expr
    (56) comp_expr -> . NOT expression
    (57) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 23
    LENGTH          shift and go to state 24
    FIND            shift and go to state 25
    LPAREN          shift and go to state 26
    YES             shift and go to state 27
    NO              shift and go to state 28
    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    TEXT            shift and go to state 44
    INPUT           shift and go to state 34
    CALL            shift and go to state 35
    NOT             shift and go to state 36
    RANDOM          shift and go to state 37

    expression                     shift and go to state 111
    comp_expr                      shift and go to state 29
    random_statement               shift and go to state 32

state 71

    (57) comp_expr -> expression IN . expression
    (35) expression -> . DATATYPE FROM expression TO expression FROM expression
    (36) expression -> . LENGTH OF expression
    (37) expression -> . FIND OCCURENCES OF expression IN expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression POWER expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . YES
    (47) expression -> . NO
    (58) expression -> . comp_expr
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER
    (61) expression -> . random_statement
    (62) expression -> . TEXT
    (63) expression -> . INPUT
    (64) expression -> . CALL IDENTIFIER
    (65) expression -> . CALL IDENTIFIER items
    (66) expression -> . IDENTIFIER INDEX expression
    (48) comp_expr -> . expression EQ expression
    (49) comp_expr -> . expression GT expression
    (50) comp_expr -> . expression LT expression
    (51) comp_expr -> . expression GE expression
    (52) comp_expr -> . expression LE expression
    (53) comp_expr -> . expression NE expression
    (54) comp_expr -> . comp_expr AND comp_expr
    (55) comp_expr -> . comp_expr OR comp_expr
    (56) comp_expr -> . NOT expression
    (57) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 23
    LENGTH          shift and go to state 24
    FIND            shift and go to state 25
    LPAREN          shift and go to state 26
    YES             shift and go to state 27
    NO              shift and go to state 28
    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    TEXT            shift and go to state 44
    INPUT           shift and go to state 34
    CALL            shift and go to state 35
    NOT             shift and go to state 36
    RANDOM          shift and go to state 37

    expression                     shift and go to state 112
    comp_expr                      shift and go to state 29
    random_statement               shift and go to state 32

state 72

    (35) expression -> DATATYPE FROM . expression TO expression FROM expression
    (35) expression -> . DATATYPE FROM expression TO expression FROM expression
    (36) expression -> . LENGTH OF expression
    (37) expression -> . FIND OCCURENCES OF expression IN expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression POWER expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . YES
    (47) expression -> . NO
    (58) expression -> . comp_expr
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER
    (61) expression -> . random_statement
    (62) expression -> . TEXT
    (63) expression -> . INPUT
    (64) expression -> . CALL IDENTIFIER
    (65) expression -> . CALL IDENTIFIER items
    (66) expression -> . IDENTIFIER INDEX expression
    (48) comp_expr -> . expression EQ expression
    (49) comp_expr -> . expression GT expression
    (50) comp_expr -> . expression LT expression
    (51) comp_expr -> . expression GE expression
    (52) comp_expr -> . expression LE expression
    (53) comp_expr -> . expression NE expression
    (54) comp_expr -> . comp_expr AND comp_expr
    (55) comp_expr -> . comp_expr OR comp_expr
    (56) comp_expr -> . NOT expression
    (57) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 23
    LENGTH          shift and go to state 24
    FIND            shift and go to state 25
    LPAREN          shift and go to state 26
    YES             shift and go to state 27
    NO              shift and go to state 28
    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    TEXT            shift and go to state 44
    INPUT           shift and go to state 34
    CALL            shift and go to state 35
    NOT             shift and go to state 36
    RANDOM          shift and go to state 37

    expression                     shift and go to state 113
    comp_expr                      shift and go to state 29
    random_statement               shift and go to state 32

state 73

    (36) expression -> LENGTH OF . expression
    (35) expression -> . DATATYPE FROM expression TO expression FROM expression
    (36) expression -> . LENGTH OF expression
    (37) expression -> . FIND OCCURENCES OF expression IN expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression POWER expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . YES
    (47) expression -> . NO
    (58) expression -> . comp_expr
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER
    (61) expression -> . random_statement
    (62) expression -> . TEXT
    (63) expression -> . INPUT
    (64) expression -> . CALL IDENTIFIER
    (65) expression -> . CALL IDENTIFIER items
    (66) expression -> . IDENTIFIER INDEX expression
    (48) comp_expr -> . expression EQ expression
    (49) comp_expr -> . expression GT expression
    (50) comp_expr -> . expression LT expression
    (51) comp_expr -> . expression GE expression
    (52) comp_expr -> . expression LE expression
    (53) comp_expr -> . expression NE expression
    (54) comp_expr -> . comp_expr AND comp_expr
    (55) comp_expr -> . comp_expr OR comp_expr
    (56) comp_expr -> . NOT expression
    (57) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 23
    LENGTH          shift and go to state 24
    FIND            shift and go to state 25
    LPAREN          shift and go to state 26
    YES             shift and go to state 27
    NO              shift and go to state 28
    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    TEXT            shift and go to state 44
    INPUT           shift and go to state 34
    CALL            shift and go to state 35
    NOT             shift and go to state 36
    RANDOM          shift and go to state 37

    expression                     shift and go to state 114
    comp_expr                      shift and go to state 29
    random_statement               shift and go to state 32

state 74

    (37) expression -> FIND OCCURENCES . OF expression IN expression

    OF              shift and go to state 115


state 75

    (45) expression -> LPAREN expression . RPAREN
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . POWER expression
    (48) comp_expr -> expression . EQ expression
    (49) comp_expr -> expression . GT expression
    (50) comp_expr -> expression . LT expression
    (51) comp_expr -> expression . GE expression
    (52) comp_expr -> expression . LE expression
    (53) comp_expr -> expression . NE expression
    (57) comp_expr -> expression . IN expression

    RPAREN          shift and go to state 116
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    POWER           shift and go to state 64
    EQ              shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    GE              shift and go to state 68
    LE              shift and go to state 69
    NE              shift and go to state 70
    IN              shift and go to state 71


state 76

    (54) comp_expr -> comp_expr AND . comp_expr
    (48) comp_expr -> . expression EQ expression
    (49) comp_expr -> . expression GT expression
    (50) comp_expr -> . expression LT expression
    (51) comp_expr -> . expression GE expression
    (52) comp_expr -> . expression LE expression
    (53) comp_expr -> . expression NE expression
    (54) comp_expr -> . comp_expr AND comp_expr
    (55) comp_expr -> . comp_expr OR comp_expr
    (56) comp_expr -> . NOT expression
    (57) comp_expr -> . expression IN expression
    (35) expression -> . DATATYPE FROM expression TO expression FROM expression
    (36) expression -> . LENGTH OF expression
    (37) expression -> . FIND OCCURENCES OF expression IN expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression POWER expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . YES
    (47) expression -> . NO
    (58) expression -> . comp_expr
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER
    (61) expression -> . random_statement
    (62) expression -> . TEXT
    (63) expression -> . INPUT
    (64) expression -> . CALL IDENTIFIER
    (65) expression -> . CALL IDENTIFIER items
    (66) expression -> . IDENTIFIER INDEX expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    NOT             shift and go to state 36
    DATATYPE        shift and go to state 23
    LENGTH          shift and go to state 24
    FIND            shift and go to state 25
    LPAREN          shift and go to state 26
    YES             shift and go to state 27
    NO              shift and go to state 28
    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    TEXT            shift and go to state 44
    INPUT           shift and go to state 34
    CALL            shift and go to state 35
    RANDOM          shift and go to state 37

    comp_expr                      shift and go to state 117
    expression                     shift and go to state 118
    random_statement               shift and go to state 32

state 77

    (55) comp_expr -> comp_expr OR . comp_expr
    (48) comp_expr -> . expression EQ expression
    (49) comp_expr -> . expression GT expression
    (50) comp_expr -> . expression LT expression
    (51) comp_expr -> . expression GE expression
    (52) comp_expr -> . expression LE expression
    (53) comp_expr -> . expression NE expression
    (54) comp_expr -> . comp_expr AND comp_expr
    (55) comp_expr -> . comp_expr OR comp_expr
    (56) comp_expr -> . NOT expression
    (57) comp_expr -> . expression IN expression
    (35) expression -> . DATATYPE FROM expression TO expression FROM expression
    (36) expression -> . LENGTH OF expression
    (37) expression -> . FIND OCCURENCES OF expression IN expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression POWER expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . YES
    (47) expression -> . NO
    (58) expression -> . comp_expr
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER
    (61) expression -> . random_statement
    (62) expression -> . TEXT
    (63) expression -> . INPUT
    (64) expression -> . CALL IDENTIFIER
    (65) expression -> . CALL IDENTIFIER items
    (66) expression -> . IDENTIFIER INDEX expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    NOT             shift and go to state 36
    DATATYPE        shift and go to state 23
    LENGTH          shift and go to state 24
    FIND            shift and go to state 25
    LPAREN          shift and go to state 26
    YES             shift and go to state 27
    NO              shift and go to state 28
    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    TEXT            shift and go to state 44
    INPUT           shift and go to state 34
    CALL            shift and go to state 35
    RANDOM          shift and go to state 37

    comp_expr                      shift and go to state 119
    expression                     shift and go to state 118
    random_statement               shift and go to state 32

state 78

    (66) expression -> IDENTIFIER INDEX . expression
    (35) expression -> . DATATYPE FROM expression TO expression FROM expression
    (36) expression -> . LENGTH OF expression
    (37) expression -> . FIND OCCURENCES OF expression IN expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression POWER expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . YES
    (47) expression -> . NO
    (58) expression -> . comp_expr
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER
    (61) expression -> . random_statement
    (62) expression -> . TEXT
    (63) expression -> . INPUT
    (64) expression -> . CALL IDENTIFIER
    (65) expression -> . CALL IDENTIFIER items
    (66) expression -> . IDENTIFIER INDEX expression
    (48) comp_expr -> . expression EQ expression
    (49) comp_expr -> . expression GT expression
    (50) comp_expr -> . expression LT expression
    (51) comp_expr -> . expression GE expression
    (52) comp_expr -> . expression LE expression
    (53) comp_expr -> . expression NE expression
    (54) comp_expr -> . comp_expr AND comp_expr
    (55) comp_expr -> . comp_expr OR comp_expr
    (56) comp_expr -> . NOT expression
    (57) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 23
    LENGTH          shift and go to state 24
    FIND            shift and go to state 25
    LPAREN          shift and go to state 26
    YES             shift and go to state 27
    NO              shift and go to state 28
    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    TEXT            shift and go to state 44
    INPUT           shift and go to state 34
    CALL            shift and go to state 35
    NOT             shift and go to state 36
    RANDOM          shift and go to state 37

    expression                     shift and go to state 120
    comp_expr                      shift and go to state 29
    random_statement               shift and go to state 32

state 79

    (6) ask -> TEXT EXPECTING . INPUT AND DATATYPE

    INPUT           shift and go to state 121


state 80

    (64) expression -> CALL IDENTIFIER .
    (65) expression -> CALL IDENTIFIER . items
    (38) items -> . expression
    (39) items -> . items expression
    (35) expression -> . DATATYPE FROM expression TO expression FROM expression
    (36) expression -> . LENGTH OF expression
    (37) expression -> . FIND OCCURENCES OF expression IN expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression POWER expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . YES
    (47) expression -> . NO
    (58) expression -> . comp_expr
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER
    (61) expression -> . random_statement
    (62) expression -> . TEXT
    (63) expression -> . INPUT
    (64) expression -> . CALL IDENTIFIER
    (65) expression -> . CALL IDENTIFIER items
    (66) expression -> . IDENTIFIER INDEX expression
    (48) comp_expr -> . expression EQ expression
    (49) comp_expr -> . expression GT expression
    (50) comp_expr -> . expression LT expression
    (51) comp_expr -> . expression GE expression
    (52) comp_expr -> . expression LE expression
    (53) comp_expr -> . expression NE expression
    (54) comp_expr -> . comp_expr AND comp_expr
    (55) comp_expr -> . comp_expr OR comp_expr
    (56) comp_expr -> . NOT expression
    (57) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

  ! shift/reduce conflict for DATATYPE resolved as shift
  ! shift/reduce conflict for LENGTH resolved as shift
  ! shift/reduce conflict for FIND resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for YES resolved as shift
  ! shift/reduce conflict for NO resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TEXT resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for RANDOM resolved as shift
    PLUS            reduce using rule 64 (expression -> CALL IDENTIFIER .)
    MINUS           reduce using rule 64 (expression -> CALL IDENTIFIER .)
    TIMES           reduce using rule 64 (expression -> CALL IDENTIFIER .)
    DIVIDE          reduce using rule 64 (expression -> CALL IDENTIFIER .)
    POWER           reduce using rule 64 (expression -> CALL IDENTIFIER .)
    EQ              reduce using rule 64 (expression -> CALL IDENTIFIER .)
    GT              reduce using rule 64 (expression -> CALL IDENTIFIER .)
    LT              reduce using rule 64 (expression -> CALL IDENTIFIER .)
    GE              reduce using rule 64 (expression -> CALL IDENTIFIER .)
    LE              reduce using rule 64 (expression -> CALL IDENTIFIER .)
    NE              reduce using rule 64 (expression -> CALL IDENTIFIER .)
    IN              reduce using rule 64 (expression -> CALL IDENTIFIER .)
    OUTPUT          reduce using rule 64 (expression -> CALL IDENTIFIER .)
    REPEAT          reduce using rule 64 (expression -> CALL IDENTIFIER .)
    PAUSE           reduce using rule 64 (expression -> CALL IDENTIFIER .)
    FUNCTION        reduce using rule 64 (expression -> CALL IDENTIFIER .)
    WHILE           reduce using rule 64 (expression -> CALL IDENTIFIER .)
    FOREVER         reduce using rule 64 (expression -> CALL IDENTIFIER .)
    EXIT            reduce using rule 64 (expression -> CALL IDENTIFIER .)
    CONVERT         reduce using rule 64 (expression -> CALL IDENTIFIER .)
    RETURN          reduce using rule 64 (expression -> CALL IDENTIFIER .)
    DELETE          reduce using rule 64 (expression -> CALL IDENTIFIER .)
    CLEAR           reduce using rule 64 (expression -> CALL IDENTIFIER .)
    ACTIVATE        reduce using rule 64 (expression -> CALL IDENTIFIER .)
    SET             reduce using rule 64 (expression -> CALL IDENTIFIER .)
    IF              reduce using rule 64 (expression -> CALL IDENTIFIER .)
    $end            reduce using rule 64 (expression -> CALL IDENTIFIER .)
    UNTIL           reduce using rule 64 (expression -> CALL IDENTIFIER .)
    END             reduce using rule 64 (expression -> CALL IDENTIFIER .)
    ELSE            reduce using rule 64 (expression -> CALL IDENTIFIER .)
    DO              reduce using rule 64 (expression -> CALL IDENTIFIER .)
    TO              reduce using rule 64 (expression -> CALL IDENTIFIER .)
    THEN            reduce using rule 64 (expression -> CALL IDENTIFIER .)
    RPAREN          reduce using rule 64 (expression -> CALL IDENTIFIER .)
    AND             reduce using rule 64 (expression -> CALL IDENTIFIER .)
    OR              reduce using rule 64 (expression -> CALL IDENTIFIER .)
    TYPE            reduce using rule 64 (expression -> CALL IDENTIFIER .)
    OF              reduce using rule 64 (expression -> CALL IDENTIFIER .)
    FROM            reduce using rule 64 (expression -> CALL IDENTIFIER .)
    DATATYPE        shift and go to state 23
    LENGTH          shift and go to state 24
    FIND            shift and go to state 25
    LPAREN          shift and go to state 26
    YES             shift and go to state 27
    NO              shift and go to state 28
    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    TEXT            shift and go to state 44
    INPUT           shift and go to state 34
    CALL            shift and go to state 35
    NOT             shift and go to state 36
    RANDOM          shift and go to state 37

  ! CALL            [ reduce using rule 64 (expression -> CALL IDENTIFIER .) ]
  ! DATATYPE        [ reduce using rule 64 (expression -> CALL IDENTIFIER .) ]
  ! LENGTH          [ reduce using rule 64 (expression -> CALL IDENTIFIER .) ]
  ! FIND            [ reduce using rule 64 (expression -> CALL IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 64 (expression -> CALL IDENTIFIER .) ]
  ! YES             [ reduce using rule 64 (expression -> CALL IDENTIFIER .) ]
  ! NO              [ reduce using rule 64 (expression -> CALL IDENTIFIER .) ]
  ! NUMBER          [ reduce using rule 64 (expression -> CALL IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 64 (expression -> CALL IDENTIFIER .) ]
  ! TEXT            [ reduce using rule 64 (expression -> CALL IDENTIFIER .) ]
  ! INPUT           [ reduce using rule 64 (expression -> CALL IDENTIFIER .) ]
  ! NOT             [ reduce using rule 64 (expression -> CALL IDENTIFIER .) ]
  ! RANDOM          [ reduce using rule 64 (expression -> CALL IDENTIFIER .) ]

    items                          shift and go to state 122
    expression                     shift and go to state 96
    comp_expr                      shift and go to state 29
    random_statement               shift and go to state 32

state 81

    (56) comp_expr -> NOT expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . POWER expression
    (48) comp_expr -> expression . EQ expression
    (49) comp_expr -> expression . GT expression
    (50) comp_expr -> expression . LT expression
    (51) comp_expr -> expression . GE expression
    (52) comp_expr -> expression . LE expression
    (53) comp_expr -> expression . NE expression
    (57) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    AND             reduce using rule 56 (comp_expr -> NOT expression .)
    OR              reduce using rule 56 (comp_expr -> NOT expression .)
    OUTPUT          reduce using rule 56 (comp_expr -> NOT expression .)
    REPEAT          reduce using rule 56 (comp_expr -> NOT expression .)
    PAUSE           reduce using rule 56 (comp_expr -> NOT expression .)
    FUNCTION        reduce using rule 56 (comp_expr -> NOT expression .)
    WHILE           reduce using rule 56 (comp_expr -> NOT expression .)
    FOREVER         reduce using rule 56 (comp_expr -> NOT expression .)
    EXIT            reduce using rule 56 (comp_expr -> NOT expression .)
    CONVERT         reduce using rule 56 (comp_expr -> NOT expression .)
    CALL            reduce using rule 56 (comp_expr -> NOT expression .)
    RETURN          reduce using rule 56 (comp_expr -> NOT expression .)
    DELETE          reduce using rule 56 (comp_expr -> NOT expression .)
    CLEAR           reduce using rule 56 (comp_expr -> NOT expression .)
    ACTIVATE        reduce using rule 56 (comp_expr -> NOT expression .)
    SET             reduce using rule 56 (comp_expr -> NOT expression .)
    IF              reduce using rule 56 (comp_expr -> NOT expression .)
    $end            reduce using rule 56 (comp_expr -> NOT expression .)
    UNTIL           reduce using rule 56 (comp_expr -> NOT expression .)
    END             reduce using rule 56 (comp_expr -> NOT expression .)
    ELSE            reduce using rule 56 (comp_expr -> NOT expression .)
    DO              reduce using rule 56 (comp_expr -> NOT expression .)
    TO              reduce using rule 56 (comp_expr -> NOT expression .)
    THEN            reduce using rule 56 (comp_expr -> NOT expression .)
    RPAREN          reduce using rule 56 (comp_expr -> NOT expression .)
    TYPE            reduce using rule 56 (comp_expr -> NOT expression .)
    DATATYPE        reduce using rule 56 (comp_expr -> NOT expression .)
    LENGTH          reduce using rule 56 (comp_expr -> NOT expression .)
    FIND            reduce using rule 56 (comp_expr -> NOT expression .)
    LPAREN          reduce using rule 56 (comp_expr -> NOT expression .)
    YES             reduce using rule 56 (comp_expr -> NOT expression .)
    NO              reduce using rule 56 (comp_expr -> NOT expression .)
    NUMBER          reduce using rule 56 (comp_expr -> NOT expression .)
    IDENTIFIER      reduce using rule 56 (comp_expr -> NOT expression .)
    TEXT            reduce using rule 56 (comp_expr -> NOT expression .)
    INPUT           reduce using rule 56 (comp_expr -> NOT expression .)
    NOT             reduce using rule 56 (comp_expr -> NOT expression .)
    RANDOM          reduce using rule 56 (comp_expr -> NOT expression .)
    OF              reduce using rule 56 (comp_expr -> NOT expression .)
    FROM            reduce using rule 56 (comp_expr -> NOT expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    POWER           shift and go to state 64
    EQ              shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    GE              shift and go to state 68
    LE              shift and go to state 69
    NE              shift and go to state 70
    IN              shift and go to state 71

  ! PLUS            [ reduce using rule 56 (comp_expr -> NOT expression .) ]
  ! MINUS           [ reduce using rule 56 (comp_expr -> NOT expression .) ]
  ! TIMES           [ reduce using rule 56 (comp_expr -> NOT expression .) ]
  ! DIVIDE          [ reduce using rule 56 (comp_expr -> NOT expression .) ]
  ! POWER           [ reduce using rule 56 (comp_expr -> NOT expression .) ]
  ! EQ              [ reduce using rule 56 (comp_expr -> NOT expression .) ]
  ! GT              [ reduce using rule 56 (comp_expr -> NOT expression .) ]
  ! LT              [ reduce using rule 56 (comp_expr -> NOT expression .) ]
  ! GE              [ reduce using rule 56 (comp_expr -> NOT expression .) ]
  ! LE              [ reduce using rule 56 (comp_expr -> NOT expression .) ]
  ! NE              [ reduce using rule 56 (comp_expr -> NOT expression .) ]
  ! IN              [ reduce using rule 56 (comp_expr -> NOT expression .) ]


state 82

    (7) random_statement -> RANDOM DATATYPE . FROM expression TO expression

    FROM            shift and go to state 123


state 83

    (9) statement -> var_assignment TO expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . POWER expression
    (38) items -> expression .
    (48) comp_expr -> expression . EQ expression
    (49) comp_expr -> expression . GT expression
    (50) comp_expr -> expression . LT expression
    (51) comp_expr -> expression . GE expression
    (52) comp_expr -> expression . LE expression
    (53) comp_expr -> expression . NE expression
    (57) comp_expr -> expression . IN expression

  ! reduce/reduce conflict for CALL resolved using rule 9 (statement -> var_assignment TO expression .)
    OUTPUT          reduce using rule 9 (statement -> var_assignment TO expression .)
    REPEAT          reduce using rule 9 (statement -> var_assignment TO expression .)
    PAUSE           reduce using rule 9 (statement -> var_assignment TO expression .)
    FUNCTION        reduce using rule 9 (statement -> var_assignment TO expression .)
    WHILE           reduce using rule 9 (statement -> var_assignment TO expression .)
    FOREVER         reduce using rule 9 (statement -> var_assignment TO expression .)
    EXIT            reduce using rule 9 (statement -> var_assignment TO expression .)
    CONVERT         reduce using rule 9 (statement -> var_assignment TO expression .)
    CALL            reduce using rule 9 (statement -> var_assignment TO expression .)
    RETURN          reduce using rule 9 (statement -> var_assignment TO expression .)
    DELETE          reduce using rule 9 (statement -> var_assignment TO expression .)
    CLEAR           reduce using rule 9 (statement -> var_assignment TO expression .)
    ACTIVATE        reduce using rule 9 (statement -> var_assignment TO expression .)
    SET             reduce using rule 9 (statement -> var_assignment TO expression .)
    IF              reduce using rule 9 (statement -> var_assignment TO expression .)
    $end            reduce using rule 9 (statement -> var_assignment TO expression .)
    UNTIL           reduce using rule 9 (statement -> var_assignment TO expression .)
    END             reduce using rule 9 (statement -> var_assignment TO expression .)
    ELSE            reduce using rule 9 (statement -> var_assignment TO expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    POWER           shift and go to state 64
    TYPE            reduce using rule 38 (items -> expression .)
    DATATYPE        reduce using rule 38 (items -> expression .)
    LENGTH          reduce using rule 38 (items -> expression .)
    FIND            reduce using rule 38 (items -> expression .)
    LPAREN          reduce using rule 38 (items -> expression .)
    YES             reduce using rule 38 (items -> expression .)
    NO              reduce using rule 38 (items -> expression .)
    NUMBER          reduce using rule 38 (items -> expression .)
    IDENTIFIER      reduce using rule 38 (items -> expression .)
    TEXT            reduce using rule 38 (items -> expression .)
    INPUT           reduce using rule 38 (items -> expression .)
    NOT             reduce using rule 38 (items -> expression .)
    RANDOM          reduce using rule 38 (items -> expression .)
    EQ              shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    GE              shift and go to state 68
    LE              shift and go to state 69
    NE              shift and go to state 70
    IN              shift and go to state 71

  ! CALL            [ reduce using rule 38 (items -> expression .) ]


state 84

    (11) statement -> var_assignment TO ask .

    OUTPUT          reduce using rule 11 (statement -> var_assignment TO ask .)
    REPEAT          reduce using rule 11 (statement -> var_assignment TO ask .)
    PAUSE           reduce using rule 11 (statement -> var_assignment TO ask .)
    FUNCTION        reduce using rule 11 (statement -> var_assignment TO ask .)
    WHILE           reduce using rule 11 (statement -> var_assignment TO ask .)
    FOREVER         reduce using rule 11 (statement -> var_assignment TO ask .)
    EXIT            reduce using rule 11 (statement -> var_assignment TO ask .)
    CONVERT         reduce using rule 11 (statement -> var_assignment TO ask .)
    CALL            reduce using rule 11 (statement -> var_assignment TO ask .)
    RETURN          reduce using rule 11 (statement -> var_assignment TO ask .)
    DELETE          reduce using rule 11 (statement -> var_assignment TO ask .)
    CLEAR           reduce using rule 11 (statement -> var_assignment TO ask .)
    ACTIVATE        reduce using rule 11 (statement -> var_assignment TO ask .)
    SET             reduce using rule 11 (statement -> var_assignment TO ask .)
    IF              reduce using rule 11 (statement -> var_assignment TO ask .)
    $end            reduce using rule 11 (statement -> var_assignment TO ask .)
    UNTIL           reduce using rule 11 (statement -> var_assignment TO ask .)
    END             reduce using rule 11 (statement -> var_assignment TO ask .)
    ELSE            reduce using rule 11 (statement -> var_assignment TO ask .)


state 85

    (12) statement -> var_assignment TO items . type_stmt
    (39) items -> items . expression
    (18) type_stmt -> . TYPE DATATYPE
    (35) expression -> . DATATYPE FROM expression TO expression FROM expression
    (36) expression -> . LENGTH OF expression
    (37) expression -> . FIND OCCURENCES OF expression IN expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression POWER expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . YES
    (47) expression -> . NO
    (58) expression -> . comp_expr
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER
    (61) expression -> . random_statement
    (62) expression -> . TEXT
    (63) expression -> . INPUT
    (64) expression -> . CALL IDENTIFIER
    (65) expression -> . CALL IDENTIFIER items
    (66) expression -> . IDENTIFIER INDEX expression
    (48) comp_expr -> . expression EQ expression
    (49) comp_expr -> . expression GT expression
    (50) comp_expr -> . expression LT expression
    (51) comp_expr -> . expression GE expression
    (52) comp_expr -> . expression LE expression
    (53) comp_expr -> . expression NE expression
    (54) comp_expr -> . comp_expr AND comp_expr
    (55) comp_expr -> . comp_expr OR comp_expr
    (56) comp_expr -> . NOT expression
    (57) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    TYPE            shift and go to state 126
    DATATYPE        shift and go to state 23
    LENGTH          shift and go to state 24
    FIND            shift and go to state 25
    LPAREN          shift and go to state 26
    YES             shift and go to state 27
    NO              shift and go to state 28
    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    TEXT            shift and go to state 44
    INPUT           shift and go to state 34
    CALL            shift and go to state 35
    NOT             shift and go to state 36
    RANDOM          shift and go to state 37

    type_stmt                      shift and go to state 124
    expression                     shift and go to state 125
    comp_expr                      shift and go to state 29
    random_statement               shift and go to state 32

state 86

    (15) statement -> if_then ELSE THEN . statements end_statement
    (1) statements -> . statement
    (2) statements -> . statements statement
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . FUNCTION IDENTIFIER WITH arguments MEANS statements end_statement
    (21) statement -> . WHILE expression DO statements end_statement
    (22) statement -> . FOREVER DO statements end_statement
    (23) statement -> . EXIT LOOP
    (24) statement -> . CONVERT expression TO TYPE DATATYPE
    (25) statement -> . CALL IDENTIFIER
    (26) statement -> . CALL IDENTIFIER items
    (27) statement -> . RETURN expression
    (28) statement -> . DELETE DATATYPE IDENTIFIER
    (29) statement -> . DELETE INDEX expression OF DATATYPE IDENTIFIER
    (30) statement -> . CLEAR DATATYPE IDENTIFIER
    (31) statement -> . ACTIVATE TEXT
    (32) statement -> . REPEAT expression TIMES USING IDENTIFIER statements end_statement
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    FOREVER         shift and go to state 10
    EXIT            shift and go to state 11
    CONVERT         shift and go to state 12
    CALL            shift and go to state 13
    RETURN          shift and go to state 14
    DELETE          shift and go to state 15
    CLEAR           shift and go to state 16
    ACTIVATE        shift and go to state 17
    SET             shift and go to state 18
    IF              shift and go to state 19

    if_then                        shift and go to state 5
    statements                     shift and go to state 127
    statement                      shift and go to state 2
    var_assignment                 shift and go to state 4

state 87

    (16) statement -> REPEAT statements UNTIL . expression
    (35) expression -> . DATATYPE FROM expression TO expression FROM expression
    (36) expression -> . LENGTH OF expression
    (37) expression -> . FIND OCCURENCES OF expression IN expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression POWER expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . YES
    (47) expression -> . NO
    (58) expression -> . comp_expr
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER
    (61) expression -> . random_statement
    (62) expression -> . TEXT
    (63) expression -> . INPUT
    (64) expression -> . CALL IDENTIFIER
    (65) expression -> . CALL IDENTIFIER items
    (66) expression -> . IDENTIFIER INDEX expression
    (48) comp_expr -> . expression EQ expression
    (49) comp_expr -> . expression GT expression
    (50) comp_expr -> . expression LT expression
    (51) comp_expr -> . expression GE expression
    (52) comp_expr -> . expression LE expression
    (53) comp_expr -> . expression NE expression
    (54) comp_expr -> . comp_expr AND comp_expr
    (55) comp_expr -> . comp_expr OR comp_expr
    (56) comp_expr -> . NOT expression
    (57) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 23
    LENGTH          shift and go to state 24
    FIND            shift and go to state 25
    LPAREN          shift and go to state 26
    YES             shift and go to state 27
    NO              shift and go to state 28
    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    TEXT            shift and go to state 44
    INPUT           shift and go to state 34
    CALL            shift and go to state 35
    NOT             shift and go to state 36
    RANDOM          shift and go to state 37

    expression                     shift and go to state 128
    comp_expr                      shift and go to state 29
    random_statement               shift and go to state 32

state 88

    (32) statement -> REPEAT expression TIMES . USING IDENTIFIER statements end_statement
    (42) expression -> expression TIMES . expression
    (35) expression -> . DATATYPE FROM expression TO expression FROM expression
    (36) expression -> . LENGTH OF expression
    (37) expression -> . FIND OCCURENCES OF expression IN expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression POWER expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . YES
    (47) expression -> . NO
    (58) expression -> . comp_expr
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER
    (61) expression -> . random_statement
    (62) expression -> . TEXT
    (63) expression -> . INPUT
    (64) expression -> . CALL IDENTIFIER
    (65) expression -> . CALL IDENTIFIER items
    (66) expression -> . IDENTIFIER INDEX expression
    (48) comp_expr -> . expression EQ expression
    (49) comp_expr -> . expression GT expression
    (50) comp_expr -> . expression LT expression
    (51) comp_expr -> . expression GE expression
    (52) comp_expr -> . expression LE expression
    (53) comp_expr -> . expression NE expression
    (54) comp_expr -> . comp_expr AND comp_expr
    (55) comp_expr -> . comp_expr OR comp_expr
    (56) comp_expr -> . NOT expression
    (57) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    USING           shift and go to state 129
    DATATYPE        shift and go to state 23
    LENGTH          shift and go to state 24
    FIND            shift and go to state 25
    LPAREN          shift and go to state 26
    YES             shift and go to state 27
    NO              shift and go to state 28
    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    TEXT            shift and go to state 44
    INPUT           shift and go to state 34
    CALL            shift and go to state 35
    NOT             shift and go to state 36
    RANDOM          shift and go to state 37

    expression                     shift and go to state 103
    comp_expr                      shift and go to state 29
    random_statement               shift and go to state 32

state 89

    (64) expression -> CALL IDENTIFIER .
    (65) expression -> CALL IDENTIFIER . items
    (25) statement -> CALL IDENTIFIER .
    (26) statement -> CALL IDENTIFIER . items
    (38) items -> . expression
    (39) items -> . items expression
    (35) expression -> . DATATYPE FROM expression TO expression FROM expression
    (36) expression -> . LENGTH OF expression
    (37) expression -> . FIND OCCURENCES OF expression IN expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression POWER expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . YES
    (47) expression -> . NO
    (58) expression -> . comp_expr
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER
    (61) expression -> . random_statement
    (62) expression -> . TEXT
    (63) expression -> . INPUT
    (64) expression -> . CALL IDENTIFIER
    (65) expression -> . CALL IDENTIFIER items
    (66) expression -> . IDENTIFIER INDEX expression
    (48) comp_expr -> . expression EQ expression
    (49) comp_expr -> . expression GT expression
    (50) comp_expr -> . expression LT expression
    (51) comp_expr -> . expression GE expression
    (52) comp_expr -> . expression LE expression
    (53) comp_expr -> . expression NE expression
    (54) comp_expr -> . comp_expr AND comp_expr
    (55) comp_expr -> . comp_expr OR comp_expr
    (56) comp_expr -> . NOT expression
    (57) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

  ! shift/reduce conflict for CALL resolved as shift
    TIMES           reduce using rule 64 (expression -> CALL IDENTIFIER .)
    PLUS            reduce using rule 64 (expression -> CALL IDENTIFIER .)
    MINUS           reduce using rule 64 (expression -> CALL IDENTIFIER .)
    DIVIDE          reduce using rule 64 (expression -> CALL IDENTIFIER .)
    POWER           reduce using rule 64 (expression -> CALL IDENTIFIER .)
    EQ              reduce using rule 64 (expression -> CALL IDENTIFIER .)
    GT              reduce using rule 64 (expression -> CALL IDENTIFIER .)
    LT              reduce using rule 64 (expression -> CALL IDENTIFIER .)
    GE              reduce using rule 64 (expression -> CALL IDENTIFIER .)
    LE              reduce using rule 64 (expression -> CALL IDENTIFIER .)
    NE              reduce using rule 64 (expression -> CALL IDENTIFIER .)
    IN              reduce using rule 64 (expression -> CALL IDENTIFIER .)
    UNTIL           reduce using rule 25 (statement -> CALL IDENTIFIER .)
    OUTPUT          reduce using rule 25 (statement -> CALL IDENTIFIER .)
    REPEAT          reduce using rule 25 (statement -> CALL IDENTIFIER .)
    PAUSE           reduce using rule 25 (statement -> CALL IDENTIFIER .)
    FUNCTION        reduce using rule 25 (statement -> CALL IDENTIFIER .)
    WHILE           reduce using rule 25 (statement -> CALL IDENTIFIER .)
    FOREVER         reduce using rule 25 (statement -> CALL IDENTIFIER .)
    EXIT            reduce using rule 25 (statement -> CALL IDENTIFIER .)
    CONVERT         reduce using rule 25 (statement -> CALL IDENTIFIER .)
    RETURN          reduce using rule 25 (statement -> CALL IDENTIFIER .)
    DELETE          reduce using rule 25 (statement -> CALL IDENTIFIER .)
    CLEAR           reduce using rule 25 (statement -> CALL IDENTIFIER .)
    ACTIVATE        reduce using rule 25 (statement -> CALL IDENTIFIER .)
    SET             reduce using rule 25 (statement -> CALL IDENTIFIER .)
    IF              reduce using rule 25 (statement -> CALL IDENTIFIER .)
    DATATYPE        shift and go to state 23
    LENGTH          shift and go to state 24
    FIND            shift and go to state 25
    LPAREN          shift and go to state 26
    YES             shift and go to state 27
    NO              shift and go to state 28
    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    TEXT            shift and go to state 44
    INPUT           shift and go to state 34
    CALL            shift and go to state 35
    NOT             shift and go to state 36
    RANDOM          shift and go to state 37

  ! CALL            [ reduce using rule 25 (statement -> CALL IDENTIFIER .) ]

    items                          shift and go to state 130
    expression                     shift and go to state 96
    comp_expr                      shift and go to state 29
    random_statement               shift and go to state 32

state 90

    (19) statement -> FUNCTION IDENTIFIER MEANS . statements end_statement
    (1) statements -> . statement
    (2) statements -> . statements statement
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . FUNCTION IDENTIFIER WITH arguments MEANS statements end_statement
    (21) statement -> . WHILE expression DO statements end_statement
    (22) statement -> . FOREVER DO statements end_statement
    (23) statement -> . EXIT LOOP
    (24) statement -> . CONVERT expression TO TYPE DATATYPE
    (25) statement -> . CALL IDENTIFIER
    (26) statement -> . CALL IDENTIFIER items
    (27) statement -> . RETURN expression
    (28) statement -> . DELETE DATATYPE IDENTIFIER
    (29) statement -> . DELETE INDEX expression OF DATATYPE IDENTIFIER
    (30) statement -> . CLEAR DATATYPE IDENTIFIER
    (31) statement -> . ACTIVATE TEXT
    (32) statement -> . REPEAT expression TIMES USING IDENTIFIER statements end_statement
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    FOREVER         shift and go to state 10
    EXIT            shift and go to state 11
    CONVERT         shift and go to state 12
    CALL            shift and go to state 13
    RETURN          shift and go to state 14
    DELETE          shift and go to state 15
    CLEAR           shift and go to state 16
    ACTIVATE        shift and go to state 17
    SET             shift and go to state 18
    IF              shift and go to state 19

    statements                     shift and go to state 131
    statement                      shift and go to state 2
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 91

    (20) statement -> FUNCTION IDENTIFIER WITH . arguments MEANS statements end_statement
    (33) arguments -> . IDENTIFIER
    (34) arguments -> . arguments IDENTIFIER

    IDENTIFIER      shift and go to state 132

    arguments                      shift and go to state 133

state 92

    (21) statement -> WHILE expression DO . statements end_statement
    (1) statements -> . statement
    (2) statements -> . statements statement
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . FUNCTION IDENTIFIER WITH arguments MEANS statements end_statement
    (21) statement -> . WHILE expression DO statements end_statement
    (22) statement -> . FOREVER DO statements end_statement
    (23) statement -> . EXIT LOOP
    (24) statement -> . CONVERT expression TO TYPE DATATYPE
    (25) statement -> . CALL IDENTIFIER
    (26) statement -> . CALL IDENTIFIER items
    (27) statement -> . RETURN expression
    (28) statement -> . DELETE DATATYPE IDENTIFIER
    (29) statement -> . DELETE INDEX expression OF DATATYPE IDENTIFIER
    (30) statement -> . CLEAR DATATYPE IDENTIFIER
    (31) statement -> . ACTIVATE TEXT
    (32) statement -> . REPEAT expression TIMES USING IDENTIFIER statements end_statement
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    FOREVER         shift and go to state 10
    EXIT            shift and go to state 11
    CONVERT         shift and go to state 12
    CALL            shift and go to state 13
    RETURN          shift and go to state 14
    DELETE          shift and go to state 15
    CLEAR           shift and go to state 16
    ACTIVATE        shift and go to state 17
    SET             shift and go to state 18
    IF              shift and go to state 19

    statements                     shift and go to state 134
    statement                      shift and go to state 2
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 93

    (22) statement -> FOREVER DO statements . end_statement
    (2) statements -> statements . statement
    (3) end_statement -> . END
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . FUNCTION IDENTIFIER WITH arguments MEANS statements end_statement
    (21) statement -> . WHILE expression DO statements end_statement
    (22) statement -> . FOREVER DO statements end_statement
    (23) statement -> . EXIT LOOP
    (24) statement -> . CONVERT expression TO TYPE DATATYPE
    (25) statement -> . CALL IDENTIFIER
    (26) statement -> . CALL IDENTIFIER items
    (27) statement -> . RETURN expression
    (28) statement -> . DELETE DATATYPE IDENTIFIER
    (29) statement -> . DELETE INDEX expression OF DATATYPE IDENTIFIER
    (30) statement -> . CLEAR DATATYPE IDENTIFIER
    (31) statement -> . ACTIVATE TEXT
    (32) statement -> . REPEAT expression TIMES USING IDENTIFIER statements end_statement
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    END             shift and go to state 41
    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    FOREVER         shift and go to state 10
    EXIT            shift and go to state 11
    CONVERT         shift and go to state 12
    CALL            shift and go to state 13
    RETURN          shift and go to state 14
    DELETE          shift and go to state 15
    CLEAR           shift and go to state 16
    ACTIVATE        shift and go to state 17
    SET             shift and go to state 18
    IF              shift and go to state 19

    end_statement                  shift and go to state 135
    statement                      shift and go to state 20
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 94

    (24) statement -> CONVERT expression TO . TYPE DATATYPE

    TYPE            shift and go to state 136


state 95

    (26) statement -> CALL IDENTIFIER items .
    (39) items -> items . expression
    (35) expression -> . DATATYPE FROM expression TO expression FROM expression
    (36) expression -> . LENGTH OF expression
    (37) expression -> . FIND OCCURENCES OF expression IN expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression POWER expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . YES
    (47) expression -> . NO
    (58) expression -> . comp_expr
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER
    (61) expression -> . random_statement
    (62) expression -> . TEXT
    (63) expression -> . INPUT
    (64) expression -> . CALL IDENTIFIER
    (65) expression -> . CALL IDENTIFIER items
    (66) expression -> . IDENTIFIER INDEX expression
    (48) comp_expr -> . expression EQ expression
    (49) comp_expr -> . expression GT expression
    (50) comp_expr -> . expression LT expression
    (51) comp_expr -> . expression GE expression
    (52) comp_expr -> . expression LE expression
    (53) comp_expr -> . expression NE expression
    (54) comp_expr -> . comp_expr AND comp_expr
    (55) comp_expr -> . comp_expr OR comp_expr
    (56) comp_expr -> . NOT expression
    (57) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

  ! shift/reduce conflict for CALL resolved as shift
    OUTPUT          reduce using rule 26 (statement -> CALL IDENTIFIER items .)
    REPEAT          reduce using rule 26 (statement -> CALL IDENTIFIER items .)
    PAUSE           reduce using rule 26 (statement -> CALL IDENTIFIER items .)
    FUNCTION        reduce using rule 26 (statement -> CALL IDENTIFIER items .)
    WHILE           reduce using rule 26 (statement -> CALL IDENTIFIER items .)
    FOREVER         reduce using rule 26 (statement -> CALL IDENTIFIER items .)
    EXIT            reduce using rule 26 (statement -> CALL IDENTIFIER items .)
    CONVERT         reduce using rule 26 (statement -> CALL IDENTIFIER items .)
    RETURN          reduce using rule 26 (statement -> CALL IDENTIFIER items .)
    DELETE          reduce using rule 26 (statement -> CALL IDENTIFIER items .)
    CLEAR           reduce using rule 26 (statement -> CALL IDENTIFIER items .)
    ACTIVATE        reduce using rule 26 (statement -> CALL IDENTIFIER items .)
    SET             reduce using rule 26 (statement -> CALL IDENTIFIER items .)
    IF              reduce using rule 26 (statement -> CALL IDENTIFIER items .)
    $end            reduce using rule 26 (statement -> CALL IDENTIFIER items .)
    UNTIL           reduce using rule 26 (statement -> CALL IDENTIFIER items .)
    END             reduce using rule 26 (statement -> CALL IDENTIFIER items .)
    ELSE            reduce using rule 26 (statement -> CALL IDENTIFIER items .)
    DATATYPE        shift and go to state 23
    LENGTH          shift and go to state 24
    FIND            shift and go to state 25
    LPAREN          shift and go to state 26
    YES             shift and go to state 27
    NO              shift and go to state 28
    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    TEXT            shift and go to state 44
    INPUT           shift and go to state 34
    CALL            shift and go to state 35
    NOT             shift and go to state 36
    RANDOM          shift and go to state 37

  ! CALL            [ reduce using rule 26 (statement -> CALL IDENTIFIER items .) ]

    expression                     shift and go to state 125
    comp_expr                      shift and go to state 29
    random_statement               shift and go to state 32

state 96

    (38) items -> expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . POWER expression
    (48) comp_expr -> expression . EQ expression
    (49) comp_expr -> expression . GT expression
    (50) comp_expr -> expression . LT expression
    (51) comp_expr -> expression . GE expression
    (52) comp_expr -> expression . LE expression
    (53) comp_expr -> expression . NE expression
    (57) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    DATATYPE        reduce using rule 38 (items -> expression .)
    LENGTH          reduce using rule 38 (items -> expression .)
    FIND            reduce using rule 38 (items -> expression .)
    LPAREN          reduce using rule 38 (items -> expression .)
    YES             reduce using rule 38 (items -> expression .)
    NO              reduce using rule 38 (items -> expression .)
    NUMBER          reduce using rule 38 (items -> expression .)
    IDENTIFIER      reduce using rule 38 (items -> expression .)
    TEXT            reduce using rule 38 (items -> expression .)
    INPUT           reduce using rule 38 (items -> expression .)
    CALL            reduce using rule 38 (items -> expression .)
    NOT             reduce using rule 38 (items -> expression .)
    RANDOM          reduce using rule 38 (items -> expression .)
    OUTPUT          reduce using rule 38 (items -> expression .)
    REPEAT          reduce using rule 38 (items -> expression .)
    PAUSE           reduce using rule 38 (items -> expression .)
    FUNCTION        reduce using rule 38 (items -> expression .)
    WHILE           reduce using rule 38 (items -> expression .)
    FOREVER         reduce using rule 38 (items -> expression .)
    EXIT            reduce using rule 38 (items -> expression .)
    CONVERT         reduce using rule 38 (items -> expression .)
    RETURN          reduce using rule 38 (items -> expression .)
    DELETE          reduce using rule 38 (items -> expression .)
    CLEAR           reduce using rule 38 (items -> expression .)
    ACTIVATE        reduce using rule 38 (items -> expression .)
    SET             reduce using rule 38 (items -> expression .)
    IF              reduce using rule 38 (items -> expression .)
    $end            reduce using rule 38 (items -> expression .)
    UNTIL           reduce using rule 38 (items -> expression .)
    END             reduce using rule 38 (items -> expression .)
    ELSE            reduce using rule 38 (items -> expression .)
    AND             reduce using rule 38 (items -> expression .)
    OR              reduce using rule 38 (items -> expression .)
    DO              reduce using rule 38 (items -> expression .)
    TO              reduce using rule 38 (items -> expression .)
    THEN            reduce using rule 38 (items -> expression .)
    RPAREN          reduce using rule 38 (items -> expression .)
    TYPE            reduce using rule 38 (items -> expression .)
    OF              reduce using rule 38 (items -> expression .)
    FROM            reduce using rule 38 (items -> expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    POWER           shift and go to state 64
    EQ              shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    GE              shift and go to state 68
    LE              shift and go to state 69
    NE              shift and go to state 70
    IN              shift and go to state 71

  ! PLUS            [ reduce using rule 38 (items -> expression .) ]
  ! MINUS           [ reduce using rule 38 (items -> expression .) ]
  ! TIMES           [ reduce using rule 38 (items -> expression .) ]
  ! DIVIDE          [ reduce using rule 38 (items -> expression .) ]
  ! POWER           [ reduce using rule 38 (items -> expression .) ]
  ! EQ              [ reduce using rule 38 (items -> expression .) ]
  ! GT              [ reduce using rule 38 (items -> expression .) ]
  ! LT              [ reduce using rule 38 (items -> expression .) ]
  ! GE              [ reduce using rule 38 (items -> expression .) ]
  ! LE              [ reduce using rule 38 (items -> expression .) ]
  ! NE              [ reduce using rule 38 (items -> expression .) ]
  ! IN              [ reduce using rule 38 (items -> expression .) ]


state 97

    (28) statement -> DELETE DATATYPE IDENTIFIER .

    OUTPUT          reduce using rule 28 (statement -> DELETE DATATYPE IDENTIFIER .)
    REPEAT          reduce using rule 28 (statement -> DELETE DATATYPE IDENTIFIER .)
    PAUSE           reduce using rule 28 (statement -> DELETE DATATYPE IDENTIFIER .)
    FUNCTION        reduce using rule 28 (statement -> DELETE DATATYPE IDENTIFIER .)
    WHILE           reduce using rule 28 (statement -> DELETE DATATYPE IDENTIFIER .)
    FOREVER         reduce using rule 28 (statement -> DELETE DATATYPE IDENTIFIER .)
    EXIT            reduce using rule 28 (statement -> DELETE DATATYPE IDENTIFIER .)
    CONVERT         reduce using rule 28 (statement -> DELETE DATATYPE IDENTIFIER .)
    CALL            reduce using rule 28 (statement -> DELETE DATATYPE IDENTIFIER .)
    RETURN          reduce using rule 28 (statement -> DELETE DATATYPE IDENTIFIER .)
    DELETE          reduce using rule 28 (statement -> DELETE DATATYPE IDENTIFIER .)
    CLEAR           reduce using rule 28 (statement -> DELETE DATATYPE IDENTIFIER .)
    ACTIVATE        reduce using rule 28 (statement -> DELETE DATATYPE IDENTIFIER .)
    SET             reduce using rule 28 (statement -> DELETE DATATYPE IDENTIFIER .)
    IF              reduce using rule 28 (statement -> DELETE DATATYPE IDENTIFIER .)
    $end            reduce using rule 28 (statement -> DELETE DATATYPE IDENTIFIER .)
    UNTIL           reduce using rule 28 (statement -> DELETE DATATYPE IDENTIFIER .)
    END             reduce using rule 28 (statement -> DELETE DATATYPE IDENTIFIER .)
    ELSE            reduce using rule 28 (statement -> DELETE DATATYPE IDENTIFIER .)


state 98

    (29) statement -> DELETE INDEX expression . OF DATATYPE IDENTIFIER
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . POWER expression
    (48) comp_expr -> expression . EQ expression
    (49) comp_expr -> expression . GT expression
    (50) comp_expr -> expression . LT expression
    (51) comp_expr -> expression . GE expression
    (52) comp_expr -> expression . LE expression
    (53) comp_expr -> expression . NE expression
    (57) comp_expr -> expression . IN expression

    OF              shift and go to state 137
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    POWER           shift and go to state 64
    EQ              shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    GE              shift and go to state 68
    LE              shift and go to state 69
    NE              shift and go to state 70
    IN              shift and go to state 71


state 99

    (30) statement -> CLEAR DATATYPE IDENTIFIER .

    OUTPUT          reduce using rule 30 (statement -> CLEAR DATATYPE IDENTIFIER .)
    REPEAT          reduce using rule 30 (statement -> CLEAR DATATYPE IDENTIFIER .)
    PAUSE           reduce using rule 30 (statement -> CLEAR DATATYPE IDENTIFIER .)
    FUNCTION        reduce using rule 30 (statement -> CLEAR DATATYPE IDENTIFIER .)
    WHILE           reduce using rule 30 (statement -> CLEAR DATATYPE IDENTIFIER .)
    FOREVER         reduce using rule 30 (statement -> CLEAR DATATYPE IDENTIFIER .)
    EXIT            reduce using rule 30 (statement -> CLEAR DATATYPE IDENTIFIER .)
    CONVERT         reduce using rule 30 (statement -> CLEAR DATATYPE IDENTIFIER .)
    CALL            reduce using rule 30 (statement -> CLEAR DATATYPE IDENTIFIER .)
    RETURN          reduce using rule 30 (statement -> CLEAR DATATYPE IDENTIFIER .)
    DELETE          reduce using rule 30 (statement -> CLEAR DATATYPE IDENTIFIER .)
    CLEAR           reduce using rule 30 (statement -> CLEAR DATATYPE IDENTIFIER .)
    ACTIVATE        reduce using rule 30 (statement -> CLEAR DATATYPE IDENTIFIER .)
    SET             reduce using rule 30 (statement -> CLEAR DATATYPE IDENTIFIER .)
    IF              reduce using rule 30 (statement -> CLEAR DATATYPE IDENTIFIER .)
    $end            reduce using rule 30 (statement -> CLEAR DATATYPE IDENTIFIER .)
    UNTIL           reduce using rule 30 (statement -> CLEAR DATATYPE IDENTIFIER .)
    END             reduce using rule 30 (statement -> CLEAR DATATYPE IDENTIFIER .)
    ELSE            reduce using rule 30 (statement -> CLEAR DATATYPE IDENTIFIER .)


state 100

    (13) if_then -> IF expression THEN . statements
    (1) statements -> . statement
    (2) statements -> . statements statement
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . FUNCTION IDENTIFIER WITH arguments MEANS statements end_statement
    (21) statement -> . WHILE expression DO statements end_statement
    (22) statement -> . FOREVER DO statements end_statement
    (23) statement -> . EXIT LOOP
    (24) statement -> . CONVERT expression TO TYPE DATATYPE
    (25) statement -> . CALL IDENTIFIER
    (26) statement -> . CALL IDENTIFIER items
    (27) statement -> . RETURN expression
    (28) statement -> . DELETE DATATYPE IDENTIFIER
    (29) statement -> . DELETE INDEX expression OF DATATYPE IDENTIFIER
    (30) statement -> . CLEAR DATATYPE IDENTIFIER
    (31) statement -> . ACTIVATE TEXT
    (32) statement -> . REPEAT expression TIMES USING IDENTIFIER statements end_statement
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    FOREVER         shift and go to state 10
    EXIT            shift and go to state 11
    CONVERT         shift and go to state 12
    CALL            shift and go to state 13
    RETURN          shift and go to state 14
    DELETE          shift and go to state 15
    CLEAR           shift and go to state 16
    ACTIVATE        shift and go to state 17
    SET             shift and go to state 18
    IF              shift and go to state 19

    statements                     shift and go to state 138
    statement                      shift and go to state 2
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 101

    (40) expression -> expression PLUS expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . POWER expression
    (48) comp_expr -> expression . EQ expression
    (49) comp_expr -> expression . GT expression
    (50) comp_expr -> expression . LT expression
    (51) comp_expr -> expression . GE expression
    (52) comp_expr -> expression . LE expression
    (53) comp_expr -> expression . NE expression
    (57) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    OUTPUT          reduce using rule 40 (expression -> expression PLUS expression .)
    REPEAT          reduce using rule 40 (expression -> expression PLUS expression .)
    PAUSE           reduce using rule 40 (expression -> expression PLUS expression .)
    FUNCTION        reduce using rule 40 (expression -> expression PLUS expression .)
    WHILE           reduce using rule 40 (expression -> expression PLUS expression .)
    FOREVER         reduce using rule 40 (expression -> expression PLUS expression .)
    EXIT            reduce using rule 40 (expression -> expression PLUS expression .)
    CONVERT         reduce using rule 40 (expression -> expression PLUS expression .)
    CALL            reduce using rule 40 (expression -> expression PLUS expression .)
    RETURN          reduce using rule 40 (expression -> expression PLUS expression .)
    DELETE          reduce using rule 40 (expression -> expression PLUS expression .)
    CLEAR           reduce using rule 40 (expression -> expression PLUS expression .)
    ACTIVATE        reduce using rule 40 (expression -> expression PLUS expression .)
    SET             reduce using rule 40 (expression -> expression PLUS expression .)
    IF              reduce using rule 40 (expression -> expression PLUS expression .)
    $end            reduce using rule 40 (expression -> expression PLUS expression .)
    UNTIL           reduce using rule 40 (expression -> expression PLUS expression .)
    END             reduce using rule 40 (expression -> expression PLUS expression .)
    ELSE            reduce using rule 40 (expression -> expression PLUS expression .)
    DO              reduce using rule 40 (expression -> expression PLUS expression .)
    TO              reduce using rule 40 (expression -> expression PLUS expression .)
    THEN            reduce using rule 40 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 40 (expression -> expression PLUS expression .)
    AND             reduce using rule 40 (expression -> expression PLUS expression .)
    OR              reduce using rule 40 (expression -> expression PLUS expression .)
    TYPE            reduce using rule 40 (expression -> expression PLUS expression .)
    DATATYPE        reduce using rule 40 (expression -> expression PLUS expression .)
    LENGTH          reduce using rule 40 (expression -> expression PLUS expression .)
    FIND            reduce using rule 40 (expression -> expression PLUS expression .)
    LPAREN          reduce using rule 40 (expression -> expression PLUS expression .)
    YES             reduce using rule 40 (expression -> expression PLUS expression .)
    NO              reduce using rule 40 (expression -> expression PLUS expression .)
    NUMBER          reduce using rule 40 (expression -> expression PLUS expression .)
    IDENTIFIER      reduce using rule 40 (expression -> expression PLUS expression .)
    TEXT            reduce using rule 40 (expression -> expression PLUS expression .)
    INPUT           reduce using rule 40 (expression -> expression PLUS expression .)
    NOT             reduce using rule 40 (expression -> expression PLUS expression .)
    RANDOM          reduce using rule 40 (expression -> expression PLUS expression .)
    OF              reduce using rule 40 (expression -> expression PLUS expression .)
    FROM            reduce using rule 40 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    POWER           shift and go to state 64
    EQ              shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    GE              shift and go to state 68
    LE              shift and go to state 69
    NE              shift and go to state 70
    IN              shift and go to state 71

  ! PLUS            [ reduce using rule 40 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 40 (expression -> expression PLUS expression .) ]
  ! TIMES           [ reduce using rule 40 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 40 (expression -> expression PLUS expression .) ]
  ! POWER           [ reduce using rule 40 (expression -> expression PLUS expression .) ]
  ! EQ              [ reduce using rule 40 (expression -> expression PLUS expression .) ]
  ! GT              [ reduce using rule 40 (expression -> expression PLUS expression .) ]
  ! LT              [ reduce using rule 40 (expression -> expression PLUS expression .) ]
  ! GE              [ reduce using rule 40 (expression -> expression PLUS expression .) ]
  ! LE              [ reduce using rule 40 (expression -> expression PLUS expression .) ]
  ! NE              [ reduce using rule 40 (expression -> expression PLUS expression .) ]
  ! IN              [ reduce using rule 40 (expression -> expression PLUS expression .) ]


state 102

    (41) expression -> expression MINUS expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . POWER expression
    (48) comp_expr -> expression . EQ expression
    (49) comp_expr -> expression . GT expression
    (50) comp_expr -> expression . LT expression
    (51) comp_expr -> expression . GE expression
    (52) comp_expr -> expression . LE expression
    (53) comp_expr -> expression . NE expression
    (57) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    OUTPUT          reduce using rule 41 (expression -> expression MINUS expression .)
    REPEAT          reduce using rule 41 (expression -> expression MINUS expression .)
    PAUSE           reduce using rule 41 (expression -> expression MINUS expression .)
    FUNCTION        reduce using rule 41 (expression -> expression MINUS expression .)
    WHILE           reduce using rule 41 (expression -> expression MINUS expression .)
    FOREVER         reduce using rule 41 (expression -> expression MINUS expression .)
    EXIT            reduce using rule 41 (expression -> expression MINUS expression .)
    CONVERT         reduce using rule 41 (expression -> expression MINUS expression .)
    CALL            reduce using rule 41 (expression -> expression MINUS expression .)
    RETURN          reduce using rule 41 (expression -> expression MINUS expression .)
    DELETE          reduce using rule 41 (expression -> expression MINUS expression .)
    CLEAR           reduce using rule 41 (expression -> expression MINUS expression .)
    ACTIVATE        reduce using rule 41 (expression -> expression MINUS expression .)
    SET             reduce using rule 41 (expression -> expression MINUS expression .)
    IF              reduce using rule 41 (expression -> expression MINUS expression .)
    $end            reduce using rule 41 (expression -> expression MINUS expression .)
    UNTIL           reduce using rule 41 (expression -> expression MINUS expression .)
    END             reduce using rule 41 (expression -> expression MINUS expression .)
    ELSE            reduce using rule 41 (expression -> expression MINUS expression .)
    DO              reduce using rule 41 (expression -> expression MINUS expression .)
    TO              reduce using rule 41 (expression -> expression MINUS expression .)
    THEN            reduce using rule 41 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 41 (expression -> expression MINUS expression .)
    AND             reduce using rule 41 (expression -> expression MINUS expression .)
    OR              reduce using rule 41 (expression -> expression MINUS expression .)
    TYPE            reduce using rule 41 (expression -> expression MINUS expression .)
    DATATYPE        reduce using rule 41 (expression -> expression MINUS expression .)
    LENGTH          reduce using rule 41 (expression -> expression MINUS expression .)
    FIND            reduce using rule 41 (expression -> expression MINUS expression .)
    LPAREN          reduce using rule 41 (expression -> expression MINUS expression .)
    YES             reduce using rule 41 (expression -> expression MINUS expression .)
    NO              reduce using rule 41 (expression -> expression MINUS expression .)
    NUMBER          reduce using rule 41 (expression -> expression MINUS expression .)
    IDENTIFIER      reduce using rule 41 (expression -> expression MINUS expression .)
    TEXT            reduce using rule 41 (expression -> expression MINUS expression .)
    INPUT           reduce using rule 41 (expression -> expression MINUS expression .)
    NOT             reduce using rule 41 (expression -> expression MINUS expression .)
    RANDOM          reduce using rule 41 (expression -> expression MINUS expression .)
    OF              reduce using rule 41 (expression -> expression MINUS expression .)
    FROM            reduce using rule 41 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    POWER           shift and go to state 64
    EQ              shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    GE              shift and go to state 68
    LE              shift and go to state 69
    NE              shift and go to state 70
    IN              shift and go to state 71

  ! PLUS            [ reduce using rule 41 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 41 (expression -> expression MINUS expression .) ]
  ! TIMES           [ reduce using rule 41 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 41 (expression -> expression MINUS expression .) ]
  ! POWER           [ reduce using rule 41 (expression -> expression MINUS expression .) ]
  ! EQ              [ reduce using rule 41 (expression -> expression MINUS expression .) ]
  ! GT              [ reduce using rule 41 (expression -> expression MINUS expression .) ]
  ! LT              [ reduce using rule 41 (expression -> expression MINUS expression .) ]
  ! GE              [ reduce using rule 41 (expression -> expression MINUS expression .) ]
  ! LE              [ reduce using rule 41 (expression -> expression MINUS expression .) ]
  ! NE              [ reduce using rule 41 (expression -> expression MINUS expression .) ]
  ! IN              [ reduce using rule 41 (expression -> expression MINUS expression .) ]


state 103

    (42) expression -> expression TIMES expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . POWER expression
    (48) comp_expr -> expression . EQ expression
    (49) comp_expr -> expression . GT expression
    (50) comp_expr -> expression . LT expression
    (51) comp_expr -> expression . GE expression
    (52) comp_expr -> expression . LE expression
    (53) comp_expr -> expression . NE expression
    (57) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    OUTPUT          reduce using rule 42 (expression -> expression TIMES expression .)
    REPEAT          reduce using rule 42 (expression -> expression TIMES expression .)
    PAUSE           reduce using rule 42 (expression -> expression TIMES expression .)
    FUNCTION        reduce using rule 42 (expression -> expression TIMES expression .)
    WHILE           reduce using rule 42 (expression -> expression TIMES expression .)
    FOREVER         reduce using rule 42 (expression -> expression TIMES expression .)
    EXIT            reduce using rule 42 (expression -> expression TIMES expression .)
    CONVERT         reduce using rule 42 (expression -> expression TIMES expression .)
    CALL            reduce using rule 42 (expression -> expression TIMES expression .)
    RETURN          reduce using rule 42 (expression -> expression TIMES expression .)
    DELETE          reduce using rule 42 (expression -> expression TIMES expression .)
    CLEAR           reduce using rule 42 (expression -> expression TIMES expression .)
    ACTIVATE        reduce using rule 42 (expression -> expression TIMES expression .)
    SET             reduce using rule 42 (expression -> expression TIMES expression .)
    IF              reduce using rule 42 (expression -> expression TIMES expression .)
    $end            reduce using rule 42 (expression -> expression TIMES expression .)
    UNTIL           reduce using rule 42 (expression -> expression TIMES expression .)
    END             reduce using rule 42 (expression -> expression TIMES expression .)
    ELSE            reduce using rule 42 (expression -> expression TIMES expression .)
    DO              reduce using rule 42 (expression -> expression TIMES expression .)
    TO              reduce using rule 42 (expression -> expression TIMES expression .)
    THEN            reduce using rule 42 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 42 (expression -> expression TIMES expression .)
    AND             reduce using rule 42 (expression -> expression TIMES expression .)
    OR              reduce using rule 42 (expression -> expression TIMES expression .)
    TYPE            reduce using rule 42 (expression -> expression TIMES expression .)
    DATATYPE        reduce using rule 42 (expression -> expression TIMES expression .)
    LENGTH          reduce using rule 42 (expression -> expression TIMES expression .)
    FIND            reduce using rule 42 (expression -> expression TIMES expression .)
    LPAREN          reduce using rule 42 (expression -> expression TIMES expression .)
    YES             reduce using rule 42 (expression -> expression TIMES expression .)
    NO              reduce using rule 42 (expression -> expression TIMES expression .)
    NUMBER          reduce using rule 42 (expression -> expression TIMES expression .)
    IDENTIFIER      reduce using rule 42 (expression -> expression TIMES expression .)
    TEXT            reduce using rule 42 (expression -> expression TIMES expression .)
    INPUT           reduce using rule 42 (expression -> expression TIMES expression .)
    NOT             reduce using rule 42 (expression -> expression TIMES expression .)
    RANDOM          reduce using rule 42 (expression -> expression TIMES expression .)
    OF              reduce using rule 42 (expression -> expression TIMES expression .)
    FROM            reduce using rule 42 (expression -> expression TIMES expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    POWER           shift and go to state 64
    EQ              shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    GE              shift and go to state 68
    LE              shift and go to state 69
    NE              shift and go to state 70
    IN              shift and go to state 71

  ! PLUS            [ reduce using rule 42 (expression -> expression TIMES expression .) ]
  ! MINUS           [ reduce using rule 42 (expression -> expression TIMES expression .) ]
  ! TIMES           [ reduce using rule 42 (expression -> expression TIMES expression .) ]
  ! DIVIDE          [ reduce using rule 42 (expression -> expression TIMES expression .) ]
  ! POWER           [ reduce using rule 42 (expression -> expression TIMES expression .) ]
  ! EQ              [ reduce using rule 42 (expression -> expression TIMES expression .) ]
  ! GT              [ reduce using rule 42 (expression -> expression TIMES expression .) ]
  ! LT              [ reduce using rule 42 (expression -> expression TIMES expression .) ]
  ! GE              [ reduce using rule 42 (expression -> expression TIMES expression .) ]
  ! LE              [ reduce using rule 42 (expression -> expression TIMES expression .) ]
  ! NE              [ reduce using rule 42 (expression -> expression TIMES expression .) ]
  ! IN              [ reduce using rule 42 (expression -> expression TIMES expression .) ]


state 104

    (43) expression -> expression DIVIDE expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . POWER expression
    (48) comp_expr -> expression . EQ expression
    (49) comp_expr -> expression . GT expression
    (50) comp_expr -> expression . LT expression
    (51) comp_expr -> expression . GE expression
    (52) comp_expr -> expression . LE expression
    (53) comp_expr -> expression . NE expression
    (57) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    OUTPUT          reduce using rule 43 (expression -> expression DIVIDE expression .)
    REPEAT          reduce using rule 43 (expression -> expression DIVIDE expression .)
    PAUSE           reduce using rule 43 (expression -> expression DIVIDE expression .)
    FUNCTION        reduce using rule 43 (expression -> expression DIVIDE expression .)
    WHILE           reduce using rule 43 (expression -> expression DIVIDE expression .)
    FOREVER         reduce using rule 43 (expression -> expression DIVIDE expression .)
    EXIT            reduce using rule 43 (expression -> expression DIVIDE expression .)
    CONVERT         reduce using rule 43 (expression -> expression DIVIDE expression .)
    CALL            reduce using rule 43 (expression -> expression DIVIDE expression .)
    RETURN          reduce using rule 43 (expression -> expression DIVIDE expression .)
    DELETE          reduce using rule 43 (expression -> expression DIVIDE expression .)
    CLEAR           reduce using rule 43 (expression -> expression DIVIDE expression .)
    ACTIVATE        reduce using rule 43 (expression -> expression DIVIDE expression .)
    SET             reduce using rule 43 (expression -> expression DIVIDE expression .)
    IF              reduce using rule 43 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 43 (expression -> expression DIVIDE expression .)
    UNTIL           reduce using rule 43 (expression -> expression DIVIDE expression .)
    END             reduce using rule 43 (expression -> expression DIVIDE expression .)
    ELSE            reduce using rule 43 (expression -> expression DIVIDE expression .)
    DO              reduce using rule 43 (expression -> expression DIVIDE expression .)
    TO              reduce using rule 43 (expression -> expression DIVIDE expression .)
    THEN            reduce using rule 43 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 43 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 43 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 43 (expression -> expression DIVIDE expression .)
    TYPE            reduce using rule 43 (expression -> expression DIVIDE expression .)
    DATATYPE        reduce using rule 43 (expression -> expression DIVIDE expression .)
    LENGTH          reduce using rule 43 (expression -> expression DIVIDE expression .)
    FIND            reduce using rule 43 (expression -> expression DIVIDE expression .)
    LPAREN          reduce using rule 43 (expression -> expression DIVIDE expression .)
    YES             reduce using rule 43 (expression -> expression DIVIDE expression .)
    NO              reduce using rule 43 (expression -> expression DIVIDE expression .)
    NUMBER          reduce using rule 43 (expression -> expression DIVIDE expression .)
    IDENTIFIER      reduce using rule 43 (expression -> expression DIVIDE expression .)
    TEXT            reduce using rule 43 (expression -> expression DIVIDE expression .)
    INPUT           reduce using rule 43 (expression -> expression DIVIDE expression .)
    NOT             reduce using rule 43 (expression -> expression DIVIDE expression .)
    RANDOM          reduce using rule 43 (expression -> expression DIVIDE expression .)
    OF              reduce using rule 43 (expression -> expression DIVIDE expression .)
    FROM            reduce using rule 43 (expression -> expression DIVIDE expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    POWER           shift and go to state 64
    EQ              shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    GE              shift and go to state 68
    LE              shift and go to state 69
    NE              shift and go to state 70
    IN              shift and go to state 71

  ! PLUS            [ reduce using rule 43 (expression -> expression DIVIDE expression .) ]
  ! MINUS           [ reduce using rule 43 (expression -> expression DIVIDE expression .) ]
  ! TIMES           [ reduce using rule 43 (expression -> expression DIVIDE expression .) ]
  ! DIVIDE          [ reduce using rule 43 (expression -> expression DIVIDE expression .) ]
  ! POWER           [ reduce using rule 43 (expression -> expression DIVIDE expression .) ]
  ! EQ              [ reduce using rule 43 (expression -> expression DIVIDE expression .) ]
  ! GT              [ reduce using rule 43 (expression -> expression DIVIDE expression .) ]
  ! LT              [ reduce using rule 43 (expression -> expression DIVIDE expression .) ]
  ! GE              [ reduce using rule 43 (expression -> expression DIVIDE expression .) ]
  ! LE              [ reduce using rule 43 (expression -> expression DIVIDE expression .) ]
  ! NE              [ reduce using rule 43 (expression -> expression DIVIDE expression .) ]
  ! IN              [ reduce using rule 43 (expression -> expression DIVIDE expression .) ]


state 105

    (44) expression -> expression POWER expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . POWER expression
    (48) comp_expr -> expression . EQ expression
    (49) comp_expr -> expression . GT expression
    (50) comp_expr -> expression . LT expression
    (51) comp_expr -> expression . GE expression
    (52) comp_expr -> expression . LE expression
    (53) comp_expr -> expression . NE expression
    (57) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    OUTPUT          reduce using rule 44 (expression -> expression POWER expression .)
    REPEAT          reduce using rule 44 (expression -> expression POWER expression .)
    PAUSE           reduce using rule 44 (expression -> expression POWER expression .)
    FUNCTION        reduce using rule 44 (expression -> expression POWER expression .)
    WHILE           reduce using rule 44 (expression -> expression POWER expression .)
    FOREVER         reduce using rule 44 (expression -> expression POWER expression .)
    EXIT            reduce using rule 44 (expression -> expression POWER expression .)
    CONVERT         reduce using rule 44 (expression -> expression POWER expression .)
    CALL            reduce using rule 44 (expression -> expression POWER expression .)
    RETURN          reduce using rule 44 (expression -> expression POWER expression .)
    DELETE          reduce using rule 44 (expression -> expression POWER expression .)
    CLEAR           reduce using rule 44 (expression -> expression POWER expression .)
    ACTIVATE        reduce using rule 44 (expression -> expression POWER expression .)
    SET             reduce using rule 44 (expression -> expression POWER expression .)
    IF              reduce using rule 44 (expression -> expression POWER expression .)
    $end            reduce using rule 44 (expression -> expression POWER expression .)
    UNTIL           reduce using rule 44 (expression -> expression POWER expression .)
    END             reduce using rule 44 (expression -> expression POWER expression .)
    ELSE            reduce using rule 44 (expression -> expression POWER expression .)
    DO              reduce using rule 44 (expression -> expression POWER expression .)
    TO              reduce using rule 44 (expression -> expression POWER expression .)
    THEN            reduce using rule 44 (expression -> expression POWER expression .)
    RPAREN          reduce using rule 44 (expression -> expression POWER expression .)
    AND             reduce using rule 44 (expression -> expression POWER expression .)
    OR              reduce using rule 44 (expression -> expression POWER expression .)
    TYPE            reduce using rule 44 (expression -> expression POWER expression .)
    DATATYPE        reduce using rule 44 (expression -> expression POWER expression .)
    LENGTH          reduce using rule 44 (expression -> expression POWER expression .)
    FIND            reduce using rule 44 (expression -> expression POWER expression .)
    LPAREN          reduce using rule 44 (expression -> expression POWER expression .)
    YES             reduce using rule 44 (expression -> expression POWER expression .)
    NO              reduce using rule 44 (expression -> expression POWER expression .)
    NUMBER          reduce using rule 44 (expression -> expression POWER expression .)
    IDENTIFIER      reduce using rule 44 (expression -> expression POWER expression .)
    TEXT            reduce using rule 44 (expression -> expression POWER expression .)
    INPUT           reduce using rule 44 (expression -> expression POWER expression .)
    NOT             reduce using rule 44 (expression -> expression POWER expression .)
    RANDOM          reduce using rule 44 (expression -> expression POWER expression .)
    OF              reduce using rule 44 (expression -> expression POWER expression .)
    FROM            reduce using rule 44 (expression -> expression POWER expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    POWER           shift and go to state 64
    EQ              shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    GE              shift and go to state 68
    LE              shift and go to state 69
    NE              shift and go to state 70
    IN              shift and go to state 71

  ! PLUS            [ reduce using rule 44 (expression -> expression POWER expression .) ]
  ! MINUS           [ reduce using rule 44 (expression -> expression POWER expression .) ]
  ! TIMES           [ reduce using rule 44 (expression -> expression POWER expression .) ]
  ! DIVIDE          [ reduce using rule 44 (expression -> expression POWER expression .) ]
  ! POWER           [ reduce using rule 44 (expression -> expression POWER expression .) ]
  ! EQ              [ reduce using rule 44 (expression -> expression POWER expression .) ]
  ! GT              [ reduce using rule 44 (expression -> expression POWER expression .) ]
  ! LT              [ reduce using rule 44 (expression -> expression POWER expression .) ]
  ! GE              [ reduce using rule 44 (expression -> expression POWER expression .) ]
  ! LE              [ reduce using rule 44 (expression -> expression POWER expression .) ]
  ! NE              [ reduce using rule 44 (expression -> expression POWER expression .) ]
  ! IN              [ reduce using rule 44 (expression -> expression POWER expression .) ]


state 106

    (48) comp_expr -> expression EQ expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . POWER expression
    (48) comp_expr -> expression . EQ expression
    (49) comp_expr -> expression . GT expression
    (50) comp_expr -> expression . LT expression
    (51) comp_expr -> expression . GE expression
    (52) comp_expr -> expression . LE expression
    (53) comp_expr -> expression . NE expression
    (57) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    AND             reduce using rule 48 (comp_expr -> expression EQ expression .)
    OR              reduce using rule 48 (comp_expr -> expression EQ expression .)
    OUTPUT          reduce using rule 48 (comp_expr -> expression EQ expression .)
    REPEAT          reduce using rule 48 (comp_expr -> expression EQ expression .)
    PAUSE           reduce using rule 48 (comp_expr -> expression EQ expression .)
    FUNCTION        reduce using rule 48 (comp_expr -> expression EQ expression .)
    WHILE           reduce using rule 48 (comp_expr -> expression EQ expression .)
    FOREVER         reduce using rule 48 (comp_expr -> expression EQ expression .)
    EXIT            reduce using rule 48 (comp_expr -> expression EQ expression .)
    CONVERT         reduce using rule 48 (comp_expr -> expression EQ expression .)
    CALL            reduce using rule 48 (comp_expr -> expression EQ expression .)
    RETURN          reduce using rule 48 (comp_expr -> expression EQ expression .)
    DELETE          reduce using rule 48 (comp_expr -> expression EQ expression .)
    CLEAR           reduce using rule 48 (comp_expr -> expression EQ expression .)
    ACTIVATE        reduce using rule 48 (comp_expr -> expression EQ expression .)
    SET             reduce using rule 48 (comp_expr -> expression EQ expression .)
    IF              reduce using rule 48 (comp_expr -> expression EQ expression .)
    $end            reduce using rule 48 (comp_expr -> expression EQ expression .)
    UNTIL           reduce using rule 48 (comp_expr -> expression EQ expression .)
    END             reduce using rule 48 (comp_expr -> expression EQ expression .)
    ELSE            reduce using rule 48 (comp_expr -> expression EQ expression .)
    DO              reduce using rule 48 (comp_expr -> expression EQ expression .)
    TO              reduce using rule 48 (comp_expr -> expression EQ expression .)
    THEN            reduce using rule 48 (comp_expr -> expression EQ expression .)
    RPAREN          reduce using rule 48 (comp_expr -> expression EQ expression .)
    TYPE            reduce using rule 48 (comp_expr -> expression EQ expression .)
    DATATYPE        reduce using rule 48 (comp_expr -> expression EQ expression .)
    LENGTH          reduce using rule 48 (comp_expr -> expression EQ expression .)
    FIND            reduce using rule 48 (comp_expr -> expression EQ expression .)
    LPAREN          reduce using rule 48 (comp_expr -> expression EQ expression .)
    YES             reduce using rule 48 (comp_expr -> expression EQ expression .)
    NO              reduce using rule 48 (comp_expr -> expression EQ expression .)
    NUMBER          reduce using rule 48 (comp_expr -> expression EQ expression .)
    IDENTIFIER      reduce using rule 48 (comp_expr -> expression EQ expression .)
    TEXT            reduce using rule 48 (comp_expr -> expression EQ expression .)
    INPUT           reduce using rule 48 (comp_expr -> expression EQ expression .)
    NOT             reduce using rule 48 (comp_expr -> expression EQ expression .)
    RANDOM          reduce using rule 48 (comp_expr -> expression EQ expression .)
    OF              reduce using rule 48 (comp_expr -> expression EQ expression .)
    FROM            reduce using rule 48 (comp_expr -> expression EQ expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    POWER           shift and go to state 64
    EQ              shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    GE              shift and go to state 68
    LE              shift and go to state 69
    NE              shift and go to state 70
    IN              shift and go to state 71

  ! PLUS            [ reduce using rule 48 (comp_expr -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 48 (comp_expr -> expression EQ expression .) ]
  ! TIMES           [ reduce using rule 48 (comp_expr -> expression EQ expression .) ]
  ! DIVIDE          [ reduce using rule 48 (comp_expr -> expression EQ expression .) ]
  ! POWER           [ reduce using rule 48 (comp_expr -> expression EQ expression .) ]
  ! EQ              [ reduce using rule 48 (comp_expr -> expression EQ expression .) ]
  ! GT              [ reduce using rule 48 (comp_expr -> expression EQ expression .) ]
  ! LT              [ reduce using rule 48 (comp_expr -> expression EQ expression .) ]
  ! GE              [ reduce using rule 48 (comp_expr -> expression EQ expression .) ]
  ! LE              [ reduce using rule 48 (comp_expr -> expression EQ expression .) ]
  ! NE              [ reduce using rule 48 (comp_expr -> expression EQ expression .) ]
  ! IN              [ reduce using rule 48 (comp_expr -> expression EQ expression .) ]


state 107

    (49) comp_expr -> expression GT expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . POWER expression
    (48) comp_expr -> expression . EQ expression
    (49) comp_expr -> expression . GT expression
    (50) comp_expr -> expression . LT expression
    (51) comp_expr -> expression . GE expression
    (52) comp_expr -> expression . LE expression
    (53) comp_expr -> expression . NE expression
    (57) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    AND             reduce using rule 49 (comp_expr -> expression GT expression .)
    OR              reduce using rule 49 (comp_expr -> expression GT expression .)
    OUTPUT          reduce using rule 49 (comp_expr -> expression GT expression .)
    REPEAT          reduce using rule 49 (comp_expr -> expression GT expression .)
    PAUSE           reduce using rule 49 (comp_expr -> expression GT expression .)
    FUNCTION        reduce using rule 49 (comp_expr -> expression GT expression .)
    WHILE           reduce using rule 49 (comp_expr -> expression GT expression .)
    FOREVER         reduce using rule 49 (comp_expr -> expression GT expression .)
    EXIT            reduce using rule 49 (comp_expr -> expression GT expression .)
    CONVERT         reduce using rule 49 (comp_expr -> expression GT expression .)
    CALL            reduce using rule 49 (comp_expr -> expression GT expression .)
    RETURN          reduce using rule 49 (comp_expr -> expression GT expression .)
    DELETE          reduce using rule 49 (comp_expr -> expression GT expression .)
    CLEAR           reduce using rule 49 (comp_expr -> expression GT expression .)
    ACTIVATE        reduce using rule 49 (comp_expr -> expression GT expression .)
    SET             reduce using rule 49 (comp_expr -> expression GT expression .)
    IF              reduce using rule 49 (comp_expr -> expression GT expression .)
    $end            reduce using rule 49 (comp_expr -> expression GT expression .)
    UNTIL           reduce using rule 49 (comp_expr -> expression GT expression .)
    END             reduce using rule 49 (comp_expr -> expression GT expression .)
    ELSE            reduce using rule 49 (comp_expr -> expression GT expression .)
    DO              reduce using rule 49 (comp_expr -> expression GT expression .)
    TO              reduce using rule 49 (comp_expr -> expression GT expression .)
    THEN            reduce using rule 49 (comp_expr -> expression GT expression .)
    RPAREN          reduce using rule 49 (comp_expr -> expression GT expression .)
    TYPE            reduce using rule 49 (comp_expr -> expression GT expression .)
    DATATYPE        reduce using rule 49 (comp_expr -> expression GT expression .)
    LENGTH          reduce using rule 49 (comp_expr -> expression GT expression .)
    FIND            reduce using rule 49 (comp_expr -> expression GT expression .)
    LPAREN          reduce using rule 49 (comp_expr -> expression GT expression .)
    YES             reduce using rule 49 (comp_expr -> expression GT expression .)
    NO              reduce using rule 49 (comp_expr -> expression GT expression .)
    NUMBER          reduce using rule 49 (comp_expr -> expression GT expression .)
    IDENTIFIER      reduce using rule 49 (comp_expr -> expression GT expression .)
    TEXT            reduce using rule 49 (comp_expr -> expression GT expression .)
    INPUT           reduce using rule 49 (comp_expr -> expression GT expression .)
    NOT             reduce using rule 49 (comp_expr -> expression GT expression .)
    RANDOM          reduce using rule 49 (comp_expr -> expression GT expression .)
    OF              reduce using rule 49 (comp_expr -> expression GT expression .)
    FROM            reduce using rule 49 (comp_expr -> expression GT expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    POWER           shift and go to state 64
    EQ              shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    GE              shift and go to state 68
    LE              shift and go to state 69
    NE              shift and go to state 70
    IN              shift and go to state 71

  ! PLUS            [ reduce using rule 49 (comp_expr -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 49 (comp_expr -> expression GT expression .) ]
  ! TIMES           [ reduce using rule 49 (comp_expr -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 49 (comp_expr -> expression GT expression .) ]
  ! POWER           [ reduce using rule 49 (comp_expr -> expression GT expression .) ]
  ! EQ              [ reduce using rule 49 (comp_expr -> expression GT expression .) ]
  ! GT              [ reduce using rule 49 (comp_expr -> expression GT expression .) ]
  ! LT              [ reduce using rule 49 (comp_expr -> expression GT expression .) ]
  ! GE              [ reduce using rule 49 (comp_expr -> expression GT expression .) ]
  ! LE              [ reduce using rule 49 (comp_expr -> expression GT expression .) ]
  ! NE              [ reduce using rule 49 (comp_expr -> expression GT expression .) ]
  ! IN              [ reduce using rule 49 (comp_expr -> expression GT expression .) ]


state 108

    (50) comp_expr -> expression LT expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . POWER expression
    (48) comp_expr -> expression . EQ expression
    (49) comp_expr -> expression . GT expression
    (50) comp_expr -> expression . LT expression
    (51) comp_expr -> expression . GE expression
    (52) comp_expr -> expression . LE expression
    (53) comp_expr -> expression . NE expression
    (57) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    AND             reduce using rule 50 (comp_expr -> expression LT expression .)
    OR              reduce using rule 50 (comp_expr -> expression LT expression .)
    OUTPUT          reduce using rule 50 (comp_expr -> expression LT expression .)
    REPEAT          reduce using rule 50 (comp_expr -> expression LT expression .)
    PAUSE           reduce using rule 50 (comp_expr -> expression LT expression .)
    FUNCTION        reduce using rule 50 (comp_expr -> expression LT expression .)
    WHILE           reduce using rule 50 (comp_expr -> expression LT expression .)
    FOREVER         reduce using rule 50 (comp_expr -> expression LT expression .)
    EXIT            reduce using rule 50 (comp_expr -> expression LT expression .)
    CONVERT         reduce using rule 50 (comp_expr -> expression LT expression .)
    CALL            reduce using rule 50 (comp_expr -> expression LT expression .)
    RETURN          reduce using rule 50 (comp_expr -> expression LT expression .)
    DELETE          reduce using rule 50 (comp_expr -> expression LT expression .)
    CLEAR           reduce using rule 50 (comp_expr -> expression LT expression .)
    ACTIVATE        reduce using rule 50 (comp_expr -> expression LT expression .)
    SET             reduce using rule 50 (comp_expr -> expression LT expression .)
    IF              reduce using rule 50 (comp_expr -> expression LT expression .)
    $end            reduce using rule 50 (comp_expr -> expression LT expression .)
    UNTIL           reduce using rule 50 (comp_expr -> expression LT expression .)
    END             reduce using rule 50 (comp_expr -> expression LT expression .)
    ELSE            reduce using rule 50 (comp_expr -> expression LT expression .)
    DO              reduce using rule 50 (comp_expr -> expression LT expression .)
    TO              reduce using rule 50 (comp_expr -> expression LT expression .)
    THEN            reduce using rule 50 (comp_expr -> expression LT expression .)
    RPAREN          reduce using rule 50 (comp_expr -> expression LT expression .)
    TYPE            reduce using rule 50 (comp_expr -> expression LT expression .)
    DATATYPE        reduce using rule 50 (comp_expr -> expression LT expression .)
    LENGTH          reduce using rule 50 (comp_expr -> expression LT expression .)
    FIND            reduce using rule 50 (comp_expr -> expression LT expression .)
    LPAREN          reduce using rule 50 (comp_expr -> expression LT expression .)
    YES             reduce using rule 50 (comp_expr -> expression LT expression .)
    NO              reduce using rule 50 (comp_expr -> expression LT expression .)
    NUMBER          reduce using rule 50 (comp_expr -> expression LT expression .)
    IDENTIFIER      reduce using rule 50 (comp_expr -> expression LT expression .)
    TEXT            reduce using rule 50 (comp_expr -> expression LT expression .)
    INPUT           reduce using rule 50 (comp_expr -> expression LT expression .)
    NOT             reduce using rule 50 (comp_expr -> expression LT expression .)
    RANDOM          reduce using rule 50 (comp_expr -> expression LT expression .)
    OF              reduce using rule 50 (comp_expr -> expression LT expression .)
    FROM            reduce using rule 50 (comp_expr -> expression LT expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    POWER           shift and go to state 64
    EQ              shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    GE              shift and go to state 68
    LE              shift and go to state 69
    NE              shift and go to state 70
    IN              shift and go to state 71

  ! PLUS            [ reduce using rule 50 (comp_expr -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 50 (comp_expr -> expression LT expression .) ]
  ! TIMES           [ reduce using rule 50 (comp_expr -> expression LT expression .) ]
  ! DIVIDE          [ reduce using rule 50 (comp_expr -> expression LT expression .) ]
  ! POWER           [ reduce using rule 50 (comp_expr -> expression LT expression .) ]
  ! EQ              [ reduce using rule 50 (comp_expr -> expression LT expression .) ]
  ! GT              [ reduce using rule 50 (comp_expr -> expression LT expression .) ]
  ! LT              [ reduce using rule 50 (comp_expr -> expression LT expression .) ]
  ! GE              [ reduce using rule 50 (comp_expr -> expression LT expression .) ]
  ! LE              [ reduce using rule 50 (comp_expr -> expression LT expression .) ]
  ! NE              [ reduce using rule 50 (comp_expr -> expression LT expression .) ]
  ! IN              [ reduce using rule 50 (comp_expr -> expression LT expression .) ]


state 109

    (51) comp_expr -> expression GE expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . POWER expression
    (48) comp_expr -> expression . EQ expression
    (49) comp_expr -> expression . GT expression
    (50) comp_expr -> expression . LT expression
    (51) comp_expr -> expression . GE expression
    (52) comp_expr -> expression . LE expression
    (53) comp_expr -> expression . NE expression
    (57) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    AND             reduce using rule 51 (comp_expr -> expression GE expression .)
    OR              reduce using rule 51 (comp_expr -> expression GE expression .)
    OUTPUT          reduce using rule 51 (comp_expr -> expression GE expression .)
    REPEAT          reduce using rule 51 (comp_expr -> expression GE expression .)
    PAUSE           reduce using rule 51 (comp_expr -> expression GE expression .)
    FUNCTION        reduce using rule 51 (comp_expr -> expression GE expression .)
    WHILE           reduce using rule 51 (comp_expr -> expression GE expression .)
    FOREVER         reduce using rule 51 (comp_expr -> expression GE expression .)
    EXIT            reduce using rule 51 (comp_expr -> expression GE expression .)
    CONVERT         reduce using rule 51 (comp_expr -> expression GE expression .)
    CALL            reduce using rule 51 (comp_expr -> expression GE expression .)
    RETURN          reduce using rule 51 (comp_expr -> expression GE expression .)
    DELETE          reduce using rule 51 (comp_expr -> expression GE expression .)
    CLEAR           reduce using rule 51 (comp_expr -> expression GE expression .)
    ACTIVATE        reduce using rule 51 (comp_expr -> expression GE expression .)
    SET             reduce using rule 51 (comp_expr -> expression GE expression .)
    IF              reduce using rule 51 (comp_expr -> expression GE expression .)
    $end            reduce using rule 51 (comp_expr -> expression GE expression .)
    UNTIL           reduce using rule 51 (comp_expr -> expression GE expression .)
    END             reduce using rule 51 (comp_expr -> expression GE expression .)
    ELSE            reduce using rule 51 (comp_expr -> expression GE expression .)
    DO              reduce using rule 51 (comp_expr -> expression GE expression .)
    TO              reduce using rule 51 (comp_expr -> expression GE expression .)
    THEN            reduce using rule 51 (comp_expr -> expression GE expression .)
    RPAREN          reduce using rule 51 (comp_expr -> expression GE expression .)
    TYPE            reduce using rule 51 (comp_expr -> expression GE expression .)
    DATATYPE        reduce using rule 51 (comp_expr -> expression GE expression .)
    LENGTH          reduce using rule 51 (comp_expr -> expression GE expression .)
    FIND            reduce using rule 51 (comp_expr -> expression GE expression .)
    LPAREN          reduce using rule 51 (comp_expr -> expression GE expression .)
    YES             reduce using rule 51 (comp_expr -> expression GE expression .)
    NO              reduce using rule 51 (comp_expr -> expression GE expression .)
    NUMBER          reduce using rule 51 (comp_expr -> expression GE expression .)
    IDENTIFIER      reduce using rule 51 (comp_expr -> expression GE expression .)
    TEXT            reduce using rule 51 (comp_expr -> expression GE expression .)
    INPUT           reduce using rule 51 (comp_expr -> expression GE expression .)
    NOT             reduce using rule 51 (comp_expr -> expression GE expression .)
    RANDOM          reduce using rule 51 (comp_expr -> expression GE expression .)
    OF              reduce using rule 51 (comp_expr -> expression GE expression .)
    FROM            reduce using rule 51 (comp_expr -> expression GE expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    POWER           shift and go to state 64
    EQ              shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    GE              shift and go to state 68
    LE              shift and go to state 69
    NE              shift and go to state 70
    IN              shift and go to state 71

  ! PLUS            [ reduce using rule 51 (comp_expr -> expression GE expression .) ]
  ! MINUS           [ reduce using rule 51 (comp_expr -> expression GE expression .) ]
  ! TIMES           [ reduce using rule 51 (comp_expr -> expression GE expression .) ]
  ! DIVIDE          [ reduce using rule 51 (comp_expr -> expression GE expression .) ]
  ! POWER           [ reduce using rule 51 (comp_expr -> expression GE expression .) ]
  ! EQ              [ reduce using rule 51 (comp_expr -> expression GE expression .) ]
  ! GT              [ reduce using rule 51 (comp_expr -> expression GE expression .) ]
  ! LT              [ reduce using rule 51 (comp_expr -> expression GE expression .) ]
  ! GE              [ reduce using rule 51 (comp_expr -> expression GE expression .) ]
  ! LE              [ reduce using rule 51 (comp_expr -> expression GE expression .) ]
  ! NE              [ reduce using rule 51 (comp_expr -> expression GE expression .) ]
  ! IN              [ reduce using rule 51 (comp_expr -> expression GE expression .) ]


state 110

    (52) comp_expr -> expression LE expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . POWER expression
    (48) comp_expr -> expression . EQ expression
    (49) comp_expr -> expression . GT expression
    (50) comp_expr -> expression . LT expression
    (51) comp_expr -> expression . GE expression
    (52) comp_expr -> expression . LE expression
    (53) comp_expr -> expression . NE expression
    (57) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    AND             reduce using rule 52 (comp_expr -> expression LE expression .)
    OR              reduce using rule 52 (comp_expr -> expression LE expression .)
    OUTPUT          reduce using rule 52 (comp_expr -> expression LE expression .)
    REPEAT          reduce using rule 52 (comp_expr -> expression LE expression .)
    PAUSE           reduce using rule 52 (comp_expr -> expression LE expression .)
    FUNCTION        reduce using rule 52 (comp_expr -> expression LE expression .)
    WHILE           reduce using rule 52 (comp_expr -> expression LE expression .)
    FOREVER         reduce using rule 52 (comp_expr -> expression LE expression .)
    EXIT            reduce using rule 52 (comp_expr -> expression LE expression .)
    CONVERT         reduce using rule 52 (comp_expr -> expression LE expression .)
    CALL            reduce using rule 52 (comp_expr -> expression LE expression .)
    RETURN          reduce using rule 52 (comp_expr -> expression LE expression .)
    DELETE          reduce using rule 52 (comp_expr -> expression LE expression .)
    CLEAR           reduce using rule 52 (comp_expr -> expression LE expression .)
    ACTIVATE        reduce using rule 52 (comp_expr -> expression LE expression .)
    SET             reduce using rule 52 (comp_expr -> expression LE expression .)
    IF              reduce using rule 52 (comp_expr -> expression LE expression .)
    $end            reduce using rule 52 (comp_expr -> expression LE expression .)
    UNTIL           reduce using rule 52 (comp_expr -> expression LE expression .)
    END             reduce using rule 52 (comp_expr -> expression LE expression .)
    ELSE            reduce using rule 52 (comp_expr -> expression LE expression .)
    DO              reduce using rule 52 (comp_expr -> expression LE expression .)
    TO              reduce using rule 52 (comp_expr -> expression LE expression .)
    THEN            reduce using rule 52 (comp_expr -> expression LE expression .)
    RPAREN          reduce using rule 52 (comp_expr -> expression LE expression .)
    TYPE            reduce using rule 52 (comp_expr -> expression LE expression .)
    DATATYPE        reduce using rule 52 (comp_expr -> expression LE expression .)
    LENGTH          reduce using rule 52 (comp_expr -> expression LE expression .)
    FIND            reduce using rule 52 (comp_expr -> expression LE expression .)
    LPAREN          reduce using rule 52 (comp_expr -> expression LE expression .)
    YES             reduce using rule 52 (comp_expr -> expression LE expression .)
    NO              reduce using rule 52 (comp_expr -> expression LE expression .)
    NUMBER          reduce using rule 52 (comp_expr -> expression LE expression .)
    IDENTIFIER      reduce using rule 52 (comp_expr -> expression LE expression .)
    TEXT            reduce using rule 52 (comp_expr -> expression LE expression .)
    INPUT           reduce using rule 52 (comp_expr -> expression LE expression .)
    NOT             reduce using rule 52 (comp_expr -> expression LE expression .)
    RANDOM          reduce using rule 52 (comp_expr -> expression LE expression .)
    OF              reduce using rule 52 (comp_expr -> expression LE expression .)
    FROM            reduce using rule 52 (comp_expr -> expression LE expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    POWER           shift and go to state 64
    EQ              shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    GE              shift and go to state 68
    LE              shift and go to state 69
    NE              shift and go to state 70
    IN              shift and go to state 71

  ! PLUS            [ reduce using rule 52 (comp_expr -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 52 (comp_expr -> expression LE expression .) ]
  ! TIMES           [ reduce using rule 52 (comp_expr -> expression LE expression .) ]
  ! DIVIDE          [ reduce using rule 52 (comp_expr -> expression LE expression .) ]
  ! POWER           [ reduce using rule 52 (comp_expr -> expression LE expression .) ]
  ! EQ              [ reduce using rule 52 (comp_expr -> expression LE expression .) ]
  ! GT              [ reduce using rule 52 (comp_expr -> expression LE expression .) ]
  ! LT              [ reduce using rule 52 (comp_expr -> expression LE expression .) ]
  ! GE              [ reduce using rule 52 (comp_expr -> expression LE expression .) ]
  ! LE              [ reduce using rule 52 (comp_expr -> expression LE expression .) ]
  ! NE              [ reduce using rule 52 (comp_expr -> expression LE expression .) ]
  ! IN              [ reduce using rule 52 (comp_expr -> expression LE expression .) ]


state 111

    (53) comp_expr -> expression NE expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . POWER expression
    (48) comp_expr -> expression . EQ expression
    (49) comp_expr -> expression . GT expression
    (50) comp_expr -> expression . LT expression
    (51) comp_expr -> expression . GE expression
    (52) comp_expr -> expression . LE expression
    (53) comp_expr -> expression . NE expression
    (57) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    AND             reduce using rule 53 (comp_expr -> expression NE expression .)
    OR              reduce using rule 53 (comp_expr -> expression NE expression .)
    OUTPUT          reduce using rule 53 (comp_expr -> expression NE expression .)
    REPEAT          reduce using rule 53 (comp_expr -> expression NE expression .)
    PAUSE           reduce using rule 53 (comp_expr -> expression NE expression .)
    FUNCTION        reduce using rule 53 (comp_expr -> expression NE expression .)
    WHILE           reduce using rule 53 (comp_expr -> expression NE expression .)
    FOREVER         reduce using rule 53 (comp_expr -> expression NE expression .)
    EXIT            reduce using rule 53 (comp_expr -> expression NE expression .)
    CONVERT         reduce using rule 53 (comp_expr -> expression NE expression .)
    CALL            reduce using rule 53 (comp_expr -> expression NE expression .)
    RETURN          reduce using rule 53 (comp_expr -> expression NE expression .)
    DELETE          reduce using rule 53 (comp_expr -> expression NE expression .)
    CLEAR           reduce using rule 53 (comp_expr -> expression NE expression .)
    ACTIVATE        reduce using rule 53 (comp_expr -> expression NE expression .)
    SET             reduce using rule 53 (comp_expr -> expression NE expression .)
    IF              reduce using rule 53 (comp_expr -> expression NE expression .)
    $end            reduce using rule 53 (comp_expr -> expression NE expression .)
    UNTIL           reduce using rule 53 (comp_expr -> expression NE expression .)
    END             reduce using rule 53 (comp_expr -> expression NE expression .)
    ELSE            reduce using rule 53 (comp_expr -> expression NE expression .)
    DO              reduce using rule 53 (comp_expr -> expression NE expression .)
    TO              reduce using rule 53 (comp_expr -> expression NE expression .)
    THEN            reduce using rule 53 (comp_expr -> expression NE expression .)
    RPAREN          reduce using rule 53 (comp_expr -> expression NE expression .)
    TYPE            reduce using rule 53 (comp_expr -> expression NE expression .)
    DATATYPE        reduce using rule 53 (comp_expr -> expression NE expression .)
    LENGTH          reduce using rule 53 (comp_expr -> expression NE expression .)
    FIND            reduce using rule 53 (comp_expr -> expression NE expression .)
    LPAREN          reduce using rule 53 (comp_expr -> expression NE expression .)
    YES             reduce using rule 53 (comp_expr -> expression NE expression .)
    NO              reduce using rule 53 (comp_expr -> expression NE expression .)
    NUMBER          reduce using rule 53 (comp_expr -> expression NE expression .)
    IDENTIFIER      reduce using rule 53 (comp_expr -> expression NE expression .)
    TEXT            reduce using rule 53 (comp_expr -> expression NE expression .)
    INPUT           reduce using rule 53 (comp_expr -> expression NE expression .)
    NOT             reduce using rule 53 (comp_expr -> expression NE expression .)
    RANDOM          reduce using rule 53 (comp_expr -> expression NE expression .)
    OF              reduce using rule 53 (comp_expr -> expression NE expression .)
    FROM            reduce using rule 53 (comp_expr -> expression NE expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    POWER           shift and go to state 64
    EQ              shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    GE              shift and go to state 68
    LE              shift and go to state 69
    NE              shift and go to state 70
    IN              shift and go to state 71

  ! PLUS            [ reduce using rule 53 (comp_expr -> expression NE expression .) ]
  ! MINUS           [ reduce using rule 53 (comp_expr -> expression NE expression .) ]
  ! TIMES           [ reduce using rule 53 (comp_expr -> expression NE expression .) ]
  ! DIVIDE          [ reduce using rule 53 (comp_expr -> expression NE expression .) ]
  ! POWER           [ reduce using rule 53 (comp_expr -> expression NE expression .) ]
  ! EQ              [ reduce using rule 53 (comp_expr -> expression NE expression .) ]
  ! GT              [ reduce using rule 53 (comp_expr -> expression NE expression .) ]
  ! LT              [ reduce using rule 53 (comp_expr -> expression NE expression .) ]
  ! GE              [ reduce using rule 53 (comp_expr -> expression NE expression .) ]
  ! LE              [ reduce using rule 53 (comp_expr -> expression NE expression .) ]
  ! NE              [ reduce using rule 53 (comp_expr -> expression NE expression .) ]
  ! IN              [ reduce using rule 53 (comp_expr -> expression NE expression .) ]


state 112

    (57) comp_expr -> expression IN expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . POWER expression
    (48) comp_expr -> expression . EQ expression
    (49) comp_expr -> expression . GT expression
    (50) comp_expr -> expression . LT expression
    (51) comp_expr -> expression . GE expression
    (52) comp_expr -> expression . LE expression
    (53) comp_expr -> expression . NE expression
    (57) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    AND             reduce using rule 57 (comp_expr -> expression IN expression .)
    OR              reduce using rule 57 (comp_expr -> expression IN expression .)
    OUTPUT          reduce using rule 57 (comp_expr -> expression IN expression .)
    REPEAT          reduce using rule 57 (comp_expr -> expression IN expression .)
    PAUSE           reduce using rule 57 (comp_expr -> expression IN expression .)
    FUNCTION        reduce using rule 57 (comp_expr -> expression IN expression .)
    WHILE           reduce using rule 57 (comp_expr -> expression IN expression .)
    FOREVER         reduce using rule 57 (comp_expr -> expression IN expression .)
    EXIT            reduce using rule 57 (comp_expr -> expression IN expression .)
    CONVERT         reduce using rule 57 (comp_expr -> expression IN expression .)
    CALL            reduce using rule 57 (comp_expr -> expression IN expression .)
    RETURN          reduce using rule 57 (comp_expr -> expression IN expression .)
    DELETE          reduce using rule 57 (comp_expr -> expression IN expression .)
    CLEAR           reduce using rule 57 (comp_expr -> expression IN expression .)
    ACTIVATE        reduce using rule 57 (comp_expr -> expression IN expression .)
    SET             reduce using rule 57 (comp_expr -> expression IN expression .)
    IF              reduce using rule 57 (comp_expr -> expression IN expression .)
    $end            reduce using rule 57 (comp_expr -> expression IN expression .)
    UNTIL           reduce using rule 57 (comp_expr -> expression IN expression .)
    END             reduce using rule 57 (comp_expr -> expression IN expression .)
    ELSE            reduce using rule 57 (comp_expr -> expression IN expression .)
    DO              reduce using rule 57 (comp_expr -> expression IN expression .)
    TO              reduce using rule 57 (comp_expr -> expression IN expression .)
    THEN            reduce using rule 57 (comp_expr -> expression IN expression .)
    RPAREN          reduce using rule 57 (comp_expr -> expression IN expression .)
    TYPE            reduce using rule 57 (comp_expr -> expression IN expression .)
    DATATYPE        reduce using rule 57 (comp_expr -> expression IN expression .)
    LENGTH          reduce using rule 57 (comp_expr -> expression IN expression .)
    FIND            reduce using rule 57 (comp_expr -> expression IN expression .)
    LPAREN          reduce using rule 57 (comp_expr -> expression IN expression .)
    YES             reduce using rule 57 (comp_expr -> expression IN expression .)
    NO              reduce using rule 57 (comp_expr -> expression IN expression .)
    NUMBER          reduce using rule 57 (comp_expr -> expression IN expression .)
    IDENTIFIER      reduce using rule 57 (comp_expr -> expression IN expression .)
    TEXT            reduce using rule 57 (comp_expr -> expression IN expression .)
    INPUT           reduce using rule 57 (comp_expr -> expression IN expression .)
    NOT             reduce using rule 57 (comp_expr -> expression IN expression .)
    RANDOM          reduce using rule 57 (comp_expr -> expression IN expression .)
    OF              reduce using rule 57 (comp_expr -> expression IN expression .)
    FROM            reduce using rule 57 (comp_expr -> expression IN expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    POWER           shift and go to state 64
    EQ              shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    GE              shift and go to state 68
    LE              shift and go to state 69
    NE              shift and go to state 70
    IN              shift and go to state 71

  ! PLUS            [ reduce using rule 57 (comp_expr -> expression IN expression .) ]
  ! MINUS           [ reduce using rule 57 (comp_expr -> expression IN expression .) ]
  ! TIMES           [ reduce using rule 57 (comp_expr -> expression IN expression .) ]
  ! DIVIDE          [ reduce using rule 57 (comp_expr -> expression IN expression .) ]
  ! POWER           [ reduce using rule 57 (comp_expr -> expression IN expression .) ]
  ! EQ              [ reduce using rule 57 (comp_expr -> expression IN expression .) ]
  ! GT              [ reduce using rule 57 (comp_expr -> expression IN expression .) ]
  ! LT              [ reduce using rule 57 (comp_expr -> expression IN expression .) ]
  ! GE              [ reduce using rule 57 (comp_expr -> expression IN expression .) ]
  ! LE              [ reduce using rule 57 (comp_expr -> expression IN expression .) ]
  ! NE              [ reduce using rule 57 (comp_expr -> expression IN expression .) ]
  ! IN              [ reduce using rule 57 (comp_expr -> expression IN expression .) ]


state 113

    (35) expression -> DATATYPE FROM expression . TO expression FROM expression
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . POWER expression
    (48) comp_expr -> expression . EQ expression
    (49) comp_expr -> expression . GT expression
    (50) comp_expr -> expression . LT expression
    (51) comp_expr -> expression . GE expression
    (52) comp_expr -> expression . LE expression
    (53) comp_expr -> expression . NE expression
    (57) comp_expr -> expression . IN expression

    TO              shift and go to state 139
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    POWER           shift and go to state 64
    EQ              shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    GE              shift and go to state 68
    LE              shift and go to state 69
    NE              shift and go to state 70
    IN              shift and go to state 71


state 114

    (36) expression -> LENGTH OF expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . POWER expression
    (48) comp_expr -> expression . EQ expression
    (49) comp_expr -> expression . GT expression
    (50) comp_expr -> expression . LT expression
    (51) comp_expr -> expression . GE expression
    (52) comp_expr -> expression . LE expression
    (53) comp_expr -> expression . NE expression
    (57) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    OUTPUT          reduce using rule 36 (expression -> LENGTH OF expression .)
    REPEAT          reduce using rule 36 (expression -> LENGTH OF expression .)
    PAUSE           reduce using rule 36 (expression -> LENGTH OF expression .)
    FUNCTION        reduce using rule 36 (expression -> LENGTH OF expression .)
    WHILE           reduce using rule 36 (expression -> LENGTH OF expression .)
    FOREVER         reduce using rule 36 (expression -> LENGTH OF expression .)
    EXIT            reduce using rule 36 (expression -> LENGTH OF expression .)
    CONVERT         reduce using rule 36 (expression -> LENGTH OF expression .)
    CALL            reduce using rule 36 (expression -> LENGTH OF expression .)
    RETURN          reduce using rule 36 (expression -> LENGTH OF expression .)
    DELETE          reduce using rule 36 (expression -> LENGTH OF expression .)
    CLEAR           reduce using rule 36 (expression -> LENGTH OF expression .)
    ACTIVATE        reduce using rule 36 (expression -> LENGTH OF expression .)
    SET             reduce using rule 36 (expression -> LENGTH OF expression .)
    IF              reduce using rule 36 (expression -> LENGTH OF expression .)
    $end            reduce using rule 36 (expression -> LENGTH OF expression .)
    UNTIL           reduce using rule 36 (expression -> LENGTH OF expression .)
    END             reduce using rule 36 (expression -> LENGTH OF expression .)
    ELSE            reduce using rule 36 (expression -> LENGTH OF expression .)
    DO              reduce using rule 36 (expression -> LENGTH OF expression .)
    TO              reduce using rule 36 (expression -> LENGTH OF expression .)
    THEN            reduce using rule 36 (expression -> LENGTH OF expression .)
    RPAREN          reduce using rule 36 (expression -> LENGTH OF expression .)
    AND             reduce using rule 36 (expression -> LENGTH OF expression .)
    OR              reduce using rule 36 (expression -> LENGTH OF expression .)
    TYPE            reduce using rule 36 (expression -> LENGTH OF expression .)
    DATATYPE        reduce using rule 36 (expression -> LENGTH OF expression .)
    LENGTH          reduce using rule 36 (expression -> LENGTH OF expression .)
    FIND            reduce using rule 36 (expression -> LENGTH OF expression .)
    LPAREN          reduce using rule 36 (expression -> LENGTH OF expression .)
    YES             reduce using rule 36 (expression -> LENGTH OF expression .)
    NO              reduce using rule 36 (expression -> LENGTH OF expression .)
    NUMBER          reduce using rule 36 (expression -> LENGTH OF expression .)
    IDENTIFIER      reduce using rule 36 (expression -> LENGTH OF expression .)
    TEXT            reduce using rule 36 (expression -> LENGTH OF expression .)
    INPUT           reduce using rule 36 (expression -> LENGTH OF expression .)
    NOT             reduce using rule 36 (expression -> LENGTH OF expression .)
    RANDOM          reduce using rule 36 (expression -> LENGTH OF expression .)
    OF              reduce using rule 36 (expression -> LENGTH OF expression .)
    FROM            reduce using rule 36 (expression -> LENGTH OF expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    POWER           shift and go to state 64
    EQ              shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    GE              shift and go to state 68
    LE              shift and go to state 69
    NE              shift and go to state 70
    IN              shift and go to state 71

  ! PLUS            [ reduce using rule 36 (expression -> LENGTH OF expression .) ]
  ! MINUS           [ reduce using rule 36 (expression -> LENGTH OF expression .) ]
  ! TIMES           [ reduce using rule 36 (expression -> LENGTH OF expression .) ]
  ! DIVIDE          [ reduce using rule 36 (expression -> LENGTH OF expression .) ]
  ! POWER           [ reduce using rule 36 (expression -> LENGTH OF expression .) ]
  ! EQ              [ reduce using rule 36 (expression -> LENGTH OF expression .) ]
  ! GT              [ reduce using rule 36 (expression -> LENGTH OF expression .) ]
  ! LT              [ reduce using rule 36 (expression -> LENGTH OF expression .) ]
  ! GE              [ reduce using rule 36 (expression -> LENGTH OF expression .) ]
  ! LE              [ reduce using rule 36 (expression -> LENGTH OF expression .) ]
  ! NE              [ reduce using rule 36 (expression -> LENGTH OF expression .) ]
  ! IN              [ reduce using rule 36 (expression -> LENGTH OF expression .) ]


state 115

    (37) expression -> FIND OCCURENCES OF . expression IN expression
    (35) expression -> . DATATYPE FROM expression TO expression FROM expression
    (36) expression -> . LENGTH OF expression
    (37) expression -> . FIND OCCURENCES OF expression IN expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression POWER expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . YES
    (47) expression -> . NO
    (58) expression -> . comp_expr
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER
    (61) expression -> . random_statement
    (62) expression -> . TEXT
    (63) expression -> . INPUT
    (64) expression -> . CALL IDENTIFIER
    (65) expression -> . CALL IDENTIFIER items
    (66) expression -> . IDENTIFIER INDEX expression
    (48) comp_expr -> . expression EQ expression
    (49) comp_expr -> . expression GT expression
    (50) comp_expr -> . expression LT expression
    (51) comp_expr -> . expression GE expression
    (52) comp_expr -> . expression LE expression
    (53) comp_expr -> . expression NE expression
    (54) comp_expr -> . comp_expr AND comp_expr
    (55) comp_expr -> . comp_expr OR comp_expr
    (56) comp_expr -> . NOT expression
    (57) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 23
    LENGTH          shift and go to state 24
    FIND            shift and go to state 25
    LPAREN          shift and go to state 26
    YES             shift and go to state 27
    NO              shift and go to state 28
    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    TEXT            shift and go to state 44
    INPUT           shift and go to state 34
    CALL            shift and go to state 35
    NOT             shift and go to state 36
    RANDOM          shift and go to state 37

    expression                     shift and go to state 140
    comp_expr                      shift and go to state 29
    random_statement               shift and go to state 32

state 116

    (45) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    POWER           reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    IN              reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    OUTPUT          reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    REPEAT          reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    PAUSE           reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    FUNCTION        reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    FOREVER         reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    EXIT            reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    CONVERT         reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    CALL            reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    DELETE          reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    CLEAR           reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    ACTIVATE        reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    SET             reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    UNTIL           reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    END             reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    DO              reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    TO              reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    THEN            reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    TYPE            reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    DATATYPE        reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    LENGTH          reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    FIND            reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    YES             reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    NO              reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    NUMBER          reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    TEXT            reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    INPUT           reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    NOT             reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    RANDOM          reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    OF              reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    FROM            reduce using rule 45 (expression -> LPAREN expression RPAREN .)


state 117

    (54) comp_expr -> comp_expr AND comp_expr .
    (54) comp_expr -> comp_expr . AND comp_expr
    (55) comp_expr -> comp_expr . OR comp_expr
    (58) expression -> comp_expr .

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! reduce/reduce conflict for EQ resolved using rule 54 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for GT resolved using rule 54 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for LT resolved using rule 54 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for GE resolved using rule 54 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for LE resolved using rule 54 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for NE resolved using rule 54 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for IN resolved using rule 54 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for PLUS resolved using rule 54 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for MINUS resolved using rule 54 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for TIMES resolved using rule 54 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 54 (comp_expr -> comp_expr AND comp_expr .)
  ! reduce/reduce conflict for POWER resolved using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    PLUS            reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    MINUS           reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    TIMES           reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    DIVIDE          reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    POWER           reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    EQ              reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    GT              reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    LT              reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    GE              reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    LE              reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    NE              reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    IN              reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    OUTPUT          reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    REPEAT          reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    PAUSE           reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    FUNCTION        reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    WHILE           reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    FOREVER         reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    EXIT            reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    CONVERT         reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    CALL            reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    RETURN          reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    DELETE          reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    CLEAR           reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    ACTIVATE        reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    SET             reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    IF              reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    $end            reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    UNTIL           reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    END             reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    ELSE            reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    DO              reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    TO              reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    THEN            reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    RPAREN          reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    TYPE            reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    DATATYPE        reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    LENGTH          reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    FIND            reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    LPAREN          reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    YES             reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    NO              reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    NUMBER          reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    IDENTIFIER      reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    TEXT            reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    INPUT           reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    NOT             reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    RANDOM          reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    OF              reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    FROM            reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .)
    AND             shift and go to state 76
    OR              shift and go to state 77

  ! AND             [ reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .) ]
  ! OR              [ reduce using rule 54 (comp_expr -> comp_expr AND comp_expr .) ]
  ! EQ              [ reduce using rule 58 (expression -> comp_expr .) ]
  ! GT              [ reduce using rule 58 (expression -> comp_expr .) ]
  ! LT              [ reduce using rule 58 (expression -> comp_expr .) ]
  ! GE              [ reduce using rule 58 (expression -> comp_expr .) ]
  ! LE              [ reduce using rule 58 (expression -> comp_expr .) ]
  ! NE              [ reduce using rule 58 (expression -> comp_expr .) ]
  ! IN              [ reduce using rule 58 (expression -> comp_expr .) ]
  ! PLUS            [ reduce using rule 58 (expression -> comp_expr .) ]
  ! MINUS           [ reduce using rule 58 (expression -> comp_expr .) ]
  ! TIMES           [ reduce using rule 58 (expression -> comp_expr .) ]
  ! DIVIDE          [ reduce using rule 58 (expression -> comp_expr .) ]
  ! POWER           [ reduce using rule 58 (expression -> comp_expr .) ]


state 118

    (48) comp_expr -> expression . EQ expression
    (49) comp_expr -> expression . GT expression
    (50) comp_expr -> expression . LT expression
    (51) comp_expr -> expression . GE expression
    (52) comp_expr -> expression . LE expression
    (53) comp_expr -> expression . NE expression
    (57) comp_expr -> expression . IN expression
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . POWER expression

    EQ              shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    GE              shift and go to state 68
    LE              shift and go to state 69
    NE              shift and go to state 70
    IN              shift and go to state 71
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    POWER           shift and go to state 64


state 119

    (55) comp_expr -> comp_expr OR comp_expr .
    (54) comp_expr -> comp_expr . AND comp_expr
    (55) comp_expr -> comp_expr . OR comp_expr
    (58) expression -> comp_expr .

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! reduce/reduce conflict for EQ resolved using rule 55 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for GT resolved using rule 55 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for LT resolved using rule 55 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for GE resolved using rule 55 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for LE resolved using rule 55 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for NE resolved using rule 55 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for IN resolved using rule 55 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for PLUS resolved using rule 55 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for MINUS resolved using rule 55 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for TIMES resolved using rule 55 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 55 (comp_expr -> comp_expr OR comp_expr .)
  ! reduce/reduce conflict for POWER resolved using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    PLUS            reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    MINUS           reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    TIMES           reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    DIVIDE          reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    POWER           reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    EQ              reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    GT              reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    LT              reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    GE              reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    LE              reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    NE              reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    IN              reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    OUTPUT          reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    REPEAT          reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    PAUSE           reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    FUNCTION        reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    WHILE           reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    FOREVER         reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    EXIT            reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    CONVERT         reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    CALL            reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    RETURN          reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    DELETE          reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    CLEAR           reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    ACTIVATE        reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    SET             reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    IF              reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    $end            reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    UNTIL           reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    END             reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    ELSE            reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    DO              reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    TO              reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    THEN            reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    RPAREN          reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    TYPE            reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    DATATYPE        reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    LENGTH          reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    FIND            reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    LPAREN          reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    YES             reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    NO              reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    NUMBER          reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    IDENTIFIER      reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    TEXT            reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    INPUT           reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    NOT             reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    RANDOM          reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    OF              reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    FROM            reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .)
    AND             shift and go to state 76
    OR              shift and go to state 77

  ! AND             [ reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .) ]
  ! OR              [ reduce using rule 55 (comp_expr -> comp_expr OR comp_expr .) ]
  ! EQ              [ reduce using rule 58 (expression -> comp_expr .) ]
  ! GT              [ reduce using rule 58 (expression -> comp_expr .) ]
  ! LT              [ reduce using rule 58 (expression -> comp_expr .) ]
  ! GE              [ reduce using rule 58 (expression -> comp_expr .) ]
  ! LE              [ reduce using rule 58 (expression -> comp_expr .) ]
  ! NE              [ reduce using rule 58 (expression -> comp_expr .) ]
  ! IN              [ reduce using rule 58 (expression -> comp_expr .) ]
  ! PLUS            [ reduce using rule 58 (expression -> comp_expr .) ]
  ! MINUS           [ reduce using rule 58 (expression -> comp_expr .) ]
  ! TIMES           [ reduce using rule 58 (expression -> comp_expr .) ]
  ! DIVIDE          [ reduce using rule 58 (expression -> comp_expr .) ]
  ! POWER           [ reduce using rule 58 (expression -> comp_expr .) ]


state 120

    (66) expression -> IDENTIFIER INDEX expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . POWER expression
    (48) comp_expr -> expression . EQ expression
    (49) comp_expr -> expression . GT expression
    (50) comp_expr -> expression . LT expression
    (51) comp_expr -> expression . GE expression
    (52) comp_expr -> expression . LE expression
    (53) comp_expr -> expression . NE expression
    (57) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    OUTPUT          reduce using rule 66 (expression -> IDENTIFIER INDEX expression .)
    REPEAT          reduce using rule 66 (expression -> IDENTIFIER INDEX expression .)
    PAUSE           reduce using rule 66 (expression -> IDENTIFIER INDEX expression .)
    FUNCTION        reduce using rule 66 (expression -> IDENTIFIER INDEX expression .)
    WHILE           reduce using rule 66 (expression -> IDENTIFIER INDEX expression .)
    FOREVER         reduce using rule 66 (expression -> IDENTIFIER INDEX expression .)
    EXIT            reduce using rule 66 (expression -> IDENTIFIER INDEX expression .)
    CONVERT         reduce using rule 66 (expression -> IDENTIFIER INDEX expression .)
    CALL            reduce using rule 66 (expression -> IDENTIFIER INDEX expression .)
    RETURN          reduce using rule 66 (expression -> IDENTIFIER INDEX expression .)
    DELETE          reduce using rule 66 (expression -> IDENTIFIER INDEX expression .)
    CLEAR           reduce using rule 66 (expression -> IDENTIFIER INDEX expression .)
    ACTIVATE        reduce using rule 66 (expression -> IDENTIFIER INDEX expression .)
    SET             reduce using rule 66 (expression -> IDENTIFIER INDEX expression .)
    IF              reduce using rule 66 (expression -> IDENTIFIER INDEX expression .)
    $end            reduce using rule 66 (expression -> IDENTIFIER INDEX expression .)
    UNTIL           reduce using rule 66 (expression -> IDENTIFIER INDEX expression .)
    END             reduce using rule 66 (expression -> IDENTIFIER INDEX expression .)
    ELSE            reduce using rule 66 (expression -> IDENTIFIER INDEX expression .)
    DO              reduce using rule 66 (expression -> IDENTIFIER INDEX expression .)
    TO              reduce using rule 66 (expression -> IDENTIFIER INDEX expression .)
    THEN            reduce using rule 66 (expression -> IDENTIFIER INDEX expression .)
    RPAREN          reduce using rule 66 (expression -> IDENTIFIER INDEX expression .)
    AND             reduce using rule 66 (expression -> IDENTIFIER INDEX expression .)
    OR              reduce using rule 66 (expression -> IDENTIFIER INDEX expression .)
    TYPE            reduce using rule 66 (expression -> IDENTIFIER INDEX expression .)
    DATATYPE        reduce using rule 66 (expression -> IDENTIFIER INDEX expression .)
    LENGTH          reduce using rule 66 (expression -> IDENTIFIER INDEX expression .)
    FIND            reduce using rule 66 (expression -> IDENTIFIER INDEX expression .)
    LPAREN          reduce using rule 66 (expression -> IDENTIFIER INDEX expression .)
    YES             reduce using rule 66 (expression -> IDENTIFIER INDEX expression .)
    NO              reduce using rule 66 (expression -> IDENTIFIER INDEX expression .)
    NUMBER          reduce using rule 66 (expression -> IDENTIFIER INDEX expression .)
    IDENTIFIER      reduce using rule 66 (expression -> IDENTIFIER INDEX expression .)
    TEXT            reduce using rule 66 (expression -> IDENTIFIER INDEX expression .)
    INPUT           reduce using rule 66 (expression -> IDENTIFIER INDEX expression .)
    NOT             reduce using rule 66 (expression -> IDENTIFIER INDEX expression .)
    RANDOM          reduce using rule 66 (expression -> IDENTIFIER INDEX expression .)
    OF              reduce using rule 66 (expression -> IDENTIFIER INDEX expression .)
    FROM            reduce using rule 66 (expression -> IDENTIFIER INDEX expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    POWER           shift and go to state 64
    EQ              shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    GE              shift and go to state 68
    LE              shift and go to state 69
    NE              shift and go to state 70
    IN              shift and go to state 71

  ! PLUS            [ reduce using rule 66 (expression -> IDENTIFIER INDEX expression .) ]
  ! MINUS           [ reduce using rule 66 (expression -> IDENTIFIER INDEX expression .) ]
  ! TIMES           [ reduce using rule 66 (expression -> IDENTIFIER INDEX expression .) ]
  ! DIVIDE          [ reduce using rule 66 (expression -> IDENTIFIER INDEX expression .) ]
  ! POWER           [ reduce using rule 66 (expression -> IDENTIFIER INDEX expression .) ]
  ! EQ              [ reduce using rule 66 (expression -> IDENTIFIER INDEX expression .) ]
  ! GT              [ reduce using rule 66 (expression -> IDENTIFIER INDEX expression .) ]
  ! LT              [ reduce using rule 66 (expression -> IDENTIFIER INDEX expression .) ]
  ! GE              [ reduce using rule 66 (expression -> IDENTIFIER INDEX expression .) ]
  ! LE              [ reduce using rule 66 (expression -> IDENTIFIER INDEX expression .) ]
  ! NE              [ reduce using rule 66 (expression -> IDENTIFIER INDEX expression .) ]
  ! IN              [ reduce using rule 66 (expression -> IDENTIFIER INDEX expression .) ]


state 121

    (6) ask -> TEXT EXPECTING INPUT . AND DATATYPE

    AND             shift and go to state 141


state 122

    (65) expression -> CALL IDENTIFIER items .
    (39) items -> items . expression
    (35) expression -> . DATATYPE FROM expression TO expression FROM expression
    (36) expression -> . LENGTH OF expression
    (37) expression -> . FIND OCCURENCES OF expression IN expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression POWER expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . YES
    (47) expression -> . NO
    (58) expression -> . comp_expr
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER
    (61) expression -> . random_statement
    (62) expression -> . TEXT
    (63) expression -> . INPUT
    (64) expression -> . CALL IDENTIFIER
    (65) expression -> . CALL IDENTIFIER items
    (66) expression -> . IDENTIFIER INDEX expression
    (48) comp_expr -> . expression EQ expression
    (49) comp_expr -> . expression GT expression
    (50) comp_expr -> . expression LT expression
    (51) comp_expr -> . expression GE expression
    (52) comp_expr -> . expression LE expression
    (53) comp_expr -> . expression NE expression
    (54) comp_expr -> . comp_expr AND comp_expr
    (55) comp_expr -> . comp_expr OR comp_expr
    (56) comp_expr -> . NOT expression
    (57) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

  ! shift/reduce conflict for DATATYPE resolved as shift
  ! shift/reduce conflict for LENGTH resolved as shift
  ! shift/reduce conflict for FIND resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for YES resolved as shift
  ! shift/reduce conflict for NO resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TEXT resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for RANDOM resolved as shift
    PLUS            reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    MINUS           reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    TIMES           reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    DIVIDE          reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    POWER           reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    EQ              reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    GT              reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    LT              reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    GE              reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    LE              reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    NE              reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    IN              reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    OUTPUT          reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    REPEAT          reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    PAUSE           reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    FUNCTION        reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    WHILE           reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    FOREVER         reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    EXIT            reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    CONVERT         reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    RETURN          reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    DELETE          reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    CLEAR           reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    ACTIVATE        reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    SET             reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    IF              reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    $end            reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    UNTIL           reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    END             reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    ELSE            reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    DO              reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    TO              reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    THEN            reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    RPAREN          reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    AND             reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    OR              reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    TYPE            reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    OF              reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    FROM            reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    DATATYPE        shift and go to state 23
    LENGTH          shift and go to state 24
    FIND            shift and go to state 25
    LPAREN          shift and go to state 26
    YES             shift and go to state 27
    NO              shift and go to state 28
    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    TEXT            shift and go to state 44
    INPUT           shift and go to state 34
    CALL            shift and go to state 35
    NOT             shift and go to state 36
    RANDOM          shift and go to state 37

  ! CALL            [ reduce using rule 65 (expression -> CALL IDENTIFIER items .) ]
  ! DATATYPE        [ reduce using rule 65 (expression -> CALL IDENTIFIER items .) ]
  ! LENGTH          [ reduce using rule 65 (expression -> CALL IDENTIFIER items .) ]
  ! FIND            [ reduce using rule 65 (expression -> CALL IDENTIFIER items .) ]
  ! LPAREN          [ reduce using rule 65 (expression -> CALL IDENTIFIER items .) ]
  ! YES             [ reduce using rule 65 (expression -> CALL IDENTIFIER items .) ]
  ! NO              [ reduce using rule 65 (expression -> CALL IDENTIFIER items .) ]
  ! NUMBER          [ reduce using rule 65 (expression -> CALL IDENTIFIER items .) ]
  ! IDENTIFIER      [ reduce using rule 65 (expression -> CALL IDENTIFIER items .) ]
  ! TEXT            [ reduce using rule 65 (expression -> CALL IDENTIFIER items .) ]
  ! INPUT           [ reduce using rule 65 (expression -> CALL IDENTIFIER items .) ]
  ! NOT             [ reduce using rule 65 (expression -> CALL IDENTIFIER items .) ]
  ! RANDOM          [ reduce using rule 65 (expression -> CALL IDENTIFIER items .) ]

    expression                     shift and go to state 125
    comp_expr                      shift and go to state 29
    random_statement               shift and go to state 32

state 123

    (7) random_statement -> RANDOM DATATYPE FROM . expression TO expression
    (35) expression -> . DATATYPE FROM expression TO expression FROM expression
    (36) expression -> . LENGTH OF expression
    (37) expression -> . FIND OCCURENCES OF expression IN expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression POWER expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . YES
    (47) expression -> . NO
    (58) expression -> . comp_expr
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER
    (61) expression -> . random_statement
    (62) expression -> . TEXT
    (63) expression -> . INPUT
    (64) expression -> . CALL IDENTIFIER
    (65) expression -> . CALL IDENTIFIER items
    (66) expression -> . IDENTIFIER INDEX expression
    (48) comp_expr -> . expression EQ expression
    (49) comp_expr -> . expression GT expression
    (50) comp_expr -> . expression LT expression
    (51) comp_expr -> . expression GE expression
    (52) comp_expr -> . expression LE expression
    (53) comp_expr -> . expression NE expression
    (54) comp_expr -> . comp_expr AND comp_expr
    (55) comp_expr -> . comp_expr OR comp_expr
    (56) comp_expr -> . NOT expression
    (57) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 23
    LENGTH          shift and go to state 24
    FIND            shift and go to state 25
    LPAREN          shift and go to state 26
    YES             shift and go to state 27
    NO              shift and go to state 28
    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    TEXT            shift and go to state 44
    INPUT           shift and go to state 34
    CALL            shift and go to state 35
    NOT             shift and go to state 36
    RANDOM          shift and go to state 37

    expression                     shift and go to state 142
    comp_expr                      shift and go to state 29
    random_statement               shift and go to state 32

state 124

    (12) statement -> var_assignment TO items type_stmt .

    OUTPUT          reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    REPEAT          reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    PAUSE           reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    FUNCTION        reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    WHILE           reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    FOREVER         reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    EXIT            reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    CONVERT         reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    CALL            reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    RETURN          reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    DELETE          reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    CLEAR           reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    ACTIVATE        reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    SET             reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    IF              reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    $end            reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    UNTIL           reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    END             reduce using rule 12 (statement -> var_assignment TO items type_stmt .)
    ELSE            reduce using rule 12 (statement -> var_assignment TO items type_stmt .)


state 125

    (39) items -> items expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . POWER expression
    (48) comp_expr -> expression . EQ expression
    (49) comp_expr -> expression . GT expression
    (50) comp_expr -> expression . LT expression
    (51) comp_expr -> expression . GE expression
    (52) comp_expr -> expression . LE expression
    (53) comp_expr -> expression . NE expression
    (57) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    TYPE            reduce using rule 39 (items -> items expression .)
    DATATYPE        reduce using rule 39 (items -> items expression .)
    LENGTH          reduce using rule 39 (items -> items expression .)
    FIND            reduce using rule 39 (items -> items expression .)
    LPAREN          reduce using rule 39 (items -> items expression .)
    YES             reduce using rule 39 (items -> items expression .)
    NO              reduce using rule 39 (items -> items expression .)
    NUMBER          reduce using rule 39 (items -> items expression .)
    IDENTIFIER      reduce using rule 39 (items -> items expression .)
    TEXT            reduce using rule 39 (items -> items expression .)
    INPUT           reduce using rule 39 (items -> items expression .)
    CALL            reduce using rule 39 (items -> items expression .)
    NOT             reduce using rule 39 (items -> items expression .)
    RANDOM          reduce using rule 39 (items -> items expression .)
    OUTPUT          reduce using rule 39 (items -> items expression .)
    REPEAT          reduce using rule 39 (items -> items expression .)
    PAUSE           reduce using rule 39 (items -> items expression .)
    FUNCTION        reduce using rule 39 (items -> items expression .)
    WHILE           reduce using rule 39 (items -> items expression .)
    FOREVER         reduce using rule 39 (items -> items expression .)
    EXIT            reduce using rule 39 (items -> items expression .)
    CONVERT         reduce using rule 39 (items -> items expression .)
    RETURN          reduce using rule 39 (items -> items expression .)
    DELETE          reduce using rule 39 (items -> items expression .)
    CLEAR           reduce using rule 39 (items -> items expression .)
    ACTIVATE        reduce using rule 39 (items -> items expression .)
    SET             reduce using rule 39 (items -> items expression .)
    IF              reduce using rule 39 (items -> items expression .)
    $end            reduce using rule 39 (items -> items expression .)
    UNTIL           reduce using rule 39 (items -> items expression .)
    END             reduce using rule 39 (items -> items expression .)
    ELSE            reduce using rule 39 (items -> items expression .)
    AND             reduce using rule 39 (items -> items expression .)
    OR              reduce using rule 39 (items -> items expression .)
    DO              reduce using rule 39 (items -> items expression .)
    TO              reduce using rule 39 (items -> items expression .)
    THEN            reduce using rule 39 (items -> items expression .)
    RPAREN          reduce using rule 39 (items -> items expression .)
    OF              reduce using rule 39 (items -> items expression .)
    FROM            reduce using rule 39 (items -> items expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    POWER           shift and go to state 64
    EQ              shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    GE              shift and go to state 68
    LE              shift and go to state 69
    NE              shift and go to state 70
    IN              shift and go to state 71

  ! PLUS            [ reduce using rule 39 (items -> items expression .) ]
  ! MINUS           [ reduce using rule 39 (items -> items expression .) ]
  ! TIMES           [ reduce using rule 39 (items -> items expression .) ]
  ! DIVIDE          [ reduce using rule 39 (items -> items expression .) ]
  ! POWER           [ reduce using rule 39 (items -> items expression .) ]
  ! EQ              [ reduce using rule 39 (items -> items expression .) ]
  ! GT              [ reduce using rule 39 (items -> items expression .) ]
  ! LT              [ reduce using rule 39 (items -> items expression .) ]
  ! GE              [ reduce using rule 39 (items -> items expression .) ]
  ! LE              [ reduce using rule 39 (items -> items expression .) ]
  ! NE              [ reduce using rule 39 (items -> items expression .) ]
  ! IN              [ reduce using rule 39 (items -> items expression .) ]


state 126

    (18) type_stmt -> TYPE . DATATYPE

    DATATYPE        shift and go to state 143


state 127

    (15) statement -> if_then ELSE THEN statements . end_statement
    (2) statements -> statements . statement
    (3) end_statement -> . END
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . FUNCTION IDENTIFIER WITH arguments MEANS statements end_statement
    (21) statement -> . WHILE expression DO statements end_statement
    (22) statement -> . FOREVER DO statements end_statement
    (23) statement -> . EXIT LOOP
    (24) statement -> . CONVERT expression TO TYPE DATATYPE
    (25) statement -> . CALL IDENTIFIER
    (26) statement -> . CALL IDENTIFIER items
    (27) statement -> . RETURN expression
    (28) statement -> . DELETE DATATYPE IDENTIFIER
    (29) statement -> . DELETE INDEX expression OF DATATYPE IDENTIFIER
    (30) statement -> . CLEAR DATATYPE IDENTIFIER
    (31) statement -> . ACTIVATE TEXT
    (32) statement -> . REPEAT expression TIMES USING IDENTIFIER statements end_statement
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    END             shift and go to state 41
    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    FOREVER         shift and go to state 10
    EXIT            shift and go to state 11
    CONVERT         shift and go to state 12
    CALL            shift and go to state 13
    RETURN          shift and go to state 14
    DELETE          shift and go to state 15
    CLEAR           shift and go to state 16
    ACTIVATE        shift and go to state 17
    SET             shift and go to state 18
    IF              shift and go to state 19

    if_then                        shift and go to state 5
    end_statement                  shift and go to state 144
    statement                      shift and go to state 20
    var_assignment                 shift and go to state 4

state 128

    (16) statement -> REPEAT statements UNTIL expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . POWER expression
    (48) comp_expr -> expression . EQ expression
    (49) comp_expr -> expression . GT expression
    (50) comp_expr -> expression . LT expression
    (51) comp_expr -> expression . GE expression
    (52) comp_expr -> expression . LE expression
    (53) comp_expr -> expression . NE expression
    (57) comp_expr -> expression . IN expression

    OUTPUT          reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    REPEAT          reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    PAUSE           reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    FUNCTION        reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    WHILE           reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    FOREVER         reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    EXIT            reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    CONVERT         reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    CALL            reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    RETURN          reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    DELETE          reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    CLEAR           reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    ACTIVATE        reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    SET             reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    IF              reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    $end            reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    UNTIL           reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    END             reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    ELSE            reduce using rule 16 (statement -> REPEAT statements UNTIL expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    POWER           shift and go to state 64
    EQ              shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    GE              shift and go to state 68
    LE              shift and go to state 69
    NE              shift and go to state 70
    IN              shift and go to state 71


state 129

    (32) statement -> REPEAT expression TIMES USING . IDENTIFIER statements end_statement

    IDENTIFIER      shift and go to state 145


state 130

    (65) expression -> CALL IDENTIFIER items .
    (26) statement -> CALL IDENTIFIER items .
    (39) items -> items . expression
    (35) expression -> . DATATYPE FROM expression TO expression FROM expression
    (36) expression -> . LENGTH OF expression
    (37) expression -> . FIND OCCURENCES OF expression IN expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression POWER expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . YES
    (47) expression -> . NO
    (58) expression -> . comp_expr
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER
    (61) expression -> . random_statement
    (62) expression -> . TEXT
    (63) expression -> . INPUT
    (64) expression -> . CALL IDENTIFIER
    (65) expression -> . CALL IDENTIFIER items
    (66) expression -> . IDENTIFIER INDEX expression
    (48) comp_expr -> . expression EQ expression
    (49) comp_expr -> . expression GT expression
    (50) comp_expr -> . expression LT expression
    (51) comp_expr -> . expression GE expression
    (52) comp_expr -> . expression LE expression
    (53) comp_expr -> . expression NE expression
    (54) comp_expr -> . comp_expr AND comp_expr
    (55) comp_expr -> . comp_expr OR comp_expr
    (56) comp_expr -> . NOT expression
    (57) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

  ! shift/reduce conflict for CALL resolved as shift
    TIMES           reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    PLUS            reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    MINUS           reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    DIVIDE          reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    POWER           reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    EQ              reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    GT              reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    LT              reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    GE              reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    LE              reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    NE              reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    IN              reduce using rule 65 (expression -> CALL IDENTIFIER items .)
    UNTIL           reduce using rule 26 (statement -> CALL IDENTIFIER items .)
    OUTPUT          reduce using rule 26 (statement -> CALL IDENTIFIER items .)
    REPEAT          reduce using rule 26 (statement -> CALL IDENTIFIER items .)
    PAUSE           reduce using rule 26 (statement -> CALL IDENTIFIER items .)
    FUNCTION        reduce using rule 26 (statement -> CALL IDENTIFIER items .)
    WHILE           reduce using rule 26 (statement -> CALL IDENTIFIER items .)
    FOREVER         reduce using rule 26 (statement -> CALL IDENTIFIER items .)
    EXIT            reduce using rule 26 (statement -> CALL IDENTIFIER items .)
    CONVERT         reduce using rule 26 (statement -> CALL IDENTIFIER items .)
    RETURN          reduce using rule 26 (statement -> CALL IDENTIFIER items .)
    DELETE          reduce using rule 26 (statement -> CALL IDENTIFIER items .)
    CLEAR           reduce using rule 26 (statement -> CALL IDENTIFIER items .)
    ACTIVATE        reduce using rule 26 (statement -> CALL IDENTIFIER items .)
    SET             reduce using rule 26 (statement -> CALL IDENTIFIER items .)
    IF              reduce using rule 26 (statement -> CALL IDENTIFIER items .)
    DATATYPE        shift and go to state 23
    LENGTH          shift and go to state 24
    FIND            shift and go to state 25
    LPAREN          shift and go to state 26
    YES             shift and go to state 27
    NO              shift and go to state 28
    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    TEXT            shift and go to state 44
    INPUT           shift and go to state 34
    CALL            shift and go to state 35
    NOT             shift and go to state 36
    RANDOM          shift and go to state 37

  ! CALL            [ reduce using rule 26 (statement -> CALL IDENTIFIER items .) ]

    expression                     shift and go to state 125
    comp_expr                      shift and go to state 29
    random_statement               shift and go to state 32

state 131

    (19) statement -> FUNCTION IDENTIFIER MEANS statements . end_statement
    (2) statements -> statements . statement
    (3) end_statement -> . END
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . FUNCTION IDENTIFIER WITH arguments MEANS statements end_statement
    (21) statement -> . WHILE expression DO statements end_statement
    (22) statement -> . FOREVER DO statements end_statement
    (23) statement -> . EXIT LOOP
    (24) statement -> . CONVERT expression TO TYPE DATATYPE
    (25) statement -> . CALL IDENTIFIER
    (26) statement -> . CALL IDENTIFIER items
    (27) statement -> . RETURN expression
    (28) statement -> . DELETE DATATYPE IDENTIFIER
    (29) statement -> . DELETE INDEX expression OF DATATYPE IDENTIFIER
    (30) statement -> . CLEAR DATATYPE IDENTIFIER
    (31) statement -> . ACTIVATE TEXT
    (32) statement -> . REPEAT expression TIMES USING IDENTIFIER statements end_statement
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    END             shift and go to state 41
    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    FOREVER         shift and go to state 10
    EXIT            shift and go to state 11
    CONVERT         shift and go to state 12
    CALL            shift and go to state 13
    RETURN          shift and go to state 14
    DELETE          shift and go to state 15
    CLEAR           shift and go to state 16
    ACTIVATE        shift and go to state 17
    SET             shift and go to state 18
    IF              shift and go to state 19

    end_statement                  shift and go to state 146
    statement                      shift and go to state 20
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 132

    (33) arguments -> IDENTIFIER .

    MEANS           reduce using rule 33 (arguments -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 33 (arguments -> IDENTIFIER .)


state 133

    (20) statement -> FUNCTION IDENTIFIER WITH arguments . MEANS statements end_statement
    (34) arguments -> arguments . IDENTIFIER

    MEANS           shift and go to state 148
    IDENTIFIER      shift and go to state 147


state 134

    (21) statement -> WHILE expression DO statements . end_statement
    (2) statements -> statements . statement
    (3) end_statement -> . END
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . FUNCTION IDENTIFIER WITH arguments MEANS statements end_statement
    (21) statement -> . WHILE expression DO statements end_statement
    (22) statement -> . FOREVER DO statements end_statement
    (23) statement -> . EXIT LOOP
    (24) statement -> . CONVERT expression TO TYPE DATATYPE
    (25) statement -> . CALL IDENTIFIER
    (26) statement -> . CALL IDENTIFIER items
    (27) statement -> . RETURN expression
    (28) statement -> . DELETE DATATYPE IDENTIFIER
    (29) statement -> . DELETE INDEX expression OF DATATYPE IDENTIFIER
    (30) statement -> . CLEAR DATATYPE IDENTIFIER
    (31) statement -> . ACTIVATE TEXT
    (32) statement -> . REPEAT expression TIMES USING IDENTIFIER statements end_statement
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    END             shift and go to state 41
    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    FOREVER         shift and go to state 10
    EXIT            shift and go to state 11
    CONVERT         shift and go to state 12
    CALL            shift and go to state 13
    RETURN          shift and go to state 14
    DELETE          shift and go to state 15
    CLEAR           shift and go to state 16
    ACTIVATE        shift and go to state 17
    SET             shift and go to state 18
    IF              shift and go to state 19

    end_statement                  shift and go to state 149
    statement                      shift and go to state 20
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 135

    (22) statement -> FOREVER DO statements end_statement .

    OUTPUT          reduce using rule 22 (statement -> FOREVER DO statements end_statement .)
    REPEAT          reduce using rule 22 (statement -> FOREVER DO statements end_statement .)
    PAUSE           reduce using rule 22 (statement -> FOREVER DO statements end_statement .)
    FUNCTION        reduce using rule 22 (statement -> FOREVER DO statements end_statement .)
    WHILE           reduce using rule 22 (statement -> FOREVER DO statements end_statement .)
    FOREVER         reduce using rule 22 (statement -> FOREVER DO statements end_statement .)
    EXIT            reduce using rule 22 (statement -> FOREVER DO statements end_statement .)
    CONVERT         reduce using rule 22 (statement -> FOREVER DO statements end_statement .)
    CALL            reduce using rule 22 (statement -> FOREVER DO statements end_statement .)
    RETURN          reduce using rule 22 (statement -> FOREVER DO statements end_statement .)
    DELETE          reduce using rule 22 (statement -> FOREVER DO statements end_statement .)
    CLEAR           reduce using rule 22 (statement -> FOREVER DO statements end_statement .)
    ACTIVATE        reduce using rule 22 (statement -> FOREVER DO statements end_statement .)
    SET             reduce using rule 22 (statement -> FOREVER DO statements end_statement .)
    IF              reduce using rule 22 (statement -> FOREVER DO statements end_statement .)
    $end            reduce using rule 22 (statement -> FOREVER DO statements end_statement .)
    UNTIL           reduce using rule 22 (statement -> FOREVER DO statements end_statement .)
    END             reduce using rule 22 (statement -> FOREVER DO statements end_statement .)
    ELSE            reduce using rule 22 (statement -> FOREVER DO statements end_statement .)


state 136

    (24) statement -> CONVERT expression TO TYPE . DATATYPE

    DATATYPE        shift and go to state 150


state 137

    (29) statement -> DELETE INDEX expression OF . DATATYPE IDENTIFIER

    DATATYPE        shift and go to state 151


state 138

    (13) if_then -> IF expression THEN statements .
    (2) statements -> statements . statement
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . FUNCTION IDENTIFIER WITH arguments MEANS statements end_statement
    (21) statement -> . WHILE expression DO statements end_statement
    (22) statement -> . FOREVER DO statements end_statement
    (23) statement -> . EXIT LOOP
    (24) statement -> . CONVERT expression TO TYPE DATATYPE
    (25) statement -> . CALL IDENTIFIER
    (26) statement -> . CALL IDENTIFIER items
    (27) statement -> . RETURN expression
    (28) statement -> . DELETE DATATYPE IDENTIFIER
    (29) statement -> . DELETE INDEX expression OF DATATYPE IDENTIFIER
    (30) statement -> . CLEAR DATATYPE IDENTIFIER
    (31) statement -> . ACTIVATE TEXT
    (32) statement -> . REPEAT expression TIMES USING IDENTIFIER statements end_statement
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    ELSE            reduce using rule 13 (if_then -> IF expression THEN statements .)
    END             reduce using rule 13 (if_then -> IF expression THEN statements .)
    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    FOREVER         shift and go to state 10
    EXIT            shift and go to state 11
    CONVERT         shift and go to state 12
    CALL            shift and go to state 13
    RETURN          shift and go to state 14
    DELETE          shift and go to state 15
    CLEAR           shift and go to state 16
    ACTIVATE        shift and go to state 17
    SET             shift and go to state 18
    IF              shift and go to state 19

    statement                      shift and go to state 20
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 139

    (35) expression -> DATATYPE FROM expression TO . expression FROM expression
    (35) expression -> . DATATYPE FROM expression TO expression FROM expression
    (36) expression -> . LENGTH OF expression
    (37) expression -> . FIND OCCURENCES OF expression IN expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression POWER expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . YES
    (47) expression -> . NO
    (58) expression -> . comp_expr
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER
    (61) expression -> . random_statement
    (62) expression -> . TEXT
    (63) expression -> . INPUT
    (64) expression -> . CALL IDENTIFIER
    (65) expression -> . CALL IDENTIFIER items
    (66) expression -> . IDENTIFIER INDEX expression
    (48) comp_expr -> . expression EQ expression
    (49) comp_expr -> . expression GT expression
    (50) comp_expr -> . expression LT expression
    (51) comp_expr -> . expression GE expression
    (52) comp_expr -> . expression LE expression
    (53) comp_expr -> . expression NE expression
    (54) comp_expr -> . comp_expr AND comp_expr
    (55) comp_expr -> . comp_expr OR comp_expr
    (56) comp_expr -> . NOT expression
    (57) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 23
    LENGTH          shift and go to state 24
    FIND            shift and go to state 25
    LPAREN          shift and go to state 26
    YES             shift and go to state 27
    NO              shift and go to state 28
    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    TEXT            shift and go to state 44
    INPUT           shift and go to state 34
    CALL            shift and go to state 35
    NOT             shift and go to state 36
    RANDOM          shift and go to state 37

    expression                     shift and go to state 152
    comp_expr                      shift and go to state 29
    random_statement               shift and go to state 32

state 140

    (37) expression -> FIND OCCURENCES OF expression . IN expression
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . POWER expression
    (48) comp_expr -> expression . EQ expression
    (49) comp_expr -> expression . GT expression
    (50) comp_expr -> expression . LT expression
    (51) comp_expr -> expression . GE expression
    (52) comp_expr -> expression . LE expression
    (53) comp_expr -> expression . NE expression
    (57) comp_expr -> expression . IN expression

    IN              shift and go to state 153
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    POWER           shift and go to state 64
    EQ              shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    GE              shift and go to state 68
    LE              shift and go to state 69
    NE              shift and go to state 70


state 141

    (6) ask -> TEXT EXPECTING INPUT AND . DATATYPE

    DATATYPE        shift and go to state 154


state 142

    (7) random_statement -> RANDOM DATATYPE FROM expression . TO expression
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . POWER expression
    (48) comp_expr -> expression . EQ expression
    (49) comp_expr -> expression . GT expression
    (50) comp_expr -> expression . LT expression
    (51) comp_expr -> expression . GE expression
    (52) comp_expr -> expression . LE expression
    (53) comp_expr -> expression . NE expression
    (57) comp_expr -> expression . IN expression

    TO              shift and go to state 155
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    POWER           shift and go to state 64
    EQ              shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    GE              shift and go to state 68
    LE              shift and go to state 69
    NE              shift and go to state 70
    IN              shift and go to state 71


state 143

    (18) type_stmt -> TYPE DATATYPE .

    OUTPUT          reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    REPEAT          reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    PAUSE           reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    FUNCTION        reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    WHILE           reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    FOREVER         reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    EXIT            reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    CONVERT         reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    CALL            reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    RETURN          reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    DELETE          reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    CLEAR           reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    ACTIVATE        reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    SET             reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    IF              reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    $end            reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    UNTIL           reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    END             reduce using rule 18 (type_stmt -> TYPE DATATYPE .)
    ELSE            reduce using rule 18 (type_stmt -> TYPE DATATYPE .)


state 144

    (15) statement -> if_then ELSE THEN statements end_statement .

    OUTPUT          reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    REPEAT          reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    PAUSE           reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    FUNCTION        reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    WHILE           reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    FOREVER         reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    EXIT            reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    CONVERT         reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    CALL            reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    RETURN          reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    DELETE          reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    CLEAR           reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    ACTIVATE        reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    SET             reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    IF              reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    $end            reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    UNTIL           reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    END             reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)
    ELSE            reduce using rule 15 (statement -> if_then ELSE THEN statements end_statement .)


state 145

    (32) statement -> REPEAT expression TIMES USING IDENTIFIER . statements end_statement
    (1) statements -> . statement
    (2) statements -> . statements statement
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . FUNCTION IDENTIFIER WITH arguments MEANS statements end_statement
    (21) statement -> . WHILE expression DO statements end_statement
    (22) statement -> . FOREVER DO statements end_statement
    (23) statement -> . EXIT LOOP
    (24) statement -> . CONVERT expression TO TYPE DATATYPE
    (25) statement -> . CALL IDENTIFIER
    (26) statement -> . CALL IDENTIFIER items
    (27) statement -> . RETURN expression
    (28) statement -> . DELETE DATATYPE IDENTIFIER
    (29) statement -> . DELETE INDEX expression OF DATATYPE IDENTIFIER
    (30) statement -> . CLEAR DATATYPE IDENTIFIER
    (31) statement -> . ACTIVATE TEXT
    (32) statement -> . REPEAT expression TIMES USING IDENTIFIER statements end_statement
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    FOREVER         shift and go to state 10
    EXIT            shift and go to state 11
    CONVERT         shift and go to state 12
    CALL            shift and go to state 13
    RETURN          shift and go to state 14
    DELETE          shift and go to state 15
    CLEAR           shift and go to state 16
    ACTIVATE        shift and go to state 17
    SET             shift and go to state 18
    IF              shift and go to state 19

    statements                     shift and go to state 156
    statement                      shift and go to state 2
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 146

    (19) statement -> FUNCTION IDENTIFIER MEANS statements end_statement .

    OUTPUT          reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    REPEAT          reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    PAUSE           reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    FUNCTION        reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    WHILE           reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    FOREVER         reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    EXIT            reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    CONVERT         reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    CALL            reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    RETURN          reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    DELETE          reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    CLEAR           reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    ACTIVATE        reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    SET             reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    IF              reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    $end            reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    UNTIL           reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    END             reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)
    ELSE            reduce using rule 19 (statement -> FUNCTION IDENTIFIER MEANS statements end_statement .)


state 147

    (34) arguments -> arguments IDENTIFIER .

    MEANS           reduce using rule 34 (arguments -> arguments IDENTIFIER .)
    IDENTIFIER      reduce using rule 34 (arguments -> arguments IDENTIFIER .)


state 148

    (20) statement -> FUNCTION IDENTIFIER WITH arguments MEANS . statements end_statement
    (1) statements -> . statement
    (2) statements -> . statements statement
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . FUNCTION IDENTIFIER WITH arguments MEANS statements end_statement
    (21) statement -> . WHILE expression DO statements end_statement
    (22) statement -> . FOREVER DO statements end_statement
    (23) statement -> . EXIT LOOP
    (24) statement -> . CONVERT expression TO TYPE DATATYPE
    (25) statement -> . CALL IDENTIFIER
    (26) statement -> . CALL IDENTIFIER items
    (27) statement -> . RETURN expression
    (28) statement -> . DELETE DATATYPE IDENTIFIER
    (29) statement -> . DELETE INDEX expression OF DATATYPE IDENTIFIER
    (30) statement -> . CLEAR DATATYPE IDENTIFIER
    (31) statement -> . ACTIVATE TEXT
    (32) statement -> . REPEAT expression TIMES USING IDENTIFIER statements end_statement
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    FOREVER         shift and go to state 10
    EXIT            shift and go to state 11
    CONVERT         shift and go to state 12
    CALL            shift and go to state 13
    RETURN          shift and go to state 14
    DELETE          shift and go to state 15
    CLEAR           shift and go to state 16
    ACTIVATE        shift and go to state 17
    SET             shift and go to state 18
    IF              shift and go to state 19

    statements                     shift and go to state 157
    statement                      shift and go to state 2
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 149

    (21) statement -> WHILE expression DO statements end_statement .

    OUTPUT          reduce using rule 21 (statement -> WHILE expression DO statements end_statement .)
    REPEAT          reduce using rule 21 (statement -> WHILE expression DO statements end_statement .)
    PAUSE           reduce using rule 21 (statement -> WHILE expression DO statements end_statement .)
    FUNCTION        reduce using rule 21 (statement -> WHILE expression DO statements end_statement .)
    WHILE           reduce using rule 21 (statement -> WHILE expression DO statements end_statement .)
    FOREVER         reduce using rule 21 (statement -> WHILE expression DO statements end_statement .)
    EXIT            reduce using rule 21 (statement -> WHILE expression DO statements end_statement .)
    CONVERT         reduce using rule 21 (statement -> WHILE expression DO statements end_statement .)
    CALL            reduce using rule 21 (statement -> WHILE expression DO statements end_statement .)
    RETURN          reduce using rule 21 (statement -> WHILE expression DO statements end_statement .)
    DELETE          reduce using rule 21 (statement -> WHILE expression DO statements end_statement .)
    CLEAR           reduce using rule 21 (statement -> WHILE expression DO statements end_statement .)
    ACTIVATE        reduce using rule 21 (statement -> WHILE expression DO statements end_statement .)
    SET             reduce using rule 21 (statement -> WHILE expression DO statements end_statement .)
    IF              reduce using rule 21 (statement -> WHILE expression DO statements end_statement .)
    $end            reduce using rule 21 (statement -> WHILE expression DO statements end_statement .)
    UNTIL           reduce using rule 21 (statement -> WHILE expression DO statements end_statement .)
    END             reduce using rule 21 (statement -> WHILE expression DO statements end_statement .)
    ELSE            reduce using rule 21 (statement -> WHILE expression DO statements end_statement .)


state 150

    (24) statement -> CONVERT expression TO TYPE DATATYPE .

    OUTPUT          reduce using rule 24 (statement -> CONVERT expression TO TYPE DATATYPE .)
    REPEAT          reduce using rule 24 (statement -> CONVERT expression TO TYPE DATATYPE .)
    PAUSE           reduce using rule 24 (statement -> CONVERT expression TO TYPE DATATYPE .)
    FUNCTION        reduce using rule 24 (statement -> CONVERT expression TO TYPE DATATYPE .)
    WHILE           reduce using rule 24 (statement -> CONVERT expression TO TYPE DATATYPE .)
    FOREVER         reduce using rule 24 (statement -> CONVERT expression TO TYPE DATATYPE .)
    EXIT            reduce using rule 24 (statement -> CONVERT expression TO TYPE DATATYPE .)
    CONVERT         reduce using rule 24 (statement -> CONVERT expression TO TYPE DATATYPE .)
    CALL            reduce using rule 24 (statement -> CONVERT expression TO TYPE DATATYPE .)
    RETURN          reduce using rule 24 (statement -> CONVERT expression TO TYPE DATATYPE .)
    DELETE          reduce using rule 24 (statement -> CONVERT expression TO TYPE DATATYPE .)
    CLEAR           reduce using rule 24 (statement -> CONVERT expression TO TYPE DATATYPE .)
    ACTIVATE        reduce using rule 24 (statement -> CONVERT expression TO TYPE DATATYPE .)
    SET             reduce using rule 24 (statement -> CONVERT expression TO TYPE DATATYPE .)
    IF              reduce using rule 24 (statement -> CONVERT expression TO TYPE DATATYPE .)
    $end            reduce using rule 24 (statement -> CONVERT expression TO TYPE DATATYPE .)
    UNTIL           reduce using rule 24 (statement -> CONVERT expression TO TYPE DATATYPE .)
    END             reduce using rule 24 (statement -> CONVERT expression TO TYPE DATATYPE .)
    ELSE            reduce using rule 24 (statement -> CONVERT expression TO TYPE DATATYPE .)


state 151

    (29) statement -> DELETE INDEX expression OF DATATYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 158


state 152

    (35) expression -> DATATYPE FROM expression TO expression . FROM expression
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . POWER expression
    (48) comp_expr -> expression . EQ expression
    (49) comp_expr -> expression . GT expression
    (50) comp_expr -> expression . LT expression
    (51) comp_expr -> expression . GE expression
    (52) comp_expr -> expression . LE expression
    (53) comp_expr -> expression . NE expression
    (57) comp_expr -> expression . IN expression

    FROM            shift and go to state 159
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    POWER           shift and go to state 64
    EQ              shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    GE              shift and go to state 68
    LE              shift and go to state 69
    NE              shift and go to state 70
    IN              shift and go to state 71


state 153

    (37) expression -> FIND OCCURENCES OF expression IN . expression
    (57) comp_expr -> expression IN . expression
    (35) expression -> . DATATYPE FROM expression TO expression FROM expression
    (36) expression -> . LENGTH OF expression
    (37) expression -> . FIND OCCURENCES OF expression IN expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression POWER expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . YES
    (47) expression -> . NO
    (58) expression -> . comp_expr
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER
    (61) expression -> . random_statement
    (62) expression -> . TEXT
    (63) expression -> . INPUT
    (64) expression -> . CALL IDENTIFIER
    (65) expression -> . CALL IDENTIFIER items
    (66) expression -> . IDENTIFIER INDEX expression
    (48) comp_expr -> . expression EQ expression
    (49) comp_expr -> . expression GT expression
    (50) comp_expr -> . expression LT expression
    (51) comp_expr -> . expression GE expression
    (52) comp_expr -> . expression LE expression
    (53) comp_expr -> . expression NE expression
    (54) comp_expr -> . comp_expr AND comp_expr
    (55) comp_expr -> . comp_expr OR comp_expr
    (56) comp_expr -> . NOT expression
    (57) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 23
    LENGTH          shift and go to state 24
    FIND            shift and go to state 25
    LPAREN          shift and go to state 26
    YES             shift and go to state 27
    NO              shift and go to state 28
    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    TEXT            shift and go to state 44
    INPUT           shift and go to state 34
    CALL            shift and go to state 35
    NOT             shift and go to state 36
    RANDOM          shift and go to state 37

    expression                     shift and go to state 160
    comp_expr                      shift and go to state 29
    random_statement               shift and go to state 32

state 154

    (6) ask -> TEXT EXPECTING INPUT AND DATATYPE .

    OUTPUT          reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    REPEAT          reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    PAUSE           reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    FUNCTION        reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    WHILE           reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    FOREVER         reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    EXIT            reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    CONVERT         reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    CALL            reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    RETURN          reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    DELETE          reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    CLEAR           reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    ACTIVATE        reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    SET             reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    IF              reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    $end            reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    UNTIL           reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    END             reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)
    ELSE            reduce using rule 6 (ask -> TEXT EXPECTING INPUT AND DATATYPE .)


state 155

    (7) random_statement -> RANDOM DATATYPE FROM expression TO . expression
    (35) expression -> . DATATYPE FROM expression TO expression FROM expression
    (36) expression -> . LENGTH OF expression
    (37) expression -> . FIND OCCURENCES OF expression IN expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression POWER expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . YES
    (47) expression -> . NO
    (58) expression -> . comp_expr
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER
    (61) expression -> . random_statement
    (62) expression -> . TEXT
    (63) expression -> . INPUT
    (64) expression -> . CALL IDENTIFIER
    (65) expression -> . CALL IDENTIFIER items
    (66) expression -> . IDENTIFIER INDEX expression
    (48) comp_expr -> . expression EQ expression
    (49) comp_expr -> . expression GT expression
    (50) comp_expr -> . expression LT expression
    (51) comp_expr -> . expression GE expression
    (52) comp_expr -> . expression LE expression
    (53) comp_expr -> . expression NE expression
    (54) comp_expr -> . comp_expr AND comp_expr
    (55) comp_expr -> . comp_expr OR comp_expr
    (56) comp_expr -> . NOT expression
    (57) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 23
    LENGTH          shift and go to state 24
    FIND            shift and go to state 25
    LPAREN          shift and go to state 26
    YES             shift and go to state 27
    NO              shift and go to state 28
    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    TEXT            shift and go to state 44
    INPUT           shift and go to state 34
    CALL            shift and go to state 35
    NOT             shift and go to state 36
    RANDOM          shift and go to state 37

    expression                     shift and go to state 161
    comp_expr                      shift and go to state 29
    random_statement               shift and go to state 32

state 156

    (32) statement -> REPEAT expression TIMES USING IDENTIFIER statements . end_statement
    (2) statements -> statements . statement
    (3) end_statement -> . END
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . FUNCTION IDENTIFIER WITH arguments MEANS statements end_statement
    (21) statement -> . WHILE expression DO statements end_statement
    (22) statement -> . FOREVER DO statements end_statement
    (23) statement -> . EXIT LOOP
    (24) statement -> . CONVERT expression TO TYPE DATATYPE
    (25) statement -> . CALL IDENTIFIER
    (26) statement -> . CALL IDENTIFIER items
    (27) statement -> . RETURN expression
    (28) statement -> . DELETE DATATYPE IDENTIFIER
    (29) statement -> . DELETE INDEX expression OF DATATYPE IDENTIFIER
    (30) statement -> . CLEAR DATATYPE IDENTIFIER
    (31) statement -> . ACTIVATE TEXT
    (32) statement -> . REPEAT expression TIMES USING IDENTIFIER statements end_statement
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    END             shift and go to state 41
    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    FOREVER         shift and go to state 10
    EXIT            shift and go to state 11
    CONVERT         shift and go to state 12
    CALL            shift and go to state 13
    RETURN          shift and go to state 14
    DELETE          shift and go to state 15
    CLEAR           shift and go to state 16
    ACTIVATE        shift and go to state 17
    SET             shift and go to state 18
    IF              shift and go to state 19

    end_statement                  shift and go to state 162
    statement                      shift and go to state 20
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 157

    (20) statement -> FUNCTION IDENTIFIER WITH arguments MEANS statements . end_statement
    (2) statements -> statements . statement
    (3) end_statement -> . END
    (4) statement -> . OUTPUT expression
    (5) statement -> . OUTPUT ask
    (9) statement -> . var_assignment TO expression
    (10) statement -> . var_assignment
    (11) statement -> . var_assignment TO ask
    (12) statement -> . var_assignment TO items type_stmt
    (14) statement -> . if_then end_statement
    (15) statement -> . if_then ELSE THEN statements end_statement
    (16) statement -> . REPEAT statements UNTIL expression
    (17) statement -> . PAUSE expression
    (19) statement -> . FUNCTION IDENTIFIER MEANS statements end_statement
    (20) statement -> . FUNCTION IDENTIFIER WITH arguments MEANS statements end_statement
    (21) statement -> . WHILE expression DO statements end_statement
    (22) statement -> . FOREVER DO statements end_statement
    (23) statement -> . EXIT LOOP
    (24) statement -> . CONVERT expression TO TYPE DATATYPE
    (25) statement -> . CALL IDENTIFIER
    (26) statement -> . CALL IDENTIFIER items
    (27) statement -> . RETURN expression
    (28) statement -> . DELETE DATATYPE IDENTIFIER
    (29) statement -> . DELETE INDEX expression OF DATATYPE IDENTIFIER
    (30) statement -> . CLEAR DATATYPE IDENTIFIER
    (31) statement -> . ACTIVATE TEXT
    (32) statement -> . REPEAT expression TIMES USING IDENTIFIER statements end_statement
    (8) var_assignment -> . SET IDENTIFIER
    (13) if_then -> . IF expression THEN statements

    END             shift and go to state 41
    OUTPUT          shift and go to state 3
    REPEAT          shift and go to state 6
    PAUSE           shift and go to state 7
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 9
    FOREVER         shift and go to state 10
    EXIT            shift and go to state 11
    CONVERT         shift and go to state 12
    CALL            shift and go to state 13
    RETURN          shift and go to state 14
    DELETE          shift and go to state 15
    CLEAR           shift and go to state 16
    ACTIVATE        shift and go to state 17
    SET             shift and go to state 18
    IF              shift and go to state 19

    end_statement                  shift and go to state 163
    statement                      shift and go to state 20
    var_assignment                 shift and go to state 4
    if_then                        shift and go to state 5

state 158

    (29) statement -> DELETE INDEX expression OF DATATYPE IDENTIFIER .

    OUTPUT          reduce using rule 29 (statement -> DELETE INDEX expression OF DATATYPE IDENTIFIER .)
    REPEAT          reduce using rule 29 (statement -> DELETE INDEX expression OF DATATYPE IDENTIFIER .)
    PAUSE           reduce using rule 29 (statement -> DELETE INDEX expression OF DATATYPE IDENTIFIER .)
    FUNCTION        reduce using rule 29 (statement -> DELETE INDEX expression OF DATATYPE IDENTIFIER .)
    WHILE           reduce using rule 29 (statement -> DELETE INDEX expression OF DATATYPE IDENTIFIER .)
    FOREVER         reduce using rule 29 (statement -> DELETE INDEX expression OF DATATYPE IDENTIFIER .)
    EXIT            reduce using rule 29 (statement -> DELETE INDEX expression OF DATATYPE IDENTIFIER .)
    CONVERT         reduce using rule 29 (statement -> DELETE INDEX expression OF DATATYPE IDENTIFIER .)
    CALL            reduce using rule 29 (statement -> DELETE INDEX expression OF DATATYPE IDENTIFIER .)
    RETURN          reduce using rule 29 (statement -> DELETE INDEX expression OF DATATYPE IDENTIFIER .)
    DELETE          reduce using rule 29 (statement -> DELETE INDEX expression OF DATATYPE IDENTIFIER .)
    CLEAR           reduce using rule 29 (statement -> DELETE INDEX expression OF DATATYPE IDENTIFIER .)
    ACTIVATE        reduce using rule 29 (statement -> DELETE INDEX expression OF DATATYPE IDENTIFIER .)
    SET             reduce using rule 29 (statement -> DELETE INDEX expression OF DATATYPE IDENTIFIER .)
    IF              reduce using rule 29 (statement -> DELETE INDEX expression OF DATATYPE IDENTIFIER .)
    $end            reduce using rule 29 (statement -> DELETE INDEX expression OF DATATYPE IDENTIFIER .)
    UNTIL           reduce using rule 29 (statement -> DELETE INDEX expression OF DATATYPE IDENTIFIER .)
    END             reduce using rule 29 (statement -> DELETE INDEX expression OF DATATYPE IDENTIFIER .)
    ELSE            reduce using rule 29 (statement -> DELETE INDEX expression OF DATATYPE IDENTIFIER .)


state 159

    (35) expression -> DATATYPE FROM expression TO expression FROM . expression
    (35) expression -> . DATATYPE FROM expression TO expression FROM expression
    (36) expression -> . LENGTH OF expression
    (37) expression -> . FIND OCCURENCES OF expression IN expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression TIMES expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression POWER expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . YES
    (47) expression -> . NO
    (58) expression -> . comp_expr
    (59) expression -> . NUMBER
    (60) expression -> . IDENTIFIER
    (61) expression -> . random_statement
    (62) expression -> . TEXT
    (63) expression -> . INPUT
    (64) expression -> . CALL IDENTIFIER
    (65) expression -> . CALL IDENTIFIER items
    (66) expression -> . IDENTIFIER INDEX expression
    (48) comp_expr -> . expression EQ expression
    (49) comp_expr -> . expression GT expression
    (50) comp_expr -> . expression LT expression
    (51) comp_expr -> . expression GE expression
    (52) comp_expr -> . expression LE expression
    (53) comp_expr -> . expression NE expression
    (54) comp_expr -> . comp_expr AND comp_expr
    (55) comp_expr -> . comp_expr OR comp_expr
    (56) comp_expr -> . NOT expression
    (57) comp_expr -> . expression IN expression
    (7) random_statement -> . RANDOM DATATYPE FROM expression TO expression

    DATATYPE        shift and go to state 23
    LENGTH          shift and go to state 24
    FIND            shift and go to state 25
    LPAREN          shift and go to state 26
    YES             shift and go to state 27
    NO              shift and go to state 28
    NUMBER          shift and go to state 30
    IDENTIFIER      shift and go to state 31
    TEXT            shift and go to state 44
    INPUT           shift and go to state 34
    CALL            shift and go to state 35
    NOT             shift and go to state 36
    RANDOM          shift and go to state 37

    expression                     shift and go to state 164
    comp_expr                      shift and go to state 29
    random_statement               shift and go to state 32

state 160

    (37) expression -> FIND OCCURENCES OF expression IN expression .
    (57) comp_expr -> expression IN expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . POWER expression
    (48) comp_expr -> expression . EQ expression
    (49) comp_expr -> expression . GT expression
    (50) comp_expr -> expression . LT expression
    (51) comp_expr -> expression . GE expression
    (52) comp_expr -> expression . LE expression
    (53) comp_expr -> expression . NE expression
    (57) comp_expr -> expression . IN expression

  ! reduce/reduce conflict for AND resolved using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
  ! reduce/reduce conflict for OR resolved using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
  ! reduce/reduce conflict for IN resolved using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
  ! reduce/reduce conflict for TIMES resolved using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
  ! reduce/reduce conflict for POWER resolved using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
  ! reduce/reduce conflict for EQ resolved using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
  ! reduce/reduce conflict for GT resolved using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
  ! reduce/reduce conflict for LT resolved using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
  ! reduce/reduce conflict for GE resolved using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
  ! reduce/reduce conflict for LE resolved using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
  ! reduce/reduce conflict for NE resolved using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    OUTPUT          reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
    REPEAT          reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
    PAUSE           reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
    FUNCTION        reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
    WHILE           reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
    FOREVER         reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
    EXIT            reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
    CONVERT         reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
    CALL            reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
    RETURN          reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
    DELETE          reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
    CLEAR           reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
    ACTIVATE        reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
    SET             reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
    IF              reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
    $end            reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
    UNTIL           reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
    END             reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
    ELSE            reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
    DO              reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
    TO              reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
    THEN            reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
    RPAREN          reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
    AND             reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
    OR              reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
    TYPE            reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
    DATATYPE        reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
    LENGTH          reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
    FIND            reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
    LPAREN          reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
    YES             reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
    NO              reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
    NUMBER          reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
    IDENTIFIER      reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
    TEXT            reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
    INPUT           reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
    NOT             reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
    RANDOM          reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
    OF              reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
    FROM            reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    POWER           shift and go to state 64
    EQ              shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    GE              shift and go to state 68
    LE              shift and go to state 69
    NE              shift and go to state 70
    IN              shift and go to state 71

  ! PLUS            [ reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .) ]
  ! MINUS           [ reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .) ]
  ! TIMES           [ reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .) ]
  ! DIVIDE          [ reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .) ]
  ! POWER           [ reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .) ]
  ! EQ              [ reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .) ]
  ! GT              [ reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .) ]
  ! LT              [ reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .) ]
  ! GE              [ reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .) ]
  ! LE              [ reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .) ]
  ! NE              [ reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .) ]
  ! IN              [ reduce using rule 37 (expression -> FIND OCCURENCES OF expression IN expression .) ]
  ! AND             [ reduce using rule 57 (comp_expr -> expression IN expression .) ]
  ! OR              [ reduce using rule 57 (comp_expr -> expression IN expression .) ]
  ! IN              [ reduce using rule 57 (comp_expr -> expression IN expression .) ]
  ! PLUS            [ reduce using rule 57 (comp_expr -> expression IN expression .) ]
  ! MINUS           [ reduce using rule 57 (comp_expr -> expression IN expression .) ]
  ! TIMES           [ reduce using rule 57 (comp_expr -> expression IN expression .) ]
  ! DIVIDE          [ reduce using rule 57 (comp_expr -> expression IN expression .) ]
  ! POWER           [ reduce using rule 57 (comp_expr -> expression IN expression .) ]
  ! EQ              [ reduce using rule 57 (comp_expr -> expression IN expression .) ]
  ! GT              [ reduce using rule 57 (comp_expr -> expression IN expression .) ]
  ! LT              [ reduce using rule 57 (comp_expr -> expression IN expression .) ]
  ! GE              [ reduce using rule 57 (comp_expr -> expression IN expression .) ]
  ! LE              [ reduce using rule 57 (comp_expr -> expression IN expression .) ]
  ! NE              [ reduce using rule 57 (comp_expr -> expression IN expression .) ]


state 161

    (7) random_statement -> RANDOM DATATYPE FROM expression TO expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . POWER expression
    (48) comp_expr -> expression . EQ expression
    (49) comp_expr -> expression . GT expression
    (50) comp_expr -> expression . LT expression
    (51) comp_expr -> expression . GE expression
    (52) comp_expr -> expression . LE expression
    (53) comp_expr -> expression . NE expression
    (57) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    OUTPUT          reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    REPEAT          reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    PAUSE           reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    FUNCTION        reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    WHILE           reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    FOREVER         reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    EXIT            reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    CONVERT         reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    CALL            reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    RETURN          reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    DELETE          reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    CLEAR           reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    ACTIVATE        reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    SET             reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    IF              reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    $end            reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    UNTIL           reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    END             reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    ELSE            reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    DO              reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    TO              reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    THEN            reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    RPAREN          reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    AND             reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    OR              reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    TYPE            reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    DATATYPE        reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    LENGTH          reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    FIND            reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    LPAREN          reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    YES             reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    NO              reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    NUMBER          reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    IDENTIFIER      reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    TEXT            reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    INPUT           reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    NOT             reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    RANDOM          reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    OF              reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    FROM            reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    POWER           shift and go to state 64
    EQ              shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    GE              shift and go to state 68
    LE              shift and go to state 69
    NE              shift and go to state 70
    IN              shift and go to state 71

  ! PLUS            [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! MINUS           [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! TIMES           [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! DIVIDE          [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! POWER           [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! EQ              [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! GT              [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! LT              [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! GE              [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! LE              [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! NE              [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]
  ! IN              [ reduce using rule 7 (random_statement -> RANDOM DATATYPE FROM expression TO expression .) ]


state 162

    (32) statement -> REPEAT expression TIMES USING IDENTIFIER statements end_statement .

    OUTPUT          reduce using rule 32 (statement -> REPEAT expression TIMES USING IDENTIFIER statements end_statement .)
    REPEAT          reduce using rule 32 (statement -> REPEAT expression TIMES USING IDENTIFIER statements end_statement .)
    PAUSE           reduce using rule 32 (statement -> REPEAT expression TIMES USING IDENTIFIER statements end_statement .)
    FUNCTION        reduce using rule 32 (statement -> REPEAT expression TIMES USING IDENTIFIER statements end_statement .)
    WHILE           reduce using rule 32 (statement -> REPEAT expression TIMES USING IDENTIFIER statements end_statement .)
    FOREVER         reduce using rule 32 (statement -> REPEAT expression TIMES USING IDENTIFIER statements end_statement .)
    EXIT            reduce using rule 32 (statement -> REPEAT expression TIMES USING IDENTIFIER statements end_statement .)
    CONVERT         reduce using rule 32 (statement -> REPEAT expression TIMES USING IDENTIFIER statements end_statement .)
    CALL            reduce using rule 32 (statement -> REPEAT expression TIMES USING IDENTIFIER statements end_statement .)
    RETURN          reduce using rule 32 (statement -> REPEAT expression TIMES USING IDENTIFIER statements end_statement .)
    DELETE          reduce using rule 32 (statement -> REPEAT expression TIMES USING IDENTIFIER statements end_statement .)
    CLEAR           reduce using rule 32 (statement -> REPEAT expression TIMES USING IDENTIFIER statements end_statement .)
    ACTIVATE        reduce using rule 32 (statement -> REPEAT expression TIMES USING IDENTIFIER statements end_statement .)
    SET             reduce using rule 32 (statement -> REPEAT expression TIMES USING IDENTIFIER statements end_statement .)
    IF              reduce using rule 32 (statement -> REPEAT expression TIMES USING IDENTIFIER statements end_statement .)
    $end            reduce using rule 32 (statement -> REPEAT expression TIMES USING IDENTIFIER statements end_statement .)
    UNTIL           reduce using rule 32 (statement -> REPEAT expression TIMES USING IDENTIFIER statements end_statement .)
    END             reduce using rule 32 (statement -> REPEAT expression TIMES USING IDENTIFIER statements end_statement .)
    ELSE            reduce using rule 32 (statement -> REPEAT expression TIMES USING IDENTIFIER statements end_statement .)


state 163

    (20) statement -> FUNCTION IDENTIFIER WITH arguments MEANS statements end_statement .

    OUTPUT          reduce using rule 20 (statement -> FUNCTION IDENTIFIER WITH arguments MEANS statements end_statement .)
    REPEAT          reduce using rule 20 (statement -> FUNCTION IDENTIFIER WITH arguments MEANS statements end_statement .)
    PAUSE           reduce using rule 20 (statement -> FUNCTION IDENTIFIER WITH arguments MEANS statements end_statement .)
    FUNCTION        reduce using rule 20 (statement -> FUNCTION IDENTIFIER WITH arguments MEANS statements end_statement .)
    WHILE           reduce using rule 20 (statement -> FUNCTION IDENTIFIER WITH arguments MEANS statements end_statement .)
    FOREVER         reduce using rule 20 (statement -> FUNCTION IDENTIFIER WITH arguments MEANS statements end_statement .)
    EXIT            reduce using rule 20 (statement -> FUNCTION IDENTIFIER WITH arguments MEANS statements end_statement .)
    CONVERT         reduce using rule 20 (statement -> FUNCTION IDENTIFIER WITH arguments MEANS statements end_statement .)
    CALL            reduce using rule 20 (statement -> FUNCTION IDENTIFIER WITH arguments MEANS statements end_statement .)
    RETURN          reduce using rule 20 (statement -> FUNCTION IDENTIFIER WITH arguments MEANS statements end_statement .)
    DELETE          reduce using rule 20 (statement -> FUNCTION IDENTIFIER WITH arguments MEANS statements end_statement .)
    CLEAR           reduce using rule 20 (statement -> FUNCTION IDENTIFIER WITH arguments MEANS statements end_statement .)
    ACTIVATE        reduce using rule 20 (statement -> FUNCTION IDENTIFIER WITH arguments MEANS statements end_statement .)
    SET             reduce using rule 20 (statement -> FUNCTION IDENTIFIER WITH arguments MEANS statements end_statement .)
    IF              reduce using rule 20 (statement -> FUNCTION IDENTIFIER WITH arguments MEANS statements end_statement .)
    $end            reduce using rule 20 (statement -> FUNCTION IDENTIFIER WITH arguments MEANS statements end_statement .)
    UNTIL           reduce using rule 20 (statement -> FUNCTION IDENTIFIER WITH arguments MEANS statements end_statement .)
    END             reduce using rule 20 (statement -> FUNCTION IDENTIFIER WITH arguments MEANS statements end_statement .)
    ELSE            reduce using rule 20 (statement -> FUNCTION IDENTIFIER WITH arguments MEANS statements end_statement .)


state 164

    (35) expression -> DATATYPE FROM expression TO expression FROM expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . TIMES expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . POWER expression
    (48) comp_expr -> expression . EQ expression
    (49) comp_expr -> expression . GT expression
    (50) comp_expr -> expression . LT expression
    (51) comp_expr -> expression . GE expression
    (52) comp_expr -> expression . LE expression
    (53) comp_expr -> expression . NE expression
    (57) comp_expr -> expression . IN expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    OUTPUT          reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    REPEAT          reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    PAUSE           reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    FUNCTION        reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    WHILE           reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    FOREVER         reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    EXIT            reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    CONVERT         reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    CALL            reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    RETURN          reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    DELETE          reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    CLEAR           reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    ACTIVATE        reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    SET             reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    IF              reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    $end            reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    UNTIL           reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    END             reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    ELSE            reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    DO              reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    TO              reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    THEN            reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    RPAREN          reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    AND             reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    OR              reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    TYPE            reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    DATATYPE        reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    LENGTH          reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    FIND            reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    LPAREN          reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    YES             reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    NO              reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    NUMBER          reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    IDENTIFIER      reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    TEXT            reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    INPUT           reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    NOT             reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    RANDOM          reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    OF              reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    FROM            reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    POWER           shift and go to state 64
    EQ              shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    GE              shift and go to state 68
    LE              shift and go to state 69
    NE              shift and go to state 70
    IN              shift and go to state 71

  ! PLUS            [ reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .) ]
  ! MINUS           [ reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .) ]
  ! TIMES           [ reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .) ]
  ! DIVIDE          [ reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .) ]
  ! POWER           [ reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .) ]
  ! EQ              [ reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .) ]
  ! GT              [ reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .) ]
  ! LT              [ reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .) ]
  ! GE              [ reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .) ]
  ! LE              [ reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .) ]
  ! NE              [ reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .) ]
  ! IN              [ reduce using rule 35 (expression -> DATATYPE FROM expression TO expression FROM expression .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for AND in state 29 resolved as shift
WARNING: shift/reduce conflict for OR in state 29 resolved as shift
WARNING: shift/reduce conflict for CALL in state 52 resolved as shift
WARNING: shift/reduce conflict for DATATYPE in state 80 resolved as shift
WARNING: shift/reduce conflict for LENGTH in state 80 resolved as shift
WARNING: shift/reduce conflict for FIND in state 80 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 80 resolved as shift
WARNING: shift/reduce conflict for YES in state 80 resolved as shift
WARNING: shift/reduce conflict for NO in state 80 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 80 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 80 resolved as shift
WARNING: shift/reduce conflict for TEXT in state 80 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 80 resolved as shift
WARNING: shift/reduce conflict for CALL in state 80 resolved as shift
WARNING: shift/reduce conflict for NOT in state 80 resolved as shift
WARNING: shift/reduce conflict for RANDOM in state 80 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 81 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 81 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 81 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 81 resolved as shift
WARNING: shift/reduce conflict for POWER in state 81 resolved as shift
WARNING: shift/reduce conflict for EQ in state 81 resolved as shift
WARNING: shift/reduce conflict for GT in state 81 resolved as shift
WARNING: shift/reduce conflict for LT in state 81 resolved as shift
WARNING: shift/reduce conflict for GE in state 81 resolved as shift
WARNING: shift/reduce conflict for LE in state 81 resolved as shift
WARNING: shift/reduce conflict for NE in state 81 resolved as shift
WARNING: shift/reduce conflict for IN in state 81 resolved as shift
WARNING: shift/reduce conflict for CALL in state 89 resolved as shift
WARNING: shift/reduce conflict for CALL in state 95 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 96 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 96 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 96 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 96 resolved as shift
WARNING: shift/reduce conflict for POWER in state 96 resolved as shift
WARNING: shift/reduce conflict for EQ in state 96 resolved as shift
WARNING: shift/reduce conflict for GT in state 96 resolved as shift
WARNING: shift/reduce conflict for LT in state 96 resolved as shift
WARNING: shift/reduce conflict for GE in state 96 resolved as shift
WARNING: shift/reduce conflict for LE in state 96 resolved as shift
WARNING: shift/reduce conflict for NE in state 96 resolved as shift
WARNING: shift/reduce conflict for IN in state 96 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 101 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 101 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 101 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 101 resolved as shift
WARNING: shift/reduce conflict for POWER in state 101 resolved as shift
WARNING: shift/reduce conflict for EQ in state 101 resolved as shift
WARNING: shift/reduce conflict for GT in state 101 resolved as shift
WARNING: shift/reduce conflict for LT in state 101 resolved as shift
WARNING: shift/reduce conflict for GE in state 101 resolved as shift
WARNING: shift/reduce conflict for LE in state 101 resolved as shift
WARNING: shift/reduce conflict for NE in state 101 resolved as shift
WARNING: shift/reduce conflict for IN in state 101 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 102 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 102 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 102 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 102 resolved as shift
WARNING: shift/reduce conflict for POWER in state 102 resolved as shift
WARNING: shift/reduce conflict for EQ in state 102 resolved as shift
WARNING: shift/reduce conflict for GT in state 102 resolved as shift
WARNING: shift/reduce conflict for LT in state 102 resolved as shift
WARNING: shift/reduce conflict for GE in state 102 resolved as shift
WARNING: shift/reduce conflict for LE in state 102 resolved as shift
WARNING: shift/reduce conflict for NE in state 102 resolved as shift
WARNING: shift/reduce conflict for IN in state 102 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 103 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 103 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 103 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 103 resolved as shift
WARNING: shift/reduce conflict for POWER in state 103 resolved as shift
WARNING: shift/reduce conflict for EQ in state 103 resolved as shift
WARNING: shift/reduce conflict for GT in state 103 resolved as shift
WARNING: shift/reduce conflict for LT in state 103 resolved as shift
WARNING: shift/reduce conflict for GE in state 103 resolved as shift
WARNING: shift/reduce conflict for LE in state 103 resolved as shift
WARNING: shift/reduce conflict for NE in state 103 resolved as shift
WARNING: shift/reduce conflict for IN in state 103 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 104 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 104 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 104 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 104 resolved as shift
WARNING: shift/reduce conflict for POWER in state 104 resolved as shift
WARNING: shift/reduce conflict for EQ in state 104 resolved as shift
WARNING: shift/reduce conflict for GT in state 104 resolved as shift
WARNING: shift/reduce conflict for LT in state 104 resolved as shift
WARNING: shift/reduce conflict for GE in state 104 resolved as shift
WARNING: shift/reduce conflict for LE in state 104 resolved as shift
WARNING: shift/reduce conflict for NE in state 104 resolved as shift
WARNING: shift/reduce conflict for IN in state 104 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 105 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 105 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 105 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 105 resolved as shift
WARNING: shift/reduce conflict for POWER in state 105 resolved as shift
WARNING: shift/reduce conflict for EQ in state 105 resolved as shift
WARNING: shift/reduce conflict for GT in state 105 resolved as shift
WARNING: shift/reduce conflict for LT in state 105 resolved as shift
WARNING: shift/reduce conflict for GE in state 105 resolved as shift
WARNING: shift/reduce conflict for LE in state 105 resolved as shift
WARNING: shift/reduce conflict for NE in state 105 resolved as shift
WARNING: shift/reduce conflict for IN in state 105 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 106 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 106 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 106 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 106 resolved as shift
WARNING: shift/reduce conflict for POWER in state 106 resolved as shift
WARNING: shift/reduce conflict for EQ in state 106 resolved as shift
WARNING: shift/reduce conflict for GT in state 106 resolved as shift
WARNING: shift/reduce conflict for LT in state 106 resolved as shift
WARNING: shift/reduce conflict for GE in state 106 resolved as shift
WARNING: shift/reduce conflict for LE in state 106 resolved as shift
WARNING: shift/reduce conflict for NE in state 106 resolved as shift
WARNING: shift/reduce conflict for IN in state 106 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 107 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 107 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 107 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 107 resolved as shift
WARNING: shift/reduce conflict for POWER in state 107 resolved as shift
WARNING: shift/reduce conflict for EQ in state 107 resolved as shift
WARNING: shift/reduce conflict for GT in state 107 resolved as shift
WARNING: shift/reduce conflict for LT in state 107 resolved as shift
WARNING: shift/reduce conflict for GE in state 107 resolved as shift
WARNING: shift/reduce conflict for LE in state 107 resolved as shift
WARNING: shift/reduce conflict for NE in state 107 resolved as shift
WARNING: shift/reduce conflict for IN in state 107 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 108 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 108 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 108 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 108 resolved as shift
WARNING: shift/reduce conflict for POWER in state 108 resolved as shift
WARNING: shift/reduce conflict for EQ in state 108 resolved as shift
WARNING: shift/reduce conflict for GT in state 108 resolved as shift
WARNING: shift/reduce conflict for LT in state 108 resolved as shift
WARNING: shift/reduce conflict for GE in state 108 resolved as shift
WARNING: shift/reduce conflict for LE in state 108 resolved as shift
WARNING: shift/reduce conflict for NE in state 108 resolved as shift
WARNING: shift/reduce conflict for IN in state 108 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 109 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 109 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 109 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 109 resolved as shift
WARNING: shift/reduce conflict for POWER in state 109 resolved as shift
WARNING: shift/reduce conflict for EQ in state 109 resolved as shift
WARNING: shift/reduce conflict for GT in state 109 resolved as shift
WARNING: shift/reduce conflict for LT in state 109 resolved as shift
WARNING: shift/reduce conflict for GE in state 109 resolved as shift
WARNING: shift/reduce conflict for LE in state 109 resolved as shift
WARNING: shift/reduce conflict for NE in state 109 resolved as shift
WARNING: shift/reduce conflict for IN in state 109 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 110 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 110 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 110 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 110 resolved as shift
WARNING: shift/reduce conflict for POWER in state 110 resolved as shift
WARNING: shift/reduce conflict for EQ in state 110 resolved as shift
WARNING: shift/reduce conflict for GT in state 110 resolved as shift
WARNING: shift/reduce conflict for LT in state 110 resolved as shift
WARNING: shift/reduce conflict for GE in state 110 resolved as shift
WARNING: shift/reduce conflict for LE in state 110 resolved as shift
WARNING: shift/reduce conflict for NE in state 110 resolved as shift
WARNING: shift/reduce conflict for IN in state 110 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 111 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 111 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 111 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 111 resolved as shift
WARNING: shift/reduce conflict for POWER in state 111 resolved as shift
WARNING: shift/reduce conflict for EQ in state 111 resolved as shift
WARNING: shift/reduce conflict for GT in state 111 resolved as shift
WARNING: shift/reduce conflict for LT in state 111 resolved as shift
WARNING: shift/reduce conflict for GE in state 111 resolved as shift
WARNING: shift/reduce conflict for LE in state 111 resolved as shift
WARNING: shift/reduce conflict for NE in state 111 resolved as shift
WARNING: shift/reduce conflict for IN in state 111 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 112 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 112 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 112 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 112 resolved as shift
WARNING: shift/reduce conflict for POWER in state 112 resolved as shift
WARNING: shift/reduce conflict for EQ in state 112 resolved as shift
WARNING: shift/reduce conflict for GT in state 112 resolved as shift
WARNING: shift/reduce conflict for LT in state 112 resolved as shift
WARNING: shift/reduce conflict for GE in state 112 resolved as shift
WARNING: shift/reduce conflict for LE in state 112 resolved as shift
WARNING: shift/reduce conflict for NE in state 112 resolved as shift
WARNING: shift/reduce conflict for IN in state 112 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 114 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 114 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 114 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 114 resolved as shift
WARNING: shift/reduce conflict for POWER in state 114 resolved as shift
WARNING: shift/reduce conflict for EQ in state 114 resolved as shift
WARNING: shift/reduce conflict for GT in state 114 resolved as shift
WARNING: shift/reduce conflict for LT in state 114 resolved as shift
WARNING: shift/reduce conflict for GE in state 114 resolved as shift
WARNING: shift/reduce conflict for LE in state 114 resolved as shift
WARNING: shift/reduce conflict for NE in state 114 resolved as shift
WARNING: shift/reduce conflict for IN in state 114 resolved as shift
WARNING: shift/reduce conflict for AND in state 117 resolved as shift
WARNING: shift/reduce conflict for OR in state 117 resolved as shift
WARNING: shift/reduce conflict for AND in state 119 resolved as shift
WARNING: shift/reduce conflict for OR in state 119 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 120 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 120 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 120 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 120 resolved as shift
WARNING: shift/reduce conflict for POWER in state 120 resolved as shift
WARNING: shift/reduce conflict for EQ in state 120 resolved as shift
WARNING: shift/reduce conflict for GT in state 120 resolved as shift
WARNING: shift/reduce conflict for LT in state 120 resolved as shift
WARNING: shift/reduce conflict for GE in state 120 resolved as shift
WARNING: shift/reduce conflict for LE in state 120 resolved as shift
WARNING: shift/reduce conflict for NE in state 120 resolved as shift
WARNING: shift/reduce conflict for IN in state 120 resolved as shift
WARNING: shift/reduce conflict for DATATYPE in state 122 resolved as shift
WARNING: shift/reduce conflict for LENGTH in state 122 resolved as shift
WARNING: shift/reduce conflict for FIND in state 122 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 122 resolved as shift
WARNING: shift/reduce conflict for YES in state 122 resolved as shift
WARNING: shift/reduce conflict for NO in state 122 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 122 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 122 resolved as shift
WARNING: shift/reduce conflict for TEXT in state 122 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 122 resolved as shift
WARNING: shift/reduce conflict for CALL in state 122 resolved as shift
WARNING: shift/reduce conflict for NOT in state 122 resolved as shift
WARNING: shift/reduce conflict for RANDOM in state 122 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 125 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 125 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 125 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 125 resolved as shift
WARNING: shift/reduce conflict for POWER in state 125 resolved as shift
WARNING: shift/reduce conflict for EQ in state 125 resolved as shift
WARNING: shift/reduce conflict for GT in state 125 resolved as shift
WARNING: shift/reduce conflict for LT in state 125 resolved as shift
WARNING: shift/reduce conflict for GE in state 125 resolved as shift
WARNING: shift/reduce conflict for LE in state 125 resolved as shift
WARNING: shift/reduce conflict for NE in state 125 resolved as shift
WARNING: shift/reduce conflict for IN in state 125 resolved as shift
WARNING: shift/reduce conflict for CALL in state 130 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 160 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 160 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 160 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 160 resolved as shift
WARNING: shift/reduce conflict for POWER in state 160 resolved as shift
WARNING: shift/reduce conflict for EQ in state 160 resolved as shift
WARNING: shift/reduce conflict for GT in state 160 resolved as shift
WARNING: shift/reduce conflict for LT in state 160 resolved as shift
WARNING: shift/reduce conflict for GE in state 160 resolved as shift
WARNING: shift/reduce conflict for LE in state 160 resolved as shift
WARNING: shift/reduce conflict for NE in state 160 resolved as shift
WARNING: shift/reduce conflict for IN in state 160 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 161 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 161 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 161 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 161 resolved as shift
WARNING: shift/reduce conflict for POWER in state 161 resolved as shift
WARNING: shift/reduce conflict for EQ in state 161 resolved as shift
WARNING: shift/reduce conflict for GT in state 161 resolved as shift
WARNING: shift/reduce conflict for LT in state 161 resolved as shift
WARNING: shift/reduce conflict for GE in state 161 resolved as shift
WARNING: shift/reduce conflict for LE in state 161 resolved as shift
WARNING: shift/reduce conflict for NE in state 161 resolved as shift
WARNING: shift/reduce conflict for IN in state 161 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 164 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 164 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 164 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 164 resolved as shift
WARNING: shift/reduce conflict for POWER in state 164 resolved as shift
WARNING: shift/reduce conflict for EQ in state 164 resolved as shift
WARNING: shift/reduce conflict for GT in state 164 resolved as shift
WARNING: shift/reduce conflict for LT in state 164 resolved as shift
WARNING: shift/reduce conflict for GE in state 164 resolved as shift
WARNING: shift/reduce conflict for LE in state 164 resolved as shift
WARNING: shift/reduce conflict for NE in state 164 resolved as shift
WARNING: shift/reduce conflict for IN in state 164 resolved as shift
WARNING: reduce/reduce conflict in state 83 resolved using rule (statement -> var_assignment TO expression)
WARNING: rejected rule (items -> expression) in state 83
WARNING: reduce/reduce conflict in state 117 resolved using rule (comp_expr -> comp_expr AND comp_expr)
WARNING: rejected rule (expression -> comp_expr) in state 117
WARNING: reduce/reduce conflict in state 119 resolved using rule (comp_expr -> comp_expr OR comp_expr)
WARNING: rejected rule (expression -> comp_expr) in state 119
WARNING: reduce/reduce conflict in state 160 resolved using rule (expression -> FIND OCCURENCES OF expression IN expression)
WARNING: rejected rule (comp_expr -> expression IN expression) in state 160
